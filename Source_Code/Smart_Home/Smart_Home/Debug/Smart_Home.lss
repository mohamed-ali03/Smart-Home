
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00000ec8  00000f5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008001c2  008001c2  000010be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000308a  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe7  00000000  00000000  0000445e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001733  00000000  00000000  00005445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00006b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bd0  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00009cc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	13 c4       	rjmp	.+2086   	; 0x82a <__vector_1>
   4:	3e c4       	rjmp	.+2172   	; 0x882 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	c9 c4       	rjmp	.+2450   	; 0x9aa <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ec       	ldi	r30, 0xC8	; 200
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 3c       	cpi	r26, 0xC2	; 194
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a2 ec       	ldi	r26, 0xC2	; 194
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 3e       	cpi	r26, 0xE0	; 224
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b3 d2       	rcall	.+1382   	; 0x5c0 <main>
  5a:	34 c7       	rjmp	.+3688   	; 0xec4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Buzzer_INIT>:
#include "Buzzer.h"


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	11 f0       	breq	.+4      	; 0x66 <Buzzer_INIT+0x8>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
  62:	91 d3       	rcall	.+1826   	; 0x786 <GPIO_PIN_Initialize>
  64:	08 95       	ret


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  66:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
	}
	return status ;
}
  68:	08 95       	ret

0000006a <Buzzer_Play>:
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  6a:	00 97       	sbiw	r24, 0x00	; 0
  6c:	19 f0       	breq	.+6      	; 0x74 <Buzzer_Play+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	df d2       	rcall	.+1470   	; 0x630 <GPIO_PIN_Write_logic>
  72:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  74:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
  76:	08 95       	ret

00000078 <Buzzer_Stop>:
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	19 f0       	breq	.+6      	; 0x82 <Buzzer_Stop+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	d8 d2       	rcall	.+1456   	; 0x630 <GPIO_PIN_Write_logic>
  80:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  82:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
	}
	return status ;
}
  84:	08 95       	ret

00000086 <Keypad_Init>:
	{'4', '5', '6'},
	{'7', '8', '9'},
	{'*', '0', '#'}
};

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	31 f1       	breq	.+76     	; 0xe2 <Keypad_Init+0x5c>
  96:	7b 01       	movw	r14, r22
  98:	8c 01       	movw	r16, r24
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	09 c0       	rjmp	.+18     	; 0xb4 <Keypad_Init+0x2e>
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
  a2:	ce 01       	movw	r24, r28
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	80 0f       	add	r24, r16
  ae:	91 1f       	adc	r25, r17
  b0:	6a d3       	rcall	.+1748   	; 0x786 <GPIO_PIN_Initialize>
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
  b2:	21 96       	adiw	r28, 0x01	; 1
  b4:	c4 30       	cpi	r28, 0x04	; 4
  b6:	d1 05       	cpc	r29, r1
  b8:	a0 f3       	brcs	.-24     	; 0xa2 <Keypad_Init+0x1c>
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	0a c0       	rjmp	.+20     	; 0xd4 <Keypad_Init+0x4e>
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
  c0:	ce 01       	movw	r24, r28
  c2:	04 96       	adiw	r24, 0x04	; 4
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	80 0f       	add	r24, r16
  ce:	91 1f       	adc	r25, r17
  d0:	5a d3       	rcall	.+1716   	; 0x786 <GPIO_PIN_Initialize>
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	c3 30       	cpi	r28, 0x03	; 3
  d6:	d1 05       	cpc	r29, r1
  d8:	98 f3       	brcs	.-26     	; 0xc0 <Keypad_Init+0x3a>
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
		}
		// init password
		keypad_obj->ActualPassword = password;
  da:	f8 01       	movw	r30, r16
  dc:	f5 8e       	std	Z+29, r15	; 0x1d
  de:	e4 8e       	std	Z+28, r14	; 0x1c
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <Keypad_Init+0x5e>

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
  e2:	80 e0       	ldi	r24, 0x00	; 0
		}
		// init password
		keypad_obj->ActualPassword = password;
	}
	return status;
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <Keypad_Get_char>:
}



/*-----------------------------------------------------asissstant functions---------------------------------------*/
STD_ReturnType Keypad_Get_char(const Keypad_Config *keypad_obj,uint8 *_char,Camera_status *cam){
  f2:	5f 92       	push	r5
  f4:	6f 92       	push	r6
  f6:	7f 92       	push	r7
  f8:	8f 92       	push	r8
  fa:	9f 92       	push	r9
  fc:	af 92       	push	r10
  fe:	bf 92       	push	r11
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	uint32 clear ;
	uint32 count_rows ;
	uint32 count_colums;
	
	
	if (NULL == keypad_obj ){
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	09 f4       	brne	.+2      	; 0x11c <Keypad_Get_char+0x2a>
 11a:	71 c0       	rjmp	.+226    	; 0x1fe <Keypad_Get_char+0x10c>
 11c:	3a 01       	movw	r6, r20
 11e:	4b 01       	movw	r8, r22
 120:	6c 01       	movw	r12, r24
 122:	51 2c       	mov	r5, r1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	67 c0       	rjmp	.+206    	; 0x1f6 <Keypad_Get_char+0x104>
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
			if(*cam == Face_Not_Detected){			
 128:	f3 01       	movw	r30, r6
 12a:	90 81       	ld	r25, Z
 12c:	92 30       	cpi	r25, 0x02	; 2
 12e:	09 f4       	brne	.+2      	; 0x132 <Keypad_Get_char+0x40>
 130:	5b c0       	rjmp	.+182    	; 0x1e8 <Keypad_Get_char+0xf6>
 132:	66 c0       	rjmp	.+204    	; 0x200 <__EEPROM_REGION_LENGTH__>
				for(count_colums = 0 ; count_colums < 3 ; count_colums++)
				{
					if (flag)
 134:	51 10       	cpse	r5, r1
 136:	5f c0       	rjmp	.+190    	; 0x1f6 <Keypad_Get_char+0x104>
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	10 e0       	ldi	r17, 0x00	; 0
 13c:	0c c0       	rjmp	.+24     	; 0x156 <Keypad_Get_char+0x64>
						break;
					
					// set all columns low then set the required column high
					for(clear = 0 ; clear < 3 ; clear++){
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
 13e:	c8 01       	movw	r24, r16
 140:	04 96       	adiw	r24, 0x04	; 4
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	8c 0d       	add	r24, r12
 14e:	9d 1d       	adc	r25, r13
 150:	6f d2       	rcall	.+1246   	; 0x630 <GPIO_PIN_Write_logic>
				{
					if (flag)
						break;
					
					// set all columns low then set the required column high
					for(clear = 0 ; clear < 3 ; clear++){
 152:	0f 5f       	subi	r16, 0xFF	; 255
 154:	1f 4f       	sbci	r17, 0xFF	; 255
 156:	03 30       	cpi	r16, 0x03	; 3
 158:	11 05       	cpc	r17, r1
 15a:	88 f3       	brcs	.-30     	; 0x13e <Keypad_Get_char+0x4c>
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
					}
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
 15c:	c5 01       	movw	r24, r10
 15e:	04 96       	adiw	r24, 0x04	; 4
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	8c 0d       	add	r24, r12
 16c:	9d 1d       	adc	r25, r13
 16e:	60 d2       	rcall	.+1216   	; 0x630 <GPIO_PIN_Write_logic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	e1 ee       	ldi	r30, 0xE1	; 225
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Keypad_Get_char+0x82>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Keypad_Get_char+0x88>
 17a:	00 00       	nop
					_delay_ms(5);
					for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
 180:	2b c0       	rjmp	.+86     	; 0x1d8 <Keypad_Get_char+0xe6>
						status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 182:	87 01       	movw	r16, r14
 184:	00 0f       	add	r16, r16
 186:	11 1f       	adc	r17, r17
 188:	00 0f       	add	r16, r16
 18a:	11 1f       	adc	r17, r17
 18c:	0c 0d       	add	r16, r12
 18e:	1d 1d       	adc	r17, r13
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	c8 01       	movw	r24, r16
 198:	8e d2       	rcall	.+1308   	; 0x6b6 <GPIO_PIN_Read_Logic>
					
						if (logic == GPIO_PIN_LOGIC_LOW){
 19a:	99 81       	ldd	r25, Y+1	; 0x01
 19c:	91 11       	cpse	r25, r1
 19e:	17 c0       	rjmp	.+46     	; 0x1ce <Keypad_Get_char+0xdc>
							*_char = keypad[count_rows][count_colums];
 1a0:	f7 01       	movw	r30, r14
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0d       	add	r30, r14
 1a8:	ff 1d       	adc	r31, r15
 1aa:	e2 55       	subi	r30, 0x52	; 82
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	ea 0d       	add	r30, r10
 1b0:	fb 1d       	adc	r31, r11
 1b2:	90 81       	ld	r25, Z
 1b4:	f4 01       	movw	r30, r8
 1b6:	90 83       	st	Z, r25
						
							while(!(logic == GPIO_PIN_LOGIC_HIGH)){
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <Keypad_Get_char+0xd2>
								status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	c8 01       	movw	r24, r16
 1c2:	79 d2       	rcall	.+1266   	; 0x6b6 <GPIO_PIN_Read_Logic>
						status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
					
						if (logic == GPIO_PIN_LOGIC_LOW){
							*_char = keypad[count_rows][count_colums];
						
							while(!(logic == GPIO_PIN_LOGIC_HIGH)){
 1c4:	99 81       	ldd	r25, Y+1	; 0x01
 1c6:	91 30       	cpi	r25, 0x01	; 1
 1c8:	c1 f7       	brne	.-16     	; 0x1ba <Keypad_Get_char+0xc8>
								status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
							}
							flag = True ;
 1ca:	55 24       	eor	r5, r5
 1cc:	53 94       	inc	r5
						}
						if(flag)
 1ce:	51 10       	cpse	r5, r1
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <Keypad_Get_char+0xee>
					for(clear = 0 ; clear < 3 ; clear++){
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
					}
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
					_delay_ms(5);
					for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 1d2:	ff ef       	ldi	r31, 0xFF	; 255
 1d4:	ef 1a       	sub	r14, r31
 1d6:	ff 0a       	sbc	r15, r31
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	e9 16       	cp	r14, r25
 1dc:	f1 04       	cpc	r15, r1
 1de:	88 f2       	brcs	.-94     	; 0x182 <Keypad_Get_char+0x90>
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
			if(*cam == Face_Not_Detected){			
				for(count_colums = 0 ; count_colums < 3 ; count_colums++)
 1e0:	ef ef       	ldi	r30, 0xFF	; 255
 1e2:	ae 1a       	sub	r10, r30
 1e4:	be 0a       	sbc	r11, r30
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Keypad_Get_char+0xfa>
 1e8:	a1 2c       	mov	r10, r1
 1ea:	b1 2c       	mov	r11, r1
 1ec:	f3 e0       	ldi	r31, 0x03	; 3
 1ee:	af 16       	cp	r10, r31
 1f0:	b1 04       	cpc	r11, r1
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <Keypad_Get_char+0x104>
 1f4:	9f cf       	rjmp	.-194    	; 0x134 <Keypad_Get_char+0x42>
	
	if (NULL == keypad_obj ){
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
 1f6:	55 20       	and	r5, r5
 1f8:	09 f4       	brne	.+2      	; 0x1fc <Keypad_Get_char+0x10a>
 1fa:	96 cf       	rjmp	.-212    	; 0x128 <Keypad_Get_char+0x36>
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <__EEPROM_REGION_LENGTH__>
	uint32 count_rows ;
	uint32 count_colums;
	
	
	if (NULL == keypad_obj ){
		status = RET_NOT_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	
	return status;
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	9f 90       	pop	r9
 218:	8f 90       	pop	r8
 21a:	7f 90       	pop	r7
 21c:	6f 90       	pop	r6
 21e:	5f 90       	pop	r5
 220:	08 95       	ret

00000222 <Keypad_Get_Check_Password>:
	return status;
}



STD_ReturnType Keypad_Get_Check_Password(const Keypad_Config *keypad_obj,uint8 pass[],bool *ispasstrue,Camera_status *cam){
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	if (NULL == keypad_obj || NULL == pass){
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	89 f1       	breq	.+98     	; 0x2a8 <Keypad_Get_Check_Password+0x86>
 246:	61 15       	cp	r22, r1
 248:	71 05       	cpc	r23, r1
 24a:	81 f1       	breq	.+96     	; 0x2ac <Keypad_Get_Check_Password+0x8a>
 24c:	79 01       	movw	r14, r18
 24e:	4a 01       	movw	r8, r20
 250:	5b 01       	movw	r10, r22
 252:	6c 01       	movw	r12, r24
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	77 24       	eor	r7, r7
 25a:	73 94       	inc	r7
		status = RET_NOT_OK;
	}
	else{
		while(1){
			if(*cam == Face_Not_Detected){
 25c:	f7 01       	movw	r30, r14
 25e:	80 81       	ld	r24, Z
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	29 f5       	brne	.+74     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
				status = Keypad_Get_char(keypad_obj,&key,cam);
 264:	a7 01       	movw	r20, r14
 266:	be 01       	movw	r22, r28
 268:	6f 5f       	subi	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	c6 01       	movw	r24, r12
 26e:	41 df       	rcall	.-382    	; 0xf2 <Keypad_Get_char>
 270:	78 2e       	mov	r7, r24
				if(key == '#'){
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	83 32       	cpi	r24, 0x23	; 35
 276:	71 f4       	brne	.+28     	; 0x294 <Keypad_Get_Check_Password+0x72>
					if (strcmp(pass,keypad_obj->ActualPassword) == 0 ){
 278:	f6 01       	movw	r30, r12
 27a:	64 8d       	ldd	r22, Z+28	; 0x1c
 27c:	75 8d       	ldd	r23, Z+29	; 0x1d
 27e:	c5 01       	movw	r24, r10
 280:	18 d6       	rcall	.+3120   	; 0xeb2 <strcmp>
 282:	89 2b       	or	r24, r25
 284:	21 f4       	brne	.+8      	; 0x28e <Keypad_Get_Check_Password+0x6c>
						*ispasstrue = True;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	f4 01       	movw	r30, r8
 28a:	80 83       	st	Z, r24
 28c:	10 c0       	rjmp	.+32     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
					}
					else {
						*ispasstrue = False;
 28e:	f4 01       	movw	r30, r8
 290:	10 82       	st	Z, r1
 292:	0d c0       	rjmp	.+26     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
					}
					break;
				}
				else if (index <4){
 294:	04 30       	cpi	r16, 0x04	; 4
 296:	11 05       	cpc	r17, r1
 298:	08 f7       	brcc	.-62     	; 0x25c <Keypad_Get_Check_Password+0x3a>
					pass[index] = key ;
 29a:	f5 01       	movw	r30, r10
 29c:	e0 0f       	add	r30, r16
 29e:	f1 1f       	adc	r31, r17
 2a0:	80 83       	st	Z, r24
					index++;
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	da cf       	rjmp	.-76     	; 0x25c <Keypad_Get_Check_Password+0x3a>
STD_ReturnType Keypad_Get_Check_Password(const Keypad_Config *keypad_obj,uint8 pass[],bool *ispasstrue,Camera_status *cam){
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	if (NULL == keypad_obj || NULL == pass){
		status = RET_NOT_OK;
 2a8:	71 2c       	mov	r7, r1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <Keypad_Get_Check_Password+0x8c>
 2ac:	71 2c       	mov	r7, r1
				break;
			}
		}
	}
	return status;
}
 2ae:	87 2d       	mov	r24, r7
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	7f 90       	pop	r7
 2cc:	08 95       	ret

000002ce <RGB_LED_INIT>:
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW);
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <RGB_LED_INIT+0x14>
 2d6:	ec 01       	movw	r28, r24
 2d8:	56 d2       	rcall	.+1196   	; 0x786 <GPIO_PIN_Initialize>
 2da:	ce 01       	movw	r24, r28
 2dc:	04 96       	adiw	r24, 0x04	; 4
 2de:	53 d2       	rcall	.+1190   	; 0x786 <GPIO_PIN_Initialize>
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <RGB_LED_INIT+0x16>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <RGB_LED_RED>:
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	41 f0       	breq	.+16     	; 0x302 <RGB_LED_RED+0x18>
 2f2:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	9c d1       	rcall	.+824    	; 0x630 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	ce 01       	movw	r24, r28
 2fc:	04 96       	adiw	r24, 0x04	; 4
 2fe:	98 d1       	rcall	.+816    	; 0x630 <GPIO_PIN_Write_logic>
 300:	01 c0       	rjmp	.+2      	; 0x304 <RGB_LED_RED+0x1a>
	return status ;
}
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 302:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <RGB_LED_BLUE>:

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	41 f0       	breq	.+16     	; 0x322 <RGB_LED_BLUE+0x18>
 312:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8c d1       	rcall	.+792    	; 0x630 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	ce 01       	movw	r24, r28
 31c:	04 96       	adiw	r24, 0x04	; 4
 31e:	88 d1       	rcall	.+784    	; 0x630 <GPIO_PIN_Write_logic>
 320:	01 c0       	rjmp	.+2      	; 0x324 <RGB_LED_BLUE+0x1a>
}

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 322:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
	}
	return status ;
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <RGB_LED_GREEN>:

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	41 f0       	breq	.+16     	; 0x342 <RGB_LED_GREEN+0x18>
 332:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	7c d1       	rcall	.+760    	; 0x630 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	ce 01       	movw	r24, r28
 33c:	04 96       	adiw	r24, 0x04	; 4
 33e:	78 d1       	rcall	.+752    	; 0x630 <GPIO_PIN_Write_logic>
 340:	01 c0       	rjmp	.+2      	; 0x344 <RGB_LED_GREEN+0x1a>
}

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 342:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <PIR_Sense>:

																					/* take the reading from the sensors  and make an action */

// INT0 : if PIR sense any motion it will set flag and enable the other sensors
void PIR_Sense(void){
	PIR_Flag = True ;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <PIR_Flag>
 350:	08 95       	ret

00000352 <Open_Door>:
}
																					/* interaction with computer vision */
// when USART module receive 1 the interrupt will excute this function
void Open_Door(void){
		// Example: Move servo to 0 degrees
		set_servo_angle(90);
 352:	8a e5       	ldi	r24, 0x5A	; 90
 354:	fa d2       	rcall	.+1524   	; 0x94a <set_servo_angle>

		// Example: Move servo to 90 degrees
		set_servo_angle(180);
 356:	84 eb       	ldi	r24, 0xB4	; 180
 358:	f8 d2       	rcall	.+1520   	; 0x94a <set_servo_angle>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	89 e6       	ldi	r24, 0x69	; 105
 35e:	98 e1       	ldi	r25, 0x18	; 24
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <Open_Door+0xe>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Open_Door+0x18>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <Initialize>:
}
			
																		/* Initialize all Modules and devices */
void Initialize (void){
	// Internal peripherals
	status = PWM_Init(&PWM);			// Lighting control and fan motor using PWM with timer1			
 36e:	85 e9       	ldi	r24, 0x95	; 149
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	b3 d2       	rcall	.+1382   	; 0x8da <PWM_Init>
 374:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	PWM_init_Timer2();					// servo motor using PWM with timer2
 378:	e0 d2       	rcall	.+1472   	; 0x93a <PWM_init_Timer2>
	status = ADC_Initialize(&adc);		// temperature and lighting sensor using ADC
 37a:	87 e9       	ldi	r24, 0x97	; 151
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	26 d1       	rcall	.+588    	; 0x5cc <ADC_Initialize>
 380:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	USART_Init(&usart);						// communicate with virtual terminal 
 384:	81 e9       	ldi	r24, 0x91	; 145
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ea d2       	rcall	.+1492   	; 0x95e <USART_Init>
	// External interrrupt
	status = INTx_Initialize(&PIR_Sensor);		// motion sensor using external interrrupt(INT)
 38a:	8b e8       	ldi	r24, 0x8B	; 139
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	3d d2       	rcall	.+1146   	; 0x80a <INTx_Initialize>
 390:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	// output moduls
	status = RGB_LED_INIT(&rgb);				// RGB led init
 394:	84 e6       	ldi	r24, 0x64	; 100
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	9a df       	rcall	.-204    	; 0x2ce <RGB_LED_INIT>
 39a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	status = Keypad_Init(&keypad__,password);	// Keypad init 
 39e:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <password>
 3a2:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <password+0x1>
 3a6:	8d e6       	ldi	r24, 0x6D	; 109
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	6d de       	rcall	.-806    	; 0x86 <Keypad_Init>
 3ac:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	status = Buzzer_INIT(&buzzer_);				// Buzzer init
 3b0:	80 e6       	ldi	r24, 0x60	; 96
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	54 de       	rcall	.-856    	; 0x5e <Buzzer_INIT>
 3b6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
																					
	// intialize the status of the fan and lighing
	PWM_Write(FAN_STOP,motor_en);				// make motor off at begin
 3ba:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <__data_end>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	b1 d2       	rcall	.+1378   	; 0x926 <PWM_Write>
	PWM_Write(0,lighting_led);					// make light off at begin 
 3c4:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <lighting_led>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	ac d2       	rcall	.+1368   	; 0x926 <PWM_Write>
 3ce:	08 95       	ret

000003d0 <Close_Door>:
		_delay_ms(1000);
}

void Close_Door(void){
	// Example: Move servo to 0 degrees
	set_servo_angle(90);
 3d0:	8a e5       	ldi	r24, 0x5A	; 90
 3d2:	bb d2       	rcall	.+1398   	; 0x94a <set_servo_angle>
 3d4:	08 95       	ret

000003d6 <Temperature>:
}
																	/* sense temperature and make an action according to it */
void Temperature(void){
	// sense the temperature of the room
	status = ADC_Read(temp_sensor,&LD35DZ_Reading);
 3d6:	69 ed       	ldi	r22, 0xD9	; 217
 3d8:	71 e0       	ldi	r23, 0x01	; 1
 3da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <temp_sensor>
 3de:	12 d1       	rcall	.+548    	; 0x604 <ADC_Read>
 3e0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	// Convert the ADC value to temperature in degrees Celsius.
	TMP = (uint16)(round((LD35DZ_Reading * 5.0/1023.0 - 0.5)*100));	// for tmp36
 3e4:	60 91 d9 01 	lds	r22, 0x01D9	; 0x8001d9 <LD35DZ_Reading>
 3e8:	70 91 da 01 	lds	r23, 0x01DA	; 0x8001da <LD35DZ_Reading+0x1>
 3ec:	07 2e       	mov	r0, r23
 3ee:	00 0c       	add	r0, r0
 3f0:	88 0b       	sbc	r24, r24
 3f2:	99 0b       	sbc	r25, r25
 3f4:	ff d3       	rcall	.+2046   	; 0xbf4 <__floatsisf>
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 ea       	ldi	r20, 0xA0	; 160
 3fc:	50 e4       	ldi	r21, 0x40	; 64
 3fe:	86 d4       	rcall	.+2316   	; 0xd0c <__mulsf3>
 400:	20 e0       	ldi	r18, 0x00	; 0
 402:	30 ec       	ldi	r19, 0xC0	; 192
 404:	4f e7       	ldi	r20, 0x7F	; 127
 406:	54 e4       	ldi	r21, 0x44	; 68
 408:	5f d3       	rcall	.+1726   	; 0xac8 <__divsf3>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	5f e3       	ldi	r21, 0x3F	; 63
 412:	f5 d2       	rcall	.+1514   	; 0x9fe <__subsf3>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	48 ec       	ldi	r20, 0xC8	; 200
 41a:	52 e4       	ldi	r21, 0x42	; 66
 41c:	77 d4       	rcall	.+2286   	; 0xd0c <__mulsf3>
 41e:	d9 d4       	rcall	.+2482   	; 0xdd2 <round>
 420:	bb d3       	rcall	.+1910   	; 0xb98 <__fixunssfsi>
 422:	70 93 cb 01 	sts	0x01CB, r23	; 0x8001cb <TMP+0x1>
 426:	60 93 ca 01 	sts	0x01CA, r22	; 0x8001ca <TMP>
	//TMP = (uint16)(round((LD35DZ_Reading * 5.0/1023.0 )*100));			// for ld35dz
	
	//TMP = 25;
	// choose the suitable state
	if(TMP < 20 ){
 42a:	64 31       	cpi	r22, 0x14	; 20
 42c:	71 05       	cpc	r23, r1
 42e:	7c f4       	brge	.+30     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
		motor_speed =  FAN_STOP ;
 430:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <motor_speed+0x1>
 434:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <motor_speed>
		PWM_Write(motor_speed,motor_en);
 438:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <__data_end>
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	72 d2       	rcall	.+1252   	; 0x926 <PWM_Write>
		status = RGB_LED_BLUE(&rgb);
 442:	84 e6       	ldi	r24, 0x64	; 100
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	61 df       	rcall	.-318    	; 0x30a <RGB_LED_BLUE>
 448:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 44c:	08 95       	ret
	}
	else if(TMP >= 20 && TMP <=30) {
 44e:	ab 01       	movw	r20, r22
 450:	44 51       	subi	r20, 0x14	; 20
 452:	51 09       	sbc	r21, r1
 454:	4b 30       	cpi	r20, 0x0B	; 11
 456:	51 05       	cpc	r21, r1
 458:	48 f5       	brcc	.+82     	; 0x4ac <__stack+0x4d>
		motor_speed = (uint16)(round(512 + (TMP-20) * 511/10.0) );
 45a:	2f ef       	ldi	r18, 0xFF	; 255
 45c:	31 e0       	ldi	r19, 0x01	; 1
 45e:	42 9f       	mul	r20, r18
 460:	c0 01       	movw	r24, r0
 462:	43 9f       	mul	r20, r19
 464:	90 0d       	add	r25, r0
 466:	52 9f       	mul	r21, r18
 468:	90 0d       	add	r25, r0
 46a:	11 24       	eor	r1, r1
 46c:	bc 01       	movw	r22, r24
 46e:	99 0f       	add	r25, r25
 470:	88 0b       	sbc	r24, r24
 472:	99 0b       	sbc	r25, r25
 474:	bf d3       	rcall	.+1918   	; 0xbf4 <__floatsisf>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e2       	ldi	r20, 0x20	; 32
 47c:	51 e4       	ldi	r21, 0x41	; 65
 47e:	24 d3       	rcall	.+1608   	; 0xac8 <__divsf3>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	54 e4       	ldi	r21, 0x44	; 68
 488:	bb d2       	rcall	.+1398   	; 0xa00 <__addsf3>
 48a:	a3 d4       	rcall	.+2374   	; 0xdd2 <round>
 48c:	85 d3       	rcall	.+1802   	; 0xb98 <__fixunssfsi>
 48e:	dc 01       	movw	r26, r24
 490:	cb 01       	movw	r24, r22
 492:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <motor_speed+0x1>
 496:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <motor_speed>
		PWM_Write(motor_speed,motor_en);
 49a:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <__data_end>
 49e:	43 d2       	rcall	.+1158   	; 0x926 <PWM_Write>
		status = RGB_LED_GREEN(&rgb);
 4a0:	84 e6       	ldi	r24, 0x64	; 100
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	42 df       	rcall	.-380    	; 0x32a <RGB_LED_GREEN>
 4a6:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 4aa:	08 95       	ret
	}
	else if(TMP > 30){
 4ac:	6f 31       	cpi	r22, 0x1F	; 31
 4ae:	71 05       	cpc	r23, r1
 4b0:	74 f0       	brlt	.+28     	; 0x4ce <__stack+0x6f>
		motor_speed = FAN_MAX_SPEED ;
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <motor_speed+0x1>
 4ba:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <motor_speed>
		PWM_Write(motor_speed,motor_en);
 4be:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <__data_end>
 4c2:	31 d2       	rcall	.+1122   	; 0x926 <PWM_Write>
		status = RGB_LED_RED(&rgb);
 4c4:	84 e6       	ldi	r24, 0x64	; 100
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	10 df       	rcall	.-480    	; 0x2ea <RGB_LED_RED>
 4ca:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 4ce:	08 95       	ret

000004d0 <Lighting>:
}

																			/* sense the lighing and make an action according to it */
void Lighting(void) {
	// Read lighting sensor ADC value and convert it to a percentage (0-100%) based on a 403 max value.
	status = ADC_Read(lighting_sensor,&LDR_Reading);
 4d0:	63 ed       	ldi	r22, 0xD3	; 211
 4d2:	71 e0       	ldi	r23, 0x01	; 1
 4d4:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <lighting_sensor>
 4d8:	95 d0       	rcall	.+298    	; 0x604 <ADC_Read>
 4da:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	led_brightness = 1023 - LDR_Reading ;
 4de:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <LDR_Reading>
 4e2:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <LDR_Reading+0x1>
 4e6:	8f ef       	ldi	r24, 0xFF	; 255
 4e8:	93 e0       	ldi	r25, 0x03	; 3
 4ea:	82 1b       	sub	r24, r18
 4ec:	93 0b       	sbc	r25, r19
 4ee:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <led_brightness+0x1>
 4f2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <led_brightness>
	PWM_Write(led_brightness,lighting_led);
 4f6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <lighting_led>
 4fa:	15 d2       	rcall	.+1066   	; 0x926 <PWM_Write>
	Light = (uint16)(100 - round(LDR_Reading * 100.0/1023.0));
 4fc:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <LDR_Reading>
 500:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <LDR_Reading+0x1>
 504:	07 2e       	mov	r0, r23
 506:	00 0c       	add	r0, r0
 508:	88 0b       	sbc	r24, r24
 50a:	99 0b       	sbc	r25, r25
 50c:	73 d3       	rcall	.+1766   	; 0xbf4 <__floatsisf>
 50e:	20 e0       	ldi	r18, 0x00	; 0
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	48 ec       	ldi	r20, 0xC8	; 200
 514:	52 e4       	ldi	r21, 0x42	; 66
 516:	fa d3       	rcall	.+2036   	; 0xd0c <__mulsf3>
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 ec       	ldi	r19, 0xC0	; 192
 51c:	4f e7       	ldi	r20, 0x7F	; 127
 51e:	54 e4       	ldi	r21, 0x44	; 68
 520:	d3 d2       	rcall	.+1446   	; 0xac8 <__divsf3>
 522:	57 d4       	rcall	.+2222   	; 0xdd2 <round>
 524:	9b 01       	movw	r18, r22
 526:	ac 01       	movw	r20, r24
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	88 ec       	ldi	r24, 0xC8	; 200
 52e:	92 e4       	ldi	r25, 0x42	; 66
 530:	66 d2       	rcall	.+1228   	; 0x9fe <__subsf3>
 532:	32 d3       	rcall	.+1636   	; 0xb98 <__fixunssfsi>
 534:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <Light+0x1>
 538:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <Light>
 53c:	08 95       	ret

0000053e <wholeProject>:
	return 0 ;
}

void wholeProject(void){
	// computer vision part
	if (cam_status == Face_Detected){
 53e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cam_status>
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	39 f4       	brne	.+14     	; 0x554 <wholeProject+0x16>
		USART_SendStr("Door is opened using Face Detection\n\r");
 546:	8a eb       	ldi	r24, 0xBA	; 186
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	23 d2       	rcall	.+1094   	; 0x992 <USART_SendStr>
		Open_Door();
 54c:	02 df       	rcall	.-508    	; 0x352 <Open_Door>
		cam_status = No_one ;
 54e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <cam_status>
 552:	2f c0       	rjmp	.+94     	; 0x5b2 <wholeProject+0x74>
	}	
	else if (cam_status == Face_Not_Detected) {
 554:	82 30       	cpi	r24, 0x02	; 2
 556:	51 f5       	brne	.+84     	; 0x5ac <wholeProject+0x6e>
		USART_SendStr("Welcome\n\r");
 558:	80 ee       	ldi	r24, 0xE0	; 224
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	1a d2       	rcall	.+1076   	; 0x992 <USART_SendStr>
		USART_SendStr("Your are not in the data base. please enter the password on keypad\n\r");
 55e:	8a ee       	ldi	r24, 0xEA	; 234
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	17 d2       	rcall	.+1070   	; 0x992 <USART_SendStr>
		status = Keypad_Get_Check_Password(&keypad__,&EnterPass,&IsPassTrue,&cam_status);
 564:	24 ec       	ldi	r18, 0xC4	; 196
 566:	31 e0       	ldi	r19, 0x01	; 1
 568:	43 ec       	ldi	r20, 0xC3	; 195
 56a:	51 e0       	ldi	r21, 0x01	; 1
 56c:	6e ec       	ldi	r22, 0xCE	; 206
 56e:	71 e0       	ldi	r23, 0x01	; 1
 570:	8d e6       	ldi	r24, 0x6D	; 109
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	56 de       	rcall	.-852    	; 0x222 <Keypad_Get_Check_Password>
 576:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
		if(IsPassTrue){
 57a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <IsPassTrue>
 57e:	88 23       	and	r24, r24
 580:	51 f0       	breq	.+20     	; 0x596 <wholeProject+0x58>
			USART_SendStr("Door is opened using password\n\r");
 582:	8f e2       	ldi	r24, 0x2F	; 47
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	05 d2       	rcall	.+1034   	; 0x992 <USART_SendStr>
			status = Buzzer_Stop(&buzzer_);
 588:	80 e6       	ldi	r24, 0x60	; 96
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	75 dd       	rcall	.-1302   	; 0x78 <Buzzer_Stop>
 58e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
			Open_Door();
 592:	df de       	rcall	.-578    	; 0x352 <Open_Door>
 594:	08 c0       	rjmp	.+16     	; 0x5a6 <wholeProject+0x68>
		}
		else {
			USART_SendStr("password is not True .Please Try again\n\r");
 596:	8f e4       	ldi	r24, 0x4F	; 79
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	fb d1       	rcall	.+1014   	; 0x992 <USART_SendStr>
			status = Buzzer_Play(&buzzer_);
 59c:	80 e6       	ldi	r24, 0x60	; 96
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	64 dd       	rcall	.-1336   	; 0x6a <Buzzer_Play>
 5a2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
		}
		cam_status = No_one;
 5a6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <cam_status>
 5aa:	03 c0       	rjmp	.+6      	; 0x5b2 <wholeProject+0x74>
	}
	else if (cam_status == No_one )
 5ac:	81 11       	cpse	r24, r1
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <wholeProject+0x74>
	{
		Close_Door();
 5b0:	0f df       	rcall	.-482    	; 0x3d0 <Close_Door>
	}
	
	if(PIR_Flag){
 5b2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <PIR_Flag>
 5b6:	88 23       	and	r24, r24
 5b8:	11 f0       	breq	.+4      	; 0x5be <wholeProject+0x80>
		Temperature();
 5ba:	0d df       	rcall	.-486    	; 0x3d6 <Temperature>
		Lighting();
 5bc:	89 df       	rcall	.-238    	; 0x4d0 <Lighting>
 5be:	08 95       	ret

000005c0 <main>:
#include "main.h"

uint8 var ;
int main(void)
{
	Initialize();
 5c0:	d6 de       	rcall	.-596    	; 0x36e <Initialize>
	USART_SendStr("Welcome\n\r");
 5c2:	80 ee       	ldi	r24, 0xE0	; 224
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	e5 d1       	rcall	.+970    	; 0x992 <USART_SendStr>
    while (1) 
    {	
		wholeProject();
 5c8:	ba df       	rcall	.-140    	; 0x53e <wholeProject>
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <main+0x8>

000005cc <ADC_Initialize>:
	else {
		// Disable ADC Module
		ADC_DISABLE();
	}
	return status ;
}
 5cc:	fc 01       	movw	r30, r24
 5ce:	89 2b       	or	r24, r25
 5d0:	b9 f0       	breq	.+46     	; 0x600 <ADC_Initialize+0x34>
 5d2:	86 b1       	in	r24, 0x06	; 6
 5d4:	8f 77       	andi	r24, 0x7F	; 127
 5d6:	86 b9       	out	0x06, r24	; 6
 5d8:	87 b1       	in	r24, 0x07	; 7
 5da:	90 81       	ld	r25, Z
 5dc:	40 e4       	ldi	r20, 0x40	; 64
 5de:	94 9f       	mul	r25, r20
 5e0:	90 01       	movw	r18, r0
 5e2:	11 24       	eor	r1, r1
 5e4:	8f 73       	andi	r24, 0x3F	; 63
 5e6:	28 2b       	or	r18, r24
 5e8:	27 b9       	out	0x07, r18	; 7
 5ea:	96 b1       	in	r25, 0x06	; 6
 5ec:	81 81       	ldd	r24, Z+1	; 0x01
 5ee:	98 7f       	andi	r25, 0xF8	; 248
 5f0:	87 70       	andi	r24, 0x07	; 7
 5f2:	89 2b       	or	r24, r25
 5f4:	86 b9       	out	0x06, r24	; 6
 5f6:	86 b1       	in	r24, 0x06	; 6
 5f8:	80 68       	ori	r24, 0x80	; 128
 5fa:	86 b9       	out	0x06, r24	; 6
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	08 95       	ret

00000604 <ADC_Read>:

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
	if(NULL == data)
 604:	61 15       	cp	r22, r1
 606:	71 05       	cpc	r23, r1
 608:	89 f0       	breq	.+34     	; 0x62c <ADC_Read+0x28>
	{
		status = RET_NOT_OK;
	}
	else {
		// Configure the required pin as analog input
		ADCx_SELECT_PIN(channal);
 60a:	97 b1       	in	r25, 0x07	; 7
 60c:	90 7f       	andi	r25, 0xF0	; 240
 60e:	8f 70       	andi	r24, 0x0F	; 15
 610:	89 2b       	or	r24, r25
 612:	87 b9       	out	0x07, r24	; 7
		// Start Conversion
		ADC_START_CONVERSION();
 614:	86 b1       	in	r24, 0x06	; 6
 616:	80 64       	ori	r24, 0x40	; 64
 618:	86 b9       	out	0x06, r24	; 6
		// wait 
		while(ADCSRA & (1 << BIT6));
 61a:	36 99       	sbic	0x06, 6	; 6
 61c:	fe cf       	rjmp	.-4      	; 0x61a <ADC_Read+0x16>
		// get the reading
		*data = ADC;
 61e:	84 b1       	in	r24, 0x04	; 4
 620:	95 b1       	in	r25, 0x05	; 5
 622:	fb 01       	movw	r30, r22
 624:	91 83       	std	Z+1, r25	; 0x01
 626:	80 83       	st	Z, r24
	}
	return status ;
}

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	08 95       	ret
	if(NULL == data)
	{
		status = RET_NOT_OK;
 62c:	80 e0       	ldi	r24, 0x00	; 0
		while(ADCSRA & (1 << BIT6));
		// get the reading
		*data = ADC;
	}
	return status ;
}
 62e:	08 95       	ret

00000630 <GPIO_PIN_Write_logic>:
	}
	else{
		TOGGLE_BIN(*PORT_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 630:	00 97       	sbiw	r24, 0x00	; 0
 632:	e9 f1       	breq	.+122    	; 0x6ae <GPIO_PIN_Write_logic+0x7e>
 634:	61 11       	cpse	r22, r1
 636:	1d c0       	rjmp	.+58     	; 0x672 <GPIO_PIN_Write_logic+0x42>
 638:	dc 01       	movw	r26, r24
 63a:	12 96       	adiw	r26, 0x02	; 2
 63c:	ec 91       	ld	r30, X
 63e:	12 97       	sbiw	r26, 0x02	; 2
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	e8 55       	subi	r30, 0x58	; 88
 648:	ff 4f       	sbci	r31, 0xFF	; 255
 64a:	01 90       	ld	r0, Z+
 64c:	f0 81       	ld	r31, Z
 64e:	e0 2d       	mov	r30, r0
 650:	40 81       	ld	r20, Z
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	30 e0       	ldi	r19, 0x00	; 0
 656:	b9 01       	movw	r22, r18
 658:	13 96       	adiw	r26, 0x03	; 3
 65a:	0c 90       	ld	r0, X
 65c:	02 c0       	rjmp	.+4      	; 0x662 <GPIO_PIN_Write_logic+0x32>
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	0a 94       	dec	r0
 664:	e2 f7       	brpl	.-8      	; 0x65e <GPIO_PIN_Write_logic+0x2e>
 666:	cb 01       	movw	r24, r22
 668:	80 95       	com	r24
 66a:	84 23       	and	r24, r20
 66c:	80 83       	st	Z, r24
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret
 672:	61 30       	cpi	r22, 0x01	; 1
 674:	f1 f4       	brne	.+60     	; 0x6b2 <GPIO_PIN_Write_logic+0x82>
 676:	dc 01       	movw	r26, r24
 678:	12 96       	adiw	r26, 0x02	; 2
 67a:	ec 91       	ld	r30, X
 67c:	12 97       	sbiw	r26, 0x02	; 2
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	ee 0f       	add	r30, r30
 682:	ff 1f       	adc	r31, r31
 684:	e8 55       	subi	r30, 0x58	; 88
 686:	ff 4f       	sbci	r31, 0xFF	; 255
 688:	01 90       	ld	r0, Z+
 68a:	f0 81       	ld	r31, Z
 68c:	e0 2d       	mov	r30, r0
 68e:	40 81       	ld	r20, Z
 690:	21 e0       	ldi	r18, 0x01	; 1
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	b9 01       	movw	r22, r18
 696:	13 96       	adiw	r26, 0x03	; 3
 698:	0c 90       	ld	r0, X
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <GPIO_PIN_Write_logic+0x70>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	0a 94       	dec	r0
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <GPIO_PIN_Write_logic+0x6c>
 6a4:	cb 01       	movw	r24, r22
 6a6:	84 2b       	or	r24, r20
 6a8:	80 83       	st	Z, r24
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	08 95       	ret
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 95       	ret

000006b6 <GPIO_PIN_Read_Logic>:

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin || NULL == _logic){
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	f9 f0       	breq	.+62     	; 0x6f8 <GPIO_PIN_Read_Logic+0x42>
 6ba:	61 15       	cp	r22, r1
 6bc:	71 05       	cpc	r23, r1
 6be:	f1 f0       	breq	.+60     	; 0x6fc <GPIO_PIN_Read_Logic+0x46>
		Ret = RET_NOT_OK ;
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
 6c0:	dc 01       	movw	r26, r24
 6c2:	12 96       	adiw	r26, 0x02	; 2
 6c4:	ec 91       	ld	r30, X
 6c6:	12 97       	sbiw	r26, 0x02	; 2
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	ee 0f       	add	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	e4 56       	subi	r30, 0x64	; 100
 6d0:	ff 4f       	sbci	r31, 0xFF	; 255
 6d2:	01 90       	ld	r0, Z+
 6d4:	f0 81       	ld	r31, Z
 6d6:	e0 2d       	mov	r30, r0
 6d8:	20 81       	ld	r18, Z
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	13 96       	adiw	r26, 0x03	; 3
 6e0:	0c 90       	ld	r0, X
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <GPIO_PIN_Read_Logic+0x32>
 6e4:	f5 95       	asr	r31
 6e6:	e7 95       	ror	r30
 6e8:	0a 94       	dec	r0
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <GPIO_PIN_Read_Logic+0x2e>
 6ec:	cf 01       	movw	r24, r30
 6ee:	81 70       	andi	r24, 0x01	; 1
 6f0:	db 01       	movw	r26, r22
 6f2:	8c 93       	st	X, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	08 95       	ret
	if(NULL == _pin || NULL == _logic){
		Ret = RET_NOT_OK ;
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	08 95       	ret
 6fc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 6fe:	08 95       	ret

00000700 <GPIO_PIN_Give_Direction>:

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 700:	00 97       	sbiw	r24, 0x00	; 0
 702:	e9 f1       	breq	.+122    	; 0x77e <GPIO_PIN_Give_Direction+0x7e>
		Ret = RET_NOT_OK ;
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
 704:	61 30       	cpi	r22, 0x01	; 1
 706:	e1 f4       	brne	.+56     	; 0x740 <GPIO_PIN_Give_Direction+0x40>
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
 708:	dc 01       	movw	r26, r24
 70a:	12 96       	adiw	r26, 0x02	; 2
 70c:	ec 91       	ld	r30, X
 70e:	12 97       	sbiw	r26, 0x02	; 2
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	ee 55       	subi	r30, 0x5E	; 94
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	01 90       	ld	r0, Z+
 71c:	f0 81       	ld	r31, Z
 71e:	e0 2d       	mov	r30, r0
 720:	40 81       	ld	r20, Z
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	b9 01       	movw	r22, r18
 728:	13 96       	adiw	r26, 0x03	; 3
 72a:	0c 90       	ld	r0, X
 72c:	02 c0       	rjmp	.+4      	; 0x732 <GPIO_PIN_Give_Direction+0x32>
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	0a 94       	dec	r0
 734:	e2 f7       	brpl	.-8      	; 0x72e <GPIO_PIN_Give_Direction+0x2e>
 736:	cb 01       	movw	r24, r22
 738:	84 2b       	or	r24, r20
 73a:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
		}
		else if (GPIO_PIN_INPUT  ==  _direction){
 740:	61 11       	cpse	r22, r1
 742:	1f c0       	rjmp	.+62     	; 0x782 <GPIO_PIN_Give_Direction+0x82>
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
 744:	dc 01       	movw	r26, r24
 746:	12 96       	adiw	r26, 0x02	; 2
 748:	ec 91       	ld	r30, X
 74a:	12 97       	sbiw	r26, 0x02	; 2
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	ee 55       	subi	r30, 0x5E	; 94
 754:	ff 4f       	sbci	r31, 0xFF	; 255
 756:	01 90       	ld	r0, Z+
 758:	f0 81       	ld	r31, Z
 75a:	e0 2d       	mov	r30, r0
 75c:	40 81       	ld	r20, Z
 75e:	21 e0       	ldi	r18, 0x01	; 1
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	b9 01       	movw	r22, r18
 764:	13 96       	adiw	r26, 0x03	; 3
 766:	0c 90       	ld	r0, X
 768:	02 c0       	rjmp	.+4      	; 0x76e <GPIO_PIN_Give_Direction+0x6e>
 76a:	66 0f       	add	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	0a 94       	dec	r0
 770:	e2 f7       	brpl	.-8      	; 0x76a <GPIO_PIN_Give_Direction+0x6a>
 772:	cb 01       	movw	r24, r22
 774:	80 95       	com	r24
 776:	84 23       	and	r24, r20
 778:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	08 95       	ret
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 782:	81 e0       	ldi	r24, 0x01	; 1
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
		}
		else {/*nothing*/}
	}
	return Ret ;
}
 784:	08 95       	ret

00000786 <GPIO_PIN_Initialize>:
#include "GPIO.h"
volatile uint8 *PORT_REG[] = { &PORTB, &PORTC, &PORTD };
volatile uint8 *DDR_REG[] = { &DDRB, &DDRC, &DDRD };
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 78a:	00 97       	sbiw	r24, 0x00	; 0
 78c:	39 f0       	breq	.+14     	; 0x79c <GPIO_PIN_Initialize+0x16>
 78e:	ec 01       	movw	r28, r24
		Ret = RET_NOT_OK ;
	}
	else{
		/*Direction Initialization */
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
 790:	69 81       	ldd	r22, Y+1	; 0x01
 792:	b6 df       	rcall	.-148    	; 0x700 <GPIO_PIN_Give_Direction>
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
 794:	68 81       	ld	r22, Y
 796:	ce 01       	movw	r24, r28
 798:	4b df       	rcall	.-362    	; 0x630 <GPIO_PIN_Write_logic>
 79a:	01 c0       	rjmp	.+2      	; 0x79e <GPIO_PIN_Initialize+0x18>
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 79c:	80 e0       	ldi	r24, 0x00	; 0
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
	}
	return Ret ;
}
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	08 95       	ret

000007a4 <INT0_Init>:
		else{
			/*nothing*/
		}
	}
	return status ;
}
 7a4:	fc 01       	movw	r30, r24
 7a6:	9b b7       	in	r25, 0x3b	; 59
 7a8:	9f 7b       	andi	r25, 0xBF	; 191
 7aa:	9b bf       	out	0x3b, r25	; 59
 7ac:	91 b3       	in	r25, 0x11	; 17
 7ae:	9b 7f       	andi	r25, 0xFB	; 251
 7b0:	91 bb       	out	0x11, r25	; 17
 7b2:	95 b7       	in	r25, 0x35	; 53
 7b4:	23 81       	ldd	r18, Z+3	; 0x03
 7b6:	9c 7f       	andi	r25, 0xFC	; 252
 7b8:	92 2b       	or	r25, r18
 7ba:	95 bf       	out	0x35, r25	; 53
 7bc:	80 81       	ld	r24, Z
 7be:	91 81       	ldd	r25, Z+1	; 0x01
 7c0:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <INT0_InterruptHandler+0x1>
 7c4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <INT0_InterruptHandler>
 7c8:	8b b7       	in	r24, 0x3b	; 59
 7ca:	80 64       	ori	r24, 0x40	; 64
 7cc:	8b bf       	out	0x3b, r24	; 59
 7ce:	08 95       	ret

000007d0 <INT1_Init>:
 7d0:	fc 01       	movw	r30, r24
 7d2:	9b b7       	in	r25, 0x3b	; 59
 7d4:	9f 77       	andi	r25, 0x7F	; 127
 7d6:	9b bf       	out	0x3b, r25	; 59
 7d8:	91 b3       	in	r25, 0x11	; 17
 7da:	97 7f       	andi	r25, 0xF7	; 247
 7dc:	91 bb       	out	0x11, r25	; 17
 7de:	45 b7       	in	r20, 0x35	; 53
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	29 2f       	mov	r18, r25
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	22 0f       	add	r18, r18
 7e8:	33 1f       	adc	r19, r19
 7ea:	22 0f       	add	r18, r18
 7ec:	33 1f       	adc	r19, r19
 7ee:	94 2f       	mov	r25, r20
 7f0:	93 7f       	andi	r25, 0xF3	; 243
 7f2:	29 2b       	or	r18, r25
 7f4:	25 bf       	out	0x35, r18	; 53
 7f6:	80 81       	ld	r24, Z
 7f8:	91 81       	ldd	r25, Z+1	; 0x01
 7fa:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <INT1_InterruptHandler+0x1>
 7fe:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <INT1_InterruptHandler>
 802:	8b b7       	in	r24, 0x3b	; 59
 804:	80 68       	ori	r24, 0x80	; 128
 806:	8b bf       	out	0x3b, r24	; 59
 808:	08 95       	ret

0000080a <INTx_Initialize>:
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	61 f0       	breq	.+24     	; 0x826 <INTx_Initialize+0x1c>
 80e:	fc 01       	movw	r30, r24
 810:	22 81       	ldd	r18, Z+2	; 0x02
 812:	21 11       	cpse	r18, r1
 814:	02 c0       	rjmp	.+4      	; 0x81a <INTx_Initialize+0x10>
 816:	c6 df       	rcall	.-116    	; 0x7a4 <INT0_Init>
 818:	03 c0       	rjmp	.+6      	; 0x820 <INTx_Initialize+0x16>
 81a:	21 30       	cpi	r18, 0x01	; 1
 81c:	09 f4       	brne	.+2      	; 0x820 <INTx_Initialize+0x16>
 81e:	d8 df       	rcall	.-80     	; 0x7d0 <INT1_Init>
 820:	78 94       	sei
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	08 95       	ret
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	08 95       	ret

0000082a <__vector_1>:
	INT1_INTERRUPT_DISABLE();
}


/*-------------------------------------ISR Function-----------------------------------------*/
ISR(INT0_vect){
 82a:	1f 92       	push	r1
 82c:	0f 92       	push	r0
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	0f 92       	push	r0
 832:	11 24       	eor	r1, r1
 834:	2f 93       	push	r18
 836:	3f 93       	push	r19
 838:	4f 93       	push	r20
 83a:	5f 93       	push	r21
 83c:	6f 93       	push	r22
 83e:	7f 93       	push	r23
 840:	8f 93       	push	r24
 842:	9f 93       	push	r25
 844:	af 93       	push	r26
 846:	bf 93       	push	r27
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
	INT0_CLEAR_FLAG();
 84c:	8a b7       	in	r24, 0x3a	; 58
 84e:	8f 7b       	andi	r24, 0xBF	; 191
 850:	8a bf       	out	0x3a, r24	; 58
	
	if(INT0_InterruptHandler){
 852:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <INT0_InterruptHandler>
 856:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <INT0_InterruptHandler+0x1>
 85a:	30 97       	sbiw	r30, 0x00	; 0
 85c:	09 f0       	breq	.+2      	; 0x860 <__vector_1+0x36>
		INT0_InterruptHandler();
 85e:	09 95       	icall
	}
}
 860:	ff 91       	pop	r31
 862:	ef 91       	pop	r30
 864:	bf 91       	pop	r27
 866:	af 91       	pop	r26
 868:	9f 91       	pop	r25
 86a:	8f 91       	pop	r24
 86c:	7f 91       	pop	r23
 86e:	6f 91       	pop	r22
 870:	5f 91       	pop	r21
 872:	4f 91       	pop	r20
 874:	3f 91       	pop	r19
 876:	2f 91       	pop	r18
 878:	0f 90       	pop	r0
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	0f 90       	pop	r0
 87e:	1f 90       	pop	r1
 880:	18 95       	reti

00000882 <__vector_2>:

ISR(INT1_vect){
 882:	1f 92       	push	r1
 884:	0f 92       	push	r0
 886:	0f b6       	in	r0, 0x3f	; 63
 888:	0f 92       	push	r0
 88a:	11 24       	eor	r1, r1
 88c:	2f 93       	push	r18
 88e:	3f 93       	push	r19
 890:	4f 93       	push	r20
 892:	5f 93       	push	r21
 894:	6f 93       	push	r22
 896:	7f 93       	push	r23
 898:	8f 93       	push	r24
 89a:	9f 93       	push	r25
 89c:	af 93       	push	r26
 89e:	bf 93       	push	r27
 8a0:	ef 93       	push	r30
 8a2:	ff 93       	push	r31
	INT1_CLEAR_FLAG();
 8a4:	8a b7       	in	r24, 0x3a	; 58
 8a6:	8f 77       	andi	r24, 0x7F	; 127
 8a8:	8a bf       	out	0x3a, r24	; 58
	
	if(INT1_InterruptHandler){
 8aa:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <INT1_InterruptHandler>
 8ae:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <INT1_InterruptHandler+0x1>
 8b2:	30 97       	sbiw	r30, 0x00	; 0
 8b4:	09 f0       	breq	.+2      	; 0x8b8 <__vector_2+0x36>
		INT1_InterruptHandler();
 8b6:	09 95       	icall
	}
}
 8b8:	ff 91       	pop	r31
 8ba:	ef 91       	pop	r30
 8bc:	bf 91       	pop	r27
 8be:	af 91       	pop	r26
 8c0:	9f 91       	pop	r25
 8c2:	8f 91       	pop	r24
 8c4:	7f 91       	pop	r23
 8c6:	6f 91       	pop	r22
 8c8:	5f 91       	pop	r21
 8ca:	4f 91       	pop	r20
 8cc:	3f 91       	pop	r19
 8ce:	2f 91       	pop	r18
 8d0:	0f 90       	pop	r0
 8d2:	0f be       	out	0x3f, r0	; 63
 8d4:	0f 90       	pop	r0
 8d6:	1f 90       	pop	r1
 8d8:	18 95       	reti

000008da <PWM_Init>:
 *  Author: mo ali
 */ 

#include "PWM_Timer1.h"

STD_ReturnType PWM_Init(const PWM_CONFIG *pwm_obj){
 8da:	fc 01       	movw	r30, r24
	STD_ReturnType status = RET_OK;
	if (NULL == pwm_obj){
 8dc:	89 2b       	or	r24, r25
 8de:	09 f1       	breq	.+66     	; 0x922 <PWM_Init+0x48>
		status = RET_NOT_OK;
	}
	else {
		// configure OC1A and OC1B as output pins
		SET_BIN(DDRB , BIT1); // OC1A
 8e0:	97 b3       	in	r25, 0x17	; 23
 8e2:	92 60       	ori	r25, 0x02	; 2
 8e4:	97 bb       	out	0x17, r25	; 23
		SET_BIN(DDRB , BIT2); // OC1B
 8e6:	97 b3       	in	r25, 0x17	; 23
 8e8:	94 60       	ori	r25, 0x04	; 4
 8ea:	97 bb       	out	0x17, r25	; 23
		
		// select fast PWM mode
		TCCR1B = (1 << WGM12);
 8ec:	88 e0       	ldi	r24, 0x08	; 8
 8ee:	8e bd       	out	0x2e, r24	; 46
		TCCR1A = (1 << WGM11)  | (1 << WGM10);
 8f0:	83 e0       	ldi	r24, 0x03	; 3
 8f2:	8f bd       	out	0x2f, r24	; 47
		
		PWM_SELECT_PWM_PIN_OC1A(0x02);
 8f4:	9f b5       	in	r25, 0x2f	; 47
 8f6:	9f 73       	andi	r25, 0x3F	; 63
 8f8:	90 68       	ori	r25, 0x80	; 128
 8fa:	9f bd       	out	0x2f, r25	; 47
		PWM_SELECT_PWM_PIN_OC1B(0x02);
 8fc:	9f b5       	in	r25, 0x2f	; 47
 8fe:	9f 7c       	andi	r25, 0xCF	; 207
 900:	90 62       	ori	r25, 0x20	; 32
 902:	9f bd       	out	0x2f, r25	; 47
		
		// select clock source 
		PWM_SELECT_CLOCK(pwm_obj->sel_clk);
 904:	8e b5       	in	r24, 0x2e	; 46
 906:	91 81       	ldd	r25, Z+1	; 0x01
 908:	87 7f       	andi	r24, 0xF7	; 247
 90a:	89 2b       	or	r24, r25
 90c:	8e bd       	out	0x2e, r24	; 46
		
		// Initialze duty cycle 
		PWM_SET_DUTY_CYCLE_OCR1A(1500);
 90e:	8c ed       	ldi	r24, 0xDC	; 220
 910:	95 e0       	ldi	r25, 0x05	; 5
 912:	9b bd       	out	0x2b, r25	; 43
 914:	8a bd       	out	0x2a, r24	; 42
		PWM_SET_DUTY_CYCLE_OCR1B(1000);
 916:	88 ee       	ldi	r24, 0xE8	; 232
 918:	93 e0       	ldi	r25, 0x03	; 3
 91a:	99 bd       	out	0x29, r25	; 41
 91c:	88 bd       	out	0x28, r24	; 40
 */ 

#include "PWM_Timer1.h"

STD_ReturnType PWM_Init(const PWM_CONFIG *pwm_obj){
	STD_ReturnType status = RET_OK;
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	08 95       	ret
	if (NULL == pwm_obj){
		status = RET_NOT_OK;
 922:	80 e0       	ldi	r24, 0x00	; 0
		// Initialze duty cycle 
		PWM_SET_DUTY_CYCLE_OCR1A(1500);
		PWM_SET_DUTY_CYCLE_OCR1B(1000);
	}
	return status ;
}
 924:	08 95       	ret

00000926 <PWM_Write>:

void PWM_Write(uint16 dutyCycle,PWM_PIN _pin){
	if(_pin == PWM_PIN_OC1A){
 926:	61 11       	cpse	r22, r1
 928:	03 c0       	rjmp	.+6      	; 0x930 <PWM_Write+0xa>
		PWM_SET_DUTY_CYCLE_OCR1A(dutyCycle);
 92a:	9b bd       	out	0x2b, r25	; 43
 92c:	8a bd       	out	0x2a, r24	; 42
 92e:	08 95       	ret
	}
	else if(_pin == PWM_PIN_OC1B){
 930:	61 30       	cpi	r22, 0x01	; 1
 932:	11 f4       	brne	.+4      	; 0x938 <PWM_Write+0x12>
		PWM_SET_DUTY_CYCLE_OCR1B(dutyCycle);
 934:	99 bd       	out	0x29, r25	; 41
 936:	88 bd       	out	0x28, r24	; 40
 938:	08 95       	ret

0000093a <PWM_init_Timer2>:
#include "PWM_Timer2.h"

void PWM_init_Timer2(void)
{
	// Set PB3 (OC2) as output
	DDRB |= (1 << PB3);
 93a:	87 b3       	in	r24, 0x17	; 23
 93c:	88 60       	ori	r24, 0x08	; 8
 93e:	87 bb       	out	0x17, r24	; 23

	TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
 940:	8c e6       	ldi	r24, 0x6C	; 108
 942:	85 bd       	out	0x25, r24	; 37

	// Initialize with a neutral position for the servo (~1.5ms pulse)
	OCR2 = 125;  // This gives approximately a 1.5ms pulse width (servo's neutral position)
 944:	8d e7       	ldi	r24, 0x7D	; 125
 946:	83 bd       	out	0x23, r24	; 35
 948:	08 95       	ret

0000094a <set_servo_angle>:
}

// Function to set the servo angle
void set_servo_angle(uint8 angle)
{
	uint8 duty_cycle = (125 + (angle * 125) / 180);
 94a:	2d e7       	ldi	r18, 0x7D	; 125
 94c:	82 9f       	mul	r24, r18
 94e:	c0 01       	movw	r24, r0
 950:	11 24       	eor	r1, r1
 952:	64 eb       	ldi	r22, 0xB4	; 180
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	86 d2       	rcall	.+1292   	; 0xe64 <__divmodhi4>
 958:	63 58       	subi	r22, 0x83	; 131
	
	OCR2 = duty_cycle;
 95a:	63 bd       	out	0x23, r22	; 35
 95c:	08 95       	ret

0000095e <USART_Init>:
	// Wait for data to be received (RXC flag set)
	while (!(UCSRA & (1 << RXC)));

	// Get and return received data from buffer
	return UDR;
}
 95e:	10 bc       	out	0x20, r1	; 32
 960:	23 e3       	ldi	r18, 0x33	; 51
 962:	29 b9       	out	0x09, r18	; 9
 964:	28 e9       	ldi	r18, 0x98	; 152
 966:	2a b9       	out	0x0a, r18	; 10
 968:	26 e8       	ldi	r18, 0x86	; 134
 96a:	20 bd       	out	0x20, r18	; 32
 96c:	fc 01       	movw	r30, r24
 96e:	20 81       	ld	r18, Z
 970:	31 81       	ldd	r19, Z+1	; 0x01
 972:	30 93 df 01 	sts	0x01DF, r19	; 0x8001df <interruptHandler+0x1>
 976:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <interruptHandler>
 97a:	82 81       	ldd	r24, Z+2	; 0x02
 97c:	93 81       	ldd	r25, Z+3	; 0x03
 97e:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <flag+0x1>
 982:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <flag>
 986:	78 94       	sei
 988:	08 95       	ret

0000098a <USART_Trans>:
 98a:	5d 9b       	sbis	0x0b, 5	; 11
 98c:	fe cf       	rjmp	.-4      	; 0x98a <USART_Trans>
 98e:	8c b9       	out	0x0c, r24	; 12
 990:	08 95       	ret

00000992 <USART_SendStr>:
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	ec 01       	movw	r28, r24
 998:	02 c0       	rjmp	.+4      	; 0x99e <USART_SendStr+0xc>
 99a:	21 96       	adiw	r28, 0x01	; 1
 99c:	f6 df       	rcall	.-20     	; 0x98a <USART_Trans>
 99e:	88 81       	ld	r24, Y
 9a0:	81 11       	cpse	r24, r1
 9a2:	fb cf       	rjmp	.-10     	; 0x99a <USART_SendStr+0x8>
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <__vector_11>:

ISR(USART_RXC_vect){
 9aa:	1f 92       	push	r1
 9ac:	0f 92       	push	r0
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	0f 92       	push	r0
 9b2:	11 24       	eor	r1, r1
 9b4:	8f 93       	push	r24
 9b6:	ef 93       	push	r30
 9b8:	ff 93       	push	r31
	uint8 receive = UDR ;
 9ba:	8c b1       	in	r24, 0x0c	; 12
	if (receive == '0'){
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	31 f4       	brne	.+12     	; 0x9cc <__vector_11+0x22>
		*flag = No_one;
 9c0:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <flag>
 9c4:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <flag+0x1>
 9c8:	10 82       	st	Z, r1
 9ca:	11 c0       	rjmp	.+34     	; 0x9ee <__vector_11+0x44>
	}
	else if(receive == '1') {
 9cc:	81 33       	cpi	r24, 0x31	; 49
 9ce:	39 f4       	brne	.+14     	; 0x9de <__vector_11+0x34>
		*flag = Face_Detected ;
 9d0:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <flag>
 9d4:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <flag+0x1>
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	80 83       	st	Z, r24
 9dc:	08 c0       	rjmp	.+16     	; 0x9ee <__vector_11+0x44>
	}
	else if (receive == '2' ){
 9de:	82 33       	cpi	r24, 0x32	; 50
 9e0:	31 f4       	brne	.+12     	; 0x9ee <__vector_11+0x44>
		*flag = Face_Not_Detected ;
 9e2:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <flag>
 9e6:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <flag+0x1>
 9ea:	82 e0       	ldi	r24, 0x02	; 2
 9ec:	80 83       	st	Z, r24
	}
 9ee:	ff 91       	pop	r31
 9f0:	ef 91       	pop	r30
 9f2:	8f 91       	pop	r24
 9f4:	0f 90       	pop	r0
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	0f 90       	pop	r0
 9fa:	1f 90       	pop	r1
 9fc:	18 95       	reti

000009fe <__subsf3>:
 9fe:	50 58       	subi	r21, 0x80	; 128

00000a00 <__addsf3>:
 a00:	bb 27       	eor	r27, r27
 a02:	aa 27       	eor	r26, r26
 a04:	0e d0       	rcall	.+28     	; 0xa22 <__addsf3x>
 a06:	48 c1       	rjmp	.+656    	; 0xc98 <__fp_round>
 a08:	39 d1       	rcall	.+626    	; 0xc7c <__fp_pscA>
 a0a:	30 f0       	brcs	.+12     	; 0xa18 <__addsf3+0x18>
 a0c:	3e d1       	rcall	.+636    	; 0xc8a <__fp_pscB>
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__addsf3+0x18>
 a10:	31 f4       	brne	.+12     	; 0xa1e <__addsf3+0x1e>
 a12:	9f 3f       	cpi	r25, 0xFF	; 255
 a14:	11 f4       	brne	.+4      	; 0xa1a <__addsf3+0x1a>
 a16:	1e f4       	brtc	.+6      	; 0xa1e <__addsf3+0x1e>
 a18:	2e c1       	rjmp	.+604    	; 0xc76 <__fp_nan>
 a1a:	0e f4       	brtc	.+2      	; 0xa1e <__addsf3+0x1e>
 a1c:	e0 95       	com	r30
 a1e:	e7 fb       	bst	r30, 7
 a20:	24 c1       	rjmp	.+584    	; 0xc6a <__fp_inf>

00000a22 <__addsf3x>:
 a22:	e9 2f       	mov	r30, r25
 a24:	4a d1       	rcall	.+660    	; 0xcba <__fp_split3>
 a26:	80 f3       	brcs	.-32     	; 0xa08 <__addsf3+0x8>
 a28:	ba 17       	cp	r27, r26
 a2a:	62 07       	cpc	r22, r18
 a2c:	73 07       	cpc	r23, r19
 a2e:	84 07       	cpc	r24, r20
 a30:	95 07       	cpc	r25, r21
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__addsf3x+0x18>
 a34:	71 f4       	brne	.+28     	; 0xa52 <__addsf3x+0x30>
 a36:	9e f5       	brtc	.+102    	; 0xa9e <__addsf3x+0x7c>
 a38:	62 c1       	rjmp	.+708    	; 0xcfe <__fp_zero>
 a3a:	0e f4       	brtc	.+2      	; 0xa3e <__addsf3x+0x1c>
 a3c:	e0 95       	com	r30
 a3e:	0b 2e       	mov	r0, r27
 a40:	ba 2f       	mov	r27, r26
 a42:	a0 2d       	mov	r26, r0
 a44:	0b 01       	movw	r0, r22
 a46:	b9 01       	movw	r22, r18
 a48:	90 01       	movw	r18, r0
 a4a:	0c 01       	movw	r0, r24
 a4c:	ca 01       	movw	r24, r20
 a4e:	a0 01       	movw	r20, r0
 a50:	11 24       	eor	r1, r1
 a52:	ff 27       	eor	r31, r31
 a54:	59 1b       	sub	r21, r25
 a56:	99 f0       	breq	.+38     	; 0xa7e <__addsf3x+0x5c>
 a58:	59 3f       	cpi	r21, 0xF9	; 249
 a5a:	50 f4       	brcc	.+20     	; 0xa70 <__addsf3x+0x4e>
 a5c:	50 3e       	cpi	r21, 0xE0	; 224
 a5e:	68 f1       	brcs	.+90     	; 0xaba <__addsf3x+0x98>
 a60:	1a 16       	cp	r1, r26
 a62:	f0 40       	sbci	r31, 0x00	; 0
 a64:	a2 2f       	mov	r26, r18
 a66:	23 2f       	mov	r18, r19
 a68:	34 2f       	mov	r19, r20
 a6a:	44 27       	eor	r20, r20
 a6c:	58 5f       	subi	r21, 0xF8	; 248
 a6e:	f3 cf       	rjmp	.-26     	; 0xa56 <__addsf3x+0x34>
 a70:	46 95       	lsr	r20
 a72:	37 95       	ror	r19
 a74:	27 95       	ror	r18
 a76:	a7 95       	ror	r26
 a78:	f0 40       	sbci	r31, 0x00	; 0
 a7a:	53 95       	inc	r21
 a7c:	c9 f7       	brne	.-14     	; 0xa70 <__addsf3x+0x4e>
 a7e:	7e f4       	brtc	.+30     	; 0xa9e <__addsf3x+0x7c>
 a80:	1f 16       	cp	r1, r31
 a82:	ba 0b       	sbc	r27, r26
 a84:	62 0b       	sbc	r22, r18
 a86:	73 0b       	sbc	r23, r19
 a88:	84 0b       	sbc	r24, r20
 a8a:	ba f0       	brmi	.+46     	; 0xaba <__addsf3x+0x98>
 a8c:	91 50       	subi	r25, 0x01	; 1
 a8e:	a1 f0       	breq	.+40     	; 0xab8 <__addsf3x+0x96>
 a90:	ff 0f       	add	r31, r31
 a92:	bb 1f       	adc	r27, r27
 a94:	66 1f       	adc	r22, r22
 a96:	77 1f       	adc	r23, r23
 a98:	88 1f       	adc	r24, r24
 a9a:	c2 f7       	brpl	.-16     	; 0xa8c <__addsf3x+0x6a>
 a9c:	0e c0       	rjmp	.+28     	; 0xaba <__addsf3x+0x98>
 a9e:	ba 0f       	add	r27, r26
 aa0:	62 1f       	adc	r22, r18
 aa2:	73 1f       	adc	r23, r19
 aa4:	84 1f       	adc	r24, r20
 aa6:	48 f4       	brcc	.+18     	; 0xaba <__addsf3x+0x98>
 aa8:	87 95       	ror	r24
 aaa:	77 95       	ror	r23
 aac:	67 95       	ror	r22
 aae:	b7 95       	ror	r27
 ab0:	f7 95       	ror	r31
 ab2:	9e 3f       	cpi	r25, 0xFE	; 254
 ab4:	08 f0       	brcs	.+2      	; 0xab8 <__addsf3x+0x96>
 ab6:	b3 cf       	rjmp	.-154    	; 0xa1e <__addsf3+0x1e>
 ab8:	93 95       	inc	r25
 aba:	88 0f       	add	r24, r24
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__addsf3x+0x9e>
 abe:	99 27       	eor	r25, r25
 ac0:	ee 0f       	add	r30, r30
 ac2:	97 95       	ror	r25
 ac4:	87 95       	ror	r24
 ac6:	08 95       	ret

00000ac8 <__divsf3>:
 ac8:	0c d0       	rcall	.+24     	; 0xae2 <__divsf3x>
 aca:	e6 c0       	rjmp	.+460    	; 0xc98 <__fp_round>
 acc:	de d0       	rcall	.+444    	; 0xc8a <__fp_pscB>
 ace:	40 f0       	brcs	.+16     	; 0xae0 <__divsf3+0x18>
 ad0:	d5 d0       	rcall	.+426    	; 0xc7c <__fp_pscA>
 ad2:	30 f0       	brcs	.+12     	; 0xae0 <__divsf3+0x18>
 ad4:	21 f4       	brne	.+8      	; 0xade <__divsf3+0x16>
 ad6:	5f 3f       	cpi	r21, 0xFF	; 255
 ad8:	19 f0       	breq	.+6      	; 0xae0 <__divsf3+0x18>
 ada:	c7 c0       	rjmp	.+398    	; 0xc6a <__fp_inf>
 adc:	51 11       	cpse	r21, r1
 ade:	10 c1       	rjmp	.+544    	; 0xd00 <__fp_szero>
 ae0:	ca c0       	rjmp	.+404    	; 0xc76 <__fp_nan>

00000ae2 <__divsf3x>:
 ae2:	eb d0       	rcall	.+470    	; 0xcba <__fp_split3>
 ae4:	98 f3       	brcs	.-26     	; 0xacc <__divsf3+0x4>

00000ae6 <__divsf3_pse>:
 ae6:	99 23       	and	r25, r25
 ae8:	c9 f3       	breq	.-14     	; 0xadc <__divsf3+0x14>
 aea:	55 23       	and	r21, r21
 aec:	b1 f3       	breq	.-20     	; 0xada <__divsf3+0x12>
 aee:	95 1b       	sub	r25, r21
 af0:	55 0b       	sbc	r21, r21
 af2:	bb 27       	eor	r27, r27
 af4:	aa 27       	eor	r26, r26
 af6:	62 17       	cp	r22, r18
 af8:	73 07       	cpc	r23, r19
 afa:	84 07       	cpc	r24, r20
 afc:	38 f0       	brcs	.+14     	; 0xb0c <__divsf3_pse+0x26>
 afe:	9f 5f       	subi	r25, 0xFF	; 255
 b00:	5f 4f       	sbci	r21, 0xFF	; 255
 b02:	22 0f       	add	r18, r18
 b04:	33 1f       	adc	r19, r19
 b06:	44 1f       	adc	r20, r20
 b08:	aa 1f       	adc	r26, r26
 b0a:	a9 f3       	breq	.-22     	; 0xaf6 <__divsf3_pse+0x10>
 b0c:	33 d0       	rcall	.+102    	; 0xb74 <__divsf3_pse+0x8e>
 b0e:	0e 2e       	mov	r0, r30
 b10:	3a f0       	brmi	.+14     	; 0xb20 <__divsf3_pse+0x3a>
 b12:	e0 e8       	ldi	r30, 0x80	; 128
 b14:	30 d0       	rcall	.+96     	; 0xb76 <__divsf3_pse+0x90>
 b16:	91 50       	subi	r25, 0x01	; 1
 b18:	50 40       	sbci	r21, 0x00	; 0
 b1a:	e6 95       	lsr	r30
 b1c:	00 1c       	adc	r0, r0
 b1e:	ca f7       	brpl	.-14     	; 0xb12 <__divsf3_pse+0x2c>
 b20:	29 d0       	rcall	.+82     	; 0xb74 <__divsf3_pse+0x8e>
 b22:	fe 2f       	mov	r31, r30
 b24:	27 d0       	rcall	.+78     	; 0xb74 <__divsf3_pse+0x8e>
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	bb 1f       	adc	r27, r27
 b2e:	26 17       	cp	r18, r22
 b30:	37 07       	cpc	r19, r23
 b32:	48 07       	cpc	r20, r24
 b34:	ab 07       	cpc	r26, r27
 b36:	b0 e8       	ldi	r27, 0x80	; 128
 b38:	09 f0       	breq	.+2      	; 0xb3c <__divsf3_pse+0x56>
 b3a:	bb 0b       	sbc	r27, r27
 b3c:	80 2d       	mov	r24, r0
 b3e:	bf 01       	movw	r22, r30
 b40:	ff 27       	eor	r31, r31
 b42:	93 58       	subi	r25, 0x83	; 131
 b44:	5f 4f       	sbci	r21, 0xFF	; 255
 b46:	2a f0       	brmi	.+10     	; 0xb52 <__divsf3_pse+0x6c>
 b48:	9e 3f       	cpi	r25, 0xFE	; 254
 b4a:	51 05       	cpc	r21, r1
 b4c:	68 f0       	brcs	.+26     	; 0xb68 <__divsf3_pse+0x82>
 b4e:	8d c0       	rjmp	.+282    	; 0xc6a <__fp_inf>
 b50:	d7 c0       	rjmp	.+430    	; 0xd00 <__fp_szero>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	ec f3       	brlt	.-6      	; 0xb50 <__divsf3_pse+0x6a>
 b56:	98 3e       	cpi	r25, 0xE8	; 232
 b58:	dc f3       	brlt	.-10     	; 0xb50 <__divsf3_pse+0x6a>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	9f 5f       	subi	r25, 0xFF	; 255
 b66:	c9 f7       	brne	.-14     	; 0xb5a <__divsf3_pse+0x74>
 b68:	88 0f       	add	r24, r24
 b6a:	91 1d       	adc	r25, r1
 b6c:	96 95       	lsr	r25
 b6e:	87 95       	ror	r24
 b70:	97 f9       	bld	r25, 7
 b72:	08 95       	ret
 b74:	e1 e0       	ldi	r30, 0x01	; 1
 b76:	66 0f       	add	r22, r22
 b78:	77 1f       	adc	r23, r23
 b7a:	88 1f       	adc	r24, r24
 b7c:	bb 1f       	adc	r27, r27
 b7e:	62 17       	cp	r22, r18
 b80:	73 07       	cpc	r23, r19
 b82:	84 07       	cpc	r24, r20
 b84:	ba 07       	cpc	r27, r26
 b86:	20 f0       	brcs	.+8      	; 0xb90 <__divsf3_pse+0xaa>
 b88:	62 1b       	sub	r22, r18
 b8a:	73 0b       	sbc	r23, r19
 b8c:	84 0b       	sbc	r24, r20
 b8e:	ba 0b       	sbc	r27, r26
 b90:	ee 1f       	adc	r30, r30
 b92:	88 f7       	brcc	.-30     	; 0xb76 <__divsf3_pse+0x90>
 b94:	e0 95       	com	r30
 b96:	08 95       	ret

00000b98 <__fixunssfsi>:
 b98:	98 d0       	rcall	.+304    	; 0xcca <__fp_splitA>
 b9a:	88 f0       	brcs	.+34     	; 0xbbe <__fixunssfsi+0x26>
 b9c:	9f 57       	subi	r25, 0x7F	; 127
 b9e:	90 f0       	brcs	.+36     	; 0xbc4 <__fixunssfsi+0x2c>
 ba0:	b9 2f       	mov	r27, r25
 ba2:	99 27       	eor	r25, r25
 ba4:	b7 51       	subi	r27, 0x17	; 23
 ba6:	a0 f0       	brcs	.+40     	; 0xbd0 <__fixunssfsi+0x38>
 ba8:	d1 f0       	breq	.+52     	; 0xbde <__fixunssfsi+0x46>
 baa:	66 0f       	add	r22, r22
 bac:	77 1f       	adc	r23, r23
 bae:	88 1f       	adc	r24, r24
 bb0:	99 1f       	adc	r25, r25
 bb2:	1a f0       	brmi	.+6      	; 0xbba <__fixunssfsi+0x22>
 bb4:	ba 95       	dec	r27
 bb6:	c9 f7       	brne	.-14     	; 0xbaa <__fixunssfsi+0x12>
 bb8:	12 c0       	rjmp	.+36     	; 0xbde <__fixunssfsi+0x46>
 bba:	b1 30       	cpi	r27, 0x01	; 1
 bbc:	81 f0       	breq	.+32     	; 0xbde <__fixunssfsi+0x46>
 bbe:	9f d0       	rcall	.+318    	; 0xcfe <__fp_zero>
 bc0:	b1 e0       	ldi	r27, 0x01	; 1
 bc2:	08 95       	ret
 bc4:	9c c0       	rjmp	.+312    	; 0xcfe <__fp_zero>
 bc6:	67 2f       	mov	r22, r23
 bc8:	78 2f       	mov	r23, r24
 bca:	88 27       	eor	r24, r24
 bcc:	b8 5f       	subi	r27, 0xF8	; 248
 bce:	39 f0       	breq	.+14     	; 0xbde <__fixunssfsi+0x46>
 bd0:	b9 3f       	cpi	r27, 0xF9	; 249
 bd2:	cc f3       	brlt	.-14     	; 0xbc6 <__fixunssfsi+0x2e>
 bd4:	86 95       	lsr	r24
 bd6:	77 95       	ror	r23
 bd8:	67 95       	ror	r22
 bda:	b3 95       	inc	r27
 bdc:	d9 f7       	brne	.-10     	; 0xbd4 <__fixunssfsi+0x3c>
 bde:	3e f4       	brtc	.+14     	; 0xbee <__fixunssfsi+0x56>
 be0:	90 95       	com	r25
 be2:	80 95       	com	r24
 be4:	70 95       	com	r23
 be6:	61 95       	neg	r22
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	08 95       	ret

00000bf0 <__floatunsisf>:
 bf0:	e8 94       	clt
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <__floatsisf+0x12>

00000bf4 <__floatsisf>:
 bf4:	97 fb       	bst	r25, 7
 bf6:	3e f4       	brtc	.+14     	; 0xc06 <__floatsisf+0x12>
 bf8:	90 95       	com	r25
 bfa:	80 95       	com	r24
 bfc:	70 95       	com	r23
 bfe:	61 95       	neg	r22
 c00:	7f 4f       	sbci	r23, 0xFF	; 255
 c02:	8f 4f       	sbci	r24, 0xFF	; 255
 c04:	9f 4f       	sbci	r25, 0xFF	; 255
 c06:	99 23       	and	r25, r25
 c08:	a9 f0       	breq	.+42     	; 0xc34 <__floatsisf+0x40>
 c0a:	f9 2f       	mov	r31, r25
 c0c:	96 e9       	ldi	r25, 0x96	; 150
 c0e:	bb 27       	eor	r27, r27
 c10:	93 95       	inc	r25
 c12:	f6 95       	lsr	r31
 c14:	87 95       	ror	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b7 95       	ror	r27
 c1c:	f1 11       	cpse	r31, r1
 c1e:	f8 cf       	rjmp	.-16     	; 0xc10 <__floatsisf+0x1c>
 c20:	fa f4       	brpl	.+62     	; 0xc60 <__floatsisf+0x6c>
 c22:	bb 0f       	add	r27, r27
 c24:	11 f4       	brne	.+4      	; 0xc2a <__floatsisf+0x36>
 c26:	60 ff       	sbrs	r22, 0
 c28:	1b c0       	rjmp	.+54     	; 0xc60 <__floatsisf+0x6c>
 c2a:	6f 5f       	subi	r22, 0xFF	; 255
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255
 c2e:	8f 4f       	sbci	r24, 0xFF	; 255
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	16 c0       	rjmp	.+44     	; 0xc60 <__floatsisf+0x6c>
 c34:	88 23       	and	r24, r24
 c36:	11 f0       	breq	.+4      	; 0xc3c <__floatsisf+0x48>
 c38:	96 e9       	ldi	r25, 0x96	; 150
 c3a:	11 c0       	rjmp	.+34     	; 0xc5e <__floatsisf+0x6a>
 c3c:	77 23       	and	r23, r23
 c3e:	21 f0       	breq	.+8      	; 0xc48 <__floatsisf+0x54>
 c40:	9e e8       	ldi	r25, 0x8E	; 142
 c42:	87 2f       	mov	r24, r23
 c44:	76 2f       	mov	r23, r22
 c46:	05 c0       	rjmp	.+10     	; 0xc52 <__floatsisf+0x5e>
 c48:	66 23       	and	r22, r22
 c4a:	71 f0       	breq	.+28     	; 0xc68 <__floatsisf+0x74>
 c4c:	96 e8       	ldi	r25, 0x86	; 134
 c4e:	86 2f       	mov	r24, r22
 c50:	70 e0       	ldi	r23, 0x00	; 0
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	2a f0       	brmi	.+10     	; 0xc60 <__floatsisf+0x6c>
 c56:	9a 95       	dec	r25
 c58:	66 0f       	add	r22, r22
 c5a:	77 1f       	adc	r23, r23
 c5c:	88 1f       	adc	r24, r24
 c5e:	da f7       	brpl	.-10     	; 0xc56 <__floatsisf+0x62>
 c60:	88 0f       	add	r24, r24
 c62:	96 95       	lsr	r25
 c64:	87 95       	ror	r24
 c66:	97 f9       	bld	r25, 7
 c68:	08 95       	ret

00000c6a <__fp_inf>:
 c6a:	97 f9       	bld	r25, 7
 c6c:	9f 67       	ori	r25, 0x7F	; 127
 c6e:	80 e8       	ldi	r24, 0x80	; 128
 c70:	70 e0       	ldi	r23, 0x00	; 0
 c72:	60 e0       	ldi	r22, 0x00	; 0
 c74:	08 95       	ret

00000c76 <__fp_nan>:
 c76:	9f ef       	ldi	r25, 0xFF	; 255
 c78:	80 ec       	ldi	r24, 0xC0	; 192
 c7a:	08 95       	ret

00000c7c <__fp_pscA>:
 c7c:	00 24       	eor	r0, r0
 c7e:	0a 94       	dec	r0
 c80:	16 16       	cp	r1, r22
 c82:	17 06       	cpc	r1, r23
 c84:	18 06       	cpc	r1, r24
 c86:	09 06       	cpc	r0, r25
 c88:	08 95       	ret

00000c8a <__fp_pscB>:
 c8a:	00 24       	eor	r0, r0
 c8c:	0a 94       	dec	r0
 c8e:	12 16       	cp	r1, r18
 c90:	13 06       	cpc	r1, r19
 c92:	14 06       	cpc	r1, r20
 c94:	05 06       	cpc	r0, r21
 c96:	08 95       	ret

00000c98 <__fp_round>:
 c98:	09 2e       	mov	r0, r25
 c9a:	03 94       	inc	r0
 c9c:	00 0c       	add	r0, r0
 c9e:	11 f4       	brne	.+4      	; 0xca4 <__fp_round+0xc>
 ca0:	88 23       	and	r24, r24
 ca2:	52 f0       	brmi	.+20     	; 0xcb8 <__fp_round+0x20>
 ca4:	bb 0f       	add	r27, r27
 ca6:	40 f4       	brcc	.+16     	; 0xcb8 <__fp_round+0x20>
 ca8:	bf 2b       	or	r27, r31
 caa:	11 f4       	brne	.+4      	; 0xcb0 <__fp_round+0x18>
 cac:	60 ff       	sbrs	r22, 0
 cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__fp_round+0x20>
 cb0:	6f 5f       	subi	r22, 0xFF	; 255
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	08 95       	ret

00000cba <__fp_split3>:
 cba:	57 fd       	sbrc	r21, 7
 cbc:	90 58       	subi	r25, 0x80	; 128
 cbe:	44 0f       	add	r20, r20
 cc0:	55 1f       	adc	r21, r21
 cc2:	59 f0       	breq	.+22     	; 0xcda <__fp_splitA+0x10>
 cc4:	5f 3f       	cpi	r21, 0xFF	; 255
 cc6:	71 f0       	breq	.+28     	; 0xce4 <__fp_splitA+0x1a>
 cc8:	47 95       	ror	r20

00000cca <__fp_splitA>:
 cca:	88 0f       	add	r24, r24
 ccc:	97 fb       	bst	r25, 7
 cce:	99 1f       	adc	r25, r25
 cd0:	61 f0       	breq	.+24     	; 0xcea <__fp_splitA+0x20>
 cd2:	9f 3f       	cpi	r25, 0xFF	; 255
 cd4:	79 f0       	breq	.+30     	; 0xcf4 <__fp_splitA+0x2a>
 cd6:	87 95       	ror	r24
 cd8:	08 95       	ret
 cda:	12 16       	cp	r1, r18
 cdc:	13 06       	cpc	r1, r19
 cde:	14 06       	cpc	r1, r20
 ce0:	55 1f       	adc	r21, r21
 ce2:	f2 cf       	rjmp	.-28     	; 0xcc8 <__fp_split3+0xe>
 ce4:	46 95       	lsr	r20
 ce6:	f1 df       	rcall	.-30     	; 0xcca <__fp_splitA>
 ce8:	08 c0       	rjmp	.+16     	; 0xcfa <__fp_splitA+0x30>
 cea:	16 16       	cp	r1, r22
 cec:	17 06       	cpc	r1, r23
 cee:	18 06       	cpc	r1, r24
 cf0:	99 1f       	adc	r25, r25
 cf2:	f1 cf       	rjmp	.-30     	; 0xcd6 <__fp_splitA+0xc>
 cf4:	86 95       	lsr	r24
 cf6:	71 05       	cpc	r23, r1
 cf8:	61 05       	cpc	r22, r1
 cfa:	08 94       	sec
 cfc:	08 95       	ret

00000cfe <__fp_zero>:
 cfe:	e8 94       	clt

00000d00 <__fp_szero>:
 d00:	bb 27       	eor	r27, r27
 d02:	66 27       	eor	r22, r22
 d04:	77 27       	eor	r23, r23
 d06:	cb 01       	movw	r24, r22
 d08:	97 f9       	bld	r25, 7
 d0a:	08 95       	ret

00000d0c <__mulsf3>:
 d0c:	0b d0       	rcall	.+22     	; 0xd24 <__mulsf3x>
 d0e:	c4 cf       	rjmp	.-120    	; 0xc98 <__fp_round>
 d10:	b5 df       	rcall	.-150    	; 0xc7c <__fp_pscA>
 d12:	28 f0       	brcs	.+10     	; 0xd1e <__mulsf3+0x12>
 d14:	ba df       	rcall	.-140    	; 0xc8a <__fp_pscB>
 d16:	18 f0       	brcs	.+6      	; 0xd1e <__mulsf3+0x12>
 d18:	95 23       	and	r25, r21
 d1a:	09 f0       	breq	.+2      	; 0xd1e <__mulsf3+0x12>
 d1c:	a6 cf       	rjmp	.-180    	; 0xc6a <__fp_inf>
 d1e:	ab cf       	rjmp	.-170    	; 0xc76 <__fp_nan>
 d20:	11 24       	eor	r1, r1
 d22:	ee cf       	rjmp	.-36     	; 0xd00 <__fp_szero>

00000d24 <__mulsf3x>:
 d24:	ca df       	rcall	.-108    	; 0xcba <__fp_split3>
 d26:	a0 f3       	brcs	.-24     	; 0xd10 <__mulsf3+0x4>

00000d28 <__mulsf3_pse>:
 d28:	95 9f       	mul	r25, r21
 d2a:	d1 f3       	breq	.-12     	; 0xd20 <__mulsf3+0x14>
 d2c:	95 0f       	add	r25, r21
 d2e:	50 e0       	ldi	r21, 0x00	; 0
 d30:	55 1f       	adc	r21, r21
 d32:	62 9f       	mul	r22, r18
 d34:	f0 01       	movw	r30, r0
 d36:	72 9f       	mul	r23, r18
 d38:	bb 27       	eor	r27, r27
 d3a:	f0 0d       	add	r31, r0
 d3c:	b1 1d       	adc	r27, r1
 d3e:	63 9f       	mul	r22, r19
 d40:	aa 27       	eor	r26, r26
 d42:	f0 0d       	add	r31, r0
 d44:	b1 1d       	adc	r27, r1
 d46:	aa 1f       	adc	r26, r26
 d48:	64 9f       	mul	r22, r20
 d4a:	66 27       	eor	r22, r22
 d4c:	b0 0d       	add	r27, r0
 d4e:	a1 1d       	adc	r26, r1
 d50:	66 1f       	adc	r22, r22
 d52:	82 9f       	mul	r24, r18
 d54:	22 27       	eor	r18, r18
 d56:	b0 0d       	add	r27, r0
 d58:	a1 1d       	adc	r26, r1
 d5a:	62 1f       	adc	r22, r18
 d5c:	73 9f       	mul	r23, r19
 d5e:	b0 0d       	add	r27, r0
 d60:	a1 1d       	adc	r26, r1
 d62:	62 1f       	adc	r22, r18
 d64:	83 9f       	mul	r24, r19
 d66:	a0 0d       	add	r26, r0
 d68:	61 1d       	adc	r22, r1
 d6a:	22 1f       	adc	r18, r18
 d6c:	74 9f       	mul	r23, r20
 d6e:	33 27       	eor	r19, r19
 d70:	a0 0d       	add	r26, r0
 d72:	61 1d       	adc	r22, r1
 d74:	23 1f       	adc	r18, r19
 d76:	84 9f       	mul	r24, r20
 d78:	60 0d       	add	r22, r0
 d7a:	21 1d       	adc	r18, r1
 d7c:	82 2f       	mov	r24, r18
 d7e:	76 2f       	mov	r23, r22
 d80:	6a 2f       	mov	r22, r26
 d82:	11 24       	eor	r1, r1
 d84:	9f 57       	subi	r25, 0x7F	; 127
 d86:	50 40       	sbci	r21, 0x00	; 0
 d88:	8a f0       	brmi	.+34     	; 0xdac <__mulsf3_pse+0x84>
 d8a:	e1 f0       	breq	.+56     	; 0xdc4 <__mulsf3_pse+0x9c>
 d8c:	88 23       	and	r24, r24
 d8e:	4a f0       	brmi	.+18     	; 0xda2 <__mulsf3_pse+0x7a>
 d90:	ee 0f       	add	r30, r30
 d92:	ff 1f       	adc	r31, r31
 d94:	bb 1f       	adc	r27, r27
 d96:	66 1f       	adc	r22, r22
 d98:	77 1f       	adc	r23, r23
 d9a:	88 1f       	adc	r24, r24
 d9c:	91 50       	subi	r25, 0x01	; 1
 d9e:	50 40       	sbci	r21, 0x00	; 0
 da0:	a9 f7       	brne	.-22     	; 0xd8c <__mulsf3_pse+0x64>
 da2:	9e 3f       	cpi	r25, 0xFE	; 254
 da4:	51 05       	cpc	r21, r1
 da6:	70 f0       	brcs	.+28     	; 0xdc4 <__mulsf3_pse+0x9c>
 da8:	60 cf       	rjmp	.-320    	; 0xc6a <__fp_inf>
 daa:	aa cf       	rjmp	.-172    	; 0xd00 <__fp_szero>
 dac:	5f 3f       	cpi	r21, 0xFF	; 255
 dae:	ec f3       	brlt	.-6      	; 0xdaa <__mulsf3_pse+0x82>
 db0:	98 3e       	cpi	r25, 0xE8	; 232
 db2:	dc f3       	brlt	.-10     	; 0xdaa <__mulsf3_pse+0x82>
 db4:	86 95       	lsr	r24
 db6:	77 95       	ror	r23
 db8:	67 95       	ror	r22
 dba:	b7 95       	ror	r27
 dbc:	f7 95       	ror	r31
 dbe:	e7 95       	ror	r30
 dc0:	9f 5f       	subi	r25, 0xFF	; 255
 dc2:	c1 f7       	brne	.-16     	; 0xdb4 <__mulsf3_pse+0x8c>
 dc4:	fe 2b       	or	r31, r30
 dc6:	88 0f       	add	r24, r24
 dc8:	91 1d       	adc	r25, r1
 dca:	96 95       	lsr	r25
 dcc:	87 95       	ror	r24
 dce:	97 f9       	bld	r25, 7
 dd0:	08 95       	ret

00000dd2 <round>:
 dd2:	7b df       	rcall	.-266    	; 0xcca <__fp_splitA>
 dd4:	e0 f0       	brcs	.+56     	; 0xe0e <round+0x3c>
 dd6:	9e 37       	cpi	r25, 0x7E	; 126
 dd8:	d8 f0       	brcs	.+54     	; 0xe10 <round+0x3e>
 dda:	96 39       	cpi	r25, 0x96	; 150
 ddc:	b8 f4       	brcc	.+46     	; 0xe0c <round+0x3a>
 dde:	9e 38       	cpi	r25, 0x8E	; 142
 de0:	48 f4       	brcc	.+18     	; 0xdf4 <round+0x22>
 de2:	67 2f       	mov	r22, r23
 de4:	78 2f       	mov	r23, r24
 de6:	88 27       	eor	r24, r24
 de8:	98 5f       	subi	r25, 0xF8	; 248
 dea:	f9 cf       	rjmp	.-14     	; 0xdde <round+0xc>
 dec:	86 95       	lsr	r24
 dee:	77 95       	ror	r23
 df0:	67 95       	ror	r22
 df2:	93 95       	inc	r25
 df4:	95 39       	cpi	r25, 0x95	; 149
 df6:	d0 f3       	brcs	.-12     	; 0xdec <round+0x1a>
 df8:	b6 2f       	mov	r27, r22
 dfa:	b1 70       	andi	r27, 0x01	; 1
 dfc:	6b 0f       	add	r22, r27
 dfe:	71 1d       	adc	r23, r1
 e00:	81 1d       	adc	r24, r1
 e02:	20 f4       	brcc	.+8      	; 0xe0c <round+0x3a>
 e04:	87 95       	ror	r24
 e06:	77 95       	ror	r23
 e08:	67 95       	ror	r22
 e0a:	93 95       	inc	r25
 e0c:	02 c0       	rjmp	.+4      	; 0xe12 <__fp_mintl>
 e0e:	1c c0       	rjmp	.+56     	; 0xe48 <__fp_mpack>
 e10:	77 cf       	rjmp	.-274    	; 0xd00 <__fp_szero>

00000e12 <__fp_mintl>:
 e12:	88 23       	and	r24, r24
 e14:	71 f4       	brne	.+28     	; 0xe32 <__fp_mintl+0x20>
 e16:	77 23       	and	r23, r23
 e18:	21 f0       	breq	.+8      	; 0xe22 <__fp_mintl+0x10>
 e1a:	98 50       	subi	r25, 0x08	; 8
 e1c:	87 2b       	or	r24, r23
 e1e:	76 2f       	mov	r23, r22
 e20:	07 c0       	rjmp	.+14     	; 0xe30 <__fp_mintl+0x1e>
 e22:	66 23       	and	r22, r22
 e24:	11 f4       	brne	.+4      	; 0xe2a <__fp_mintl+0x18>
 e26:	99 27       	eor	r25, r25
 e28:	0d c0       	rjmp	.+26     	; 0xe44 <__fp_mintl+0x32>
 e2a:	90 51       	subi	r25, 0x10	; 16
 e2c:	86 2b       	or	r24, r22
 e2e:	70 e0       	ldi	r23, 0x00	; 0
 e30:	60 e0       	ldi	r22, 0x00	; 0
 e32:	2a f0       	brmi	.+10     	; 0xe3e <__fp_mintl+0x2c>
 e34:	9a 95       	dec	r25
 e36:	66 0f       	add	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	88 1f       	adc	r24, r24
 e3c:	da f7       	brpl	.-10     	; 0xe34 <__fp_mintl+0x22>
 e3e:	88 0f       	add	r24, r24
 e40:	96 95       	lsr	r25
 e42:	87 95       	ror	r24
 e44:	97 f9       	bld	r25, 7
 e46:	08 95       	ret

00000e48 <__fp_mpack>:
 e48:	9f 3f       	cpi	r25, 0xFF	; 255
 e4a:	31 f0       	breq	.+12     	; 0xe58 <__fp_mpack_finite+0xc>

00000e4c <__fp_mpack_finite>:
 e4c:	91 50       	subi	r25, 0x01	; 1
 e4e:	20 f4       	brcc	.+8      	; 0xe58 <__fp_mpack_finite+0xc>
 e50:	87 95       	ror	r24
 e52:	77 95       	ror	r23
 e54:	67 95       	ror	r22
 e56:	b7 95       	ror	r27
 e58:	88 0f       	add	r24, r24
 e5a:	91 1d       	adc	r25, r1
 e5c:	96 95       	lsr	r25
 e5e:	87 95       	ror	r24
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret

00000e64 <__divmodhi4>:
 e64:	97 fb       	bst	r25, 7
 e66:	07 2e       	mov	r0, r23
 e68:	16 f4       	brtc	.+4      	; 0xe6e <__divmodhi4+0xa>
 e6a:	00 94       	com	r0
 e6c:	06 d0       	rcall	.+12     	; 0xe7a <__divmodhi4_neg1>
 e6e:	77 fd       	sbrc	r23, 7
 e70:	08 d0       	rcall	.+16     	; 0xe82 <__divmodhi4_neg2>
 e72:	0b d0       	rcall	.+22     	; 0xe8a <__udivmodhi4>
 e74:	07 fc       	sbrc	r0, 7
 e76:	05 d0       	rcall	.+10     	; 0xe82 <__divmodhi4_neg2>
 e78:	3e f4       	brtc	.+14     	; 0xe88 <__divmodhi4_exit>

00000e7a <__divmodhi4_neg1>:
 e7a:	90 95       	com	r25
 e7c:	81 95       	neg	r24
 e7e:	9f 4f       	sbci	r25, 0xFF	; 255
 e80:	08 95       	ret

00000e82 <__divmodhi4_neg2>:
 e82:	70 95       	com	r23
 e84:	61 95       	neg	r22
 e86:	7f 4f       	sbci	r23, 0xFF	; 255

00000e88 <__divmodhi4_exit>:
 e88:	08 95       	ret

00000e8a <__udivmodhi4>:
 e8a:	aa 1b       	sub	r26, r26
 e8c:	bb 1b       	sub	r27, r27
 e8e:	51 e1       	ldi	r21, 0x11	; 17
 e90:	07 c0       	rjmp	.+14     	; 0xea0 <__udivmodhi4_ep>

00000e92 <__udivmodhi4_loop>:
 e92:	aa 1f       	adc	r26, r26
 e94:	bb 1f       	adc	r27, r27
 e96:	a6 17       	cp	r26, r22
 e98:	b7 07       	cpc	r27, r23
 e9a:	10 f0       	brcs	.+4      	; 0xea0 <__udivmodhi4_ep>
 e9c:	a6 1b       	sub	r26, r22
 e9e:	b7 0b       	sbc	r27, r23

00000ea0 <__udivmodhi4_ep>:
 ea0:	88 1f       	adc	r24, r24
 ea2:	99 1f       	adc	r25, r25
 ea4:	5a 95       	dec	r21
 ea6:	a9 f7       	brne	.-22     	; 0xe92 <__udivmodhi4_loop>
 ea8:	80 95       	com	r24
 eaa:	90 95       	com	r25
 eac:	bc 01       	movw	r22, r24
 eae:	cd 01       	movw	r24, r26
 eb0:	08 95       	ret

00000eb2 <strcmp>:
 eb2:	fb 01       	movw	r30, r22
 eb4:	dc 01       	movw	r26, r24
 eb6:	8d 91       	ld	r24, X+
 eb8:	01 90       	ld	r0, Z+
 eba:	80 19       	sub	r24, r0
 ebc:	01 10       	cpse	r0, r1
 ebe:	d9 f3       	breq	.-10     	; 0xeb6 <strcmp+0x4>
 ec0:	99 0b       	sbc	r25, r25
 ec2:	08 95       	ret

00000ec4 <_exit>:
 ec4:	f8 94       	cli

00000ec6 <__stop_program>:
 ec6:	ff cf       	rjmp	.-2      	; 0xec6 <__stop_program>
