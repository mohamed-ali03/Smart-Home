
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00000ed0  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008001ca  008001ca  000010ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000302c  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f67  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d0  00000000  00000000  00005377  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000610  00000000  00000000  00006a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f92  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b88  00000000  00000000  00007fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00009b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c4       	rjmp	.+2094   	; 0x832 <__vector_1>
   4:	42 c4       	rjmp	.+2180   	; 0x88a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	cd c4       	rjmp	.+2458   	; 0x9b2 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ed       	ldi	r30, 0xD0	; 208
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 3c       	cpi	r26, 0xCA	; 202
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	aa ec       	ldi	r26, 0xCA	; 202
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 3e       	cpi	r26, 0xE8	; 232
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	00 d2       	rcall	.+1024   	; 0x45a <main>
  5a:	38 c7       	rjmp	.+3696   	; 0xecc <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Buzzer_INIT>:
#include "Buzzer.h"


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	11 f0       	breq	.+4      	; 0x66 <Buzzer_INIT+0x8>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
  62:	95 d3       	rcall	.+1834   	; 0x78e <GPIO_PIN_Initialize>
  64:	08 95       	ret


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  66:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
	}
	return status ;
}
  68:	08 95       	ret

0000006a <Buzzer_Play>:
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  6a:	00 97       	sbiw	r24, 0x00	; 0
  6c:	19 f0       	breq	.+6      	; 0x74 <Buzzer_Play+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	e3 d2       	rcall	.+1478   	; 0x638 <GPIO_PIN_Write_logic>
  72:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  74:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
  76:	08 95       	ret

00000078 <Buzzer_Stop>:
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	19 f0       	breq	.+6      	; 0x82 <Buzzer_Stop+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	dc d2       	rcall	.+1464   	; 0x638 <GPIO_PIN_Write_logic>
  80:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  82:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
	}
	return status ;
}
  84:	08 95       	ret

00000086 <Keypad_Init>:
	{'4', '5', '6'},
	{'7', '8', '9'},
	{'*', '0', '#'}
};

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	31 f1       	breq	.+76     	; 0xe2 <Keypad_Init+0x5c>
  96:	7b 01       	movw	r14, r22
  98:	8c 01       	movw	r16, r24
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	09 c0       	rjmp	.+18     	; 0xb4 <Keypad_Init+0x2e>
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
  a2:	ce 01       	movw	r24, r28
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	80 0f       	add	r24, r16
  ae:	91 1f       	adc	r25, r17
  b0:	6e d3       	rcall	.+1756   	; 0x78e <GPIO_PIN_Initialize>
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
  b2:	21 96       	adiw	r28, 0x01	; 1
  b4:	c4 30       	cpi	r28, 0x04	; 4
  b6:	d1 05       	cpc	r29, r1
  b8:	a0 f3       	brcs	.-24     	; 0xa2 <Keypad_Init+0x1c>
  ba:	c0 e0       	ldi	r28, 0x00	; 0
  bc:	d0 e0       	ldi	r29, 0x00	; 0
  be:	0a c0       	rjmp	.+20     	; 0xd4 <Keypad_Init+0x4e>
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
  c0:	ce 01       	movw	r24, r28
  c2:	04 96       	adiw	r24, 0x04	; 4
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	80 0f       	add	r24, r16
  ce:	91 1f       	adc	r25, r17
  d0:	5e d3       	rcall	.+1724   	; 0x78e <GPIO_PIN_Initialize>
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	c3 30       	cpi	r28, 0x03	; 3
  d6:	d1 05       	cpc	r29, r1
  d8:	98 f3       	brcs	.-26     	; 0xc0 <Keypad_Init+0x3a>
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
		}
		// init password
		keypad_obj->ActualPassword = password;
  da:	f8 01       	movw	r30, r16
  dc:	f5 8e       	std	Z+29, r15	; 0x1d
  de:	e4 8e       	std	Z+28, r14	; 0x1c
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <Keypad_Init+0x5e>

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
  e2:	80 e0       	ldi	r24, 0x00	; 0
		}
		// init password
		keypad_obj->ActualPassword = password;
	}
	return status;
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	08 95       	ret

000000f2 <Keypad_Get_char>:
}



/*-----------------------------------------------------asissstant functions---------------------------------------*/
STD_ReturnType Keypad_Get_char(const Keypad_Config *keypad_obj,uint8 *_char,Camera_status *cam){
  f2:	5f 92       	push	r5
  f4:	6f 92       	push	r6
  f6:	7f 92       	push	r7
  f8:	8f 92       	push	r8
  fa:	9f 92       	push	r9
  fc:	af 92       	push	r10
  fe:	bf 92       	push	r11
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	uint32 clear ;
	uint32 count_rows ;
	uint32 count_colums;
	
	
	if (NULL == keypad_obj ){
 116:	00 97       	sbiw	r24, 0x00	; 0
 118:	09 f4       	brne	.+2      	; 0x11c <Keypad_Get_char+0x2a>
 11a:	71 c0       	rjmp	.+226    	; 0x1fe <Keypad_Get_char+0x10c>
 11c:	3a 01       	movw	r6, r20
 11e:	4b 01       	movw	r8, r22
 120:	6c 01       	movw	r12, r24
 122:	51 2c       	mov	r5, r1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	67 c0       	rjmp	.+206    	; 0x1f6 <Keypad_Get_char+0x104>
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
			if(*cam == Face_Not_Detected){			
 128:	f3 01       	movw	r30, r6
 12a:	90 81       	ld	r25, Z
 12c:	92 30       	cpi	r25, 0x02	; 2
 12e:	09 f4       	brne	.+2      	; 0x132 <Keypad_Get_char+0x40>
 130:	5b c0       	rjmp	.+182    	; 0x1e8 <Keypad_Get_char+0xf6>
 132:	66 c0       	rjmp	.+204    	; 0x200 <__EEPROM_REGION_LENGTH__>
				for(count_colums = 0 ; count_colums < 3 ; count_colums++)
				{
					if (flag)
 134:	51 10       	cpse	r5, r1
 136:	5f c0       	rjmp	.+190    	; 0x1f6 <Keypad_Get_char+0x104>
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	10 e0       	ldi	r17, 0x00	; 0
 13c:	0c c0       	rjmp	.+24     	; 0x156 <Keypad_Get_char+0x64>
						break;
					
					// set all columns low then set the required column high
					for(clear = 0 ; clear < 3 ; clear++){
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
 13e:	c8 01       	movw	r24, r16
 140:	04 96       	adiw	r24, 0x04	; 4
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	8c 0d       	add	r24, r12
 14e:	9d 1d       	adc	r25, r13
 150:	73 d2       	rcall	.+1254   	; 0x638 <GPIO_PIN_Write_logic>
				{
					if (flag)
						break;
					
					// set all columns low then set the required column high
					for(clear = 0 ; clear < 3 ; clear++){
 152:	0f 5f       	subi	r16, 0xFF	; 255
 154:	1f 4f       	sbci	r17, 0xFF	; 255
 156:	03 30       	cpi	r16, 0x03	; 3
 158:	11 05       	cpc	r17, r1
 15a:	88 f3       	brcs	.-30     	; 0x13e <Keypad_Get_char+0x4c>
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
					}
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
 15c:	c5 01       	movw	r24, r10
 15e:	04 96       	adiw	r24, 0x04	; 4
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	8c 0d       	add	r24, r12
 16c:	9d 1d       	adc	r25, r13
 16e:	64 d2       	rcall	.+1224   	; 0x638 <GPIO_PIN_Write_logic>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	e1 ee       	ldi	r30, 0xE1	; 225
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <Keypad_Get_char+0x82>
 178:	00 c0       	rjmp	.+0      	; 0x17a <Keypad_Get_char+0x88>
 17a:	00 00       	nop
					_delay_ms(5);
					for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
 180:	2b c0       	rjmp	.+86     	; 0x1d8 <Keypad_Get_char+0xe6>
						status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 182:	87 01       	movw	r16, r14
 184:	00 0f       	add	r16, r16
 186:	11 1f       	adc	r17, r17
 188:	00 0f       	add	r16, r16
 18a:	11 1f       	adc	r17, r17
 18c:	0c 0d       	add	r16, r12
 18e:	1d 1d       	adc	r17, r13
 190:	be 01       	movw	r22, r28
 192:	6f 5f       	subi	r22, 0xFF	; 255
 194:	7f 4f       	sbci	r23, 0xFF	; 255
 196:	c8 01       	movw	r24, r16
 198:	92 d2       	rcall	.+1316   	; 0x6be <GPIO_PIN_Read_Logic>
					
						if (logic == GPIO_PIN_LOGIC_LOW){
 19a:	99 81       	ldd	r25, Y+1	; 0x01
 19c:	91 11       	cpse	r25, r1
 19e:	17 c0       	rjmp	.+46     	; 0x1ce <Keypad_Get_char+0xdc>
							*_char = keypad[count_rows][count_colums];
 1a0:	f7 01       	movw	r30, r14
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0d       	add	r30, r14
 1a8:	ff 1d       	adc	r31, r15
 1aa:	e2 55       	subi	r30, 0x52	; 82
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	ea 0d       	add	r30, r10
 1b0:	fb 1d       	adc	r31, r11
 1b2:	90 81       	ld	r25, Z
 1b4:	f4 01       	movw	r30, r8
 1b6:	90 83       	st	Z, r25
						
							while(!(logic == GPIO_PIN_LOGIC_HIGH)){
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <Keypad_Get_char+0xd2>
								status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	c8 01       	movw	r24, r16
 1c2:	7d d2       	rcall	.+1274   	; 0x6be <GPIO_PIN_Read_Logic>
						status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
					
						if (logic == GPIO_PIN_LOGIC_LOW){
							*_char = keypad[count_rows][count_colums];
						
							while(!(logic == GPIO_PIN_LOGIC_HIGH)){
 1c4:	99 81       	ldd	r25, Y+1	; 0x01
 1c6:	91 30       	cpi	r25, 0x01	; 1
 1c8:	c1 f7       	brne	.-16     	; 0x1ba <Keypad_Get_char+0xc8>
								status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
							}
							flag = True ;
 1ca:	55 24       	eor	r5, r5
 1cc:	53 94       	inc	r5
						}
						if(flag)
 1ce:	51 10       	cpse	r5, r1
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <Keypad_Get_char+0xee>
					for(clear = 0 ; clear < 3 ; clear++){
						status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
					}
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
					_delay_ms(5);
					for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 1d2:	ff ef       	ldi	r31, 0xFF	; 255
 1d4:	ef 1a       	sub	r14, r31
 1d6:	ff 0a       	sbc	r15, r31
 1d8:	94 e0       	ldi	r25, 0x04	; 4
 1da:	e9 16       	cp	r14, r25
 1dc:	f1 04       	cpc	r15, r1
 1de:	88 f2       	brcs	.-94     	; 0x182 <Keypad_Get_char+0x90>
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
			if(*cam == Face_Not_Detected){			
				for(count_colums = 0 ; count_colums < 3 ; count_colums++)
 1e0:	ef ef       	ldi	r30, 0xFF	; 255
 1e2:	ae 1a       	sub	r10, r30
 1e4:	be 0a       	sbc	r11, r30
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <Keypad_Get_char+0xfa>
 1e8:	a1 2c       	mov	r10, r1
 1ea:	b1 2c       	mov	r11, r1
 1ec:	f3 e0       	ldi	r31, 0x03	; 3
 1ee:	af 16       	cp	r10, r31
 1f0:	b1 04       	cpc	r11, r1
 1f2:	08 f4       	brcc	.+2      	; 0x1f6 <Keypad_Get_char+0x104>
 1f4:	9f cf       	rjmp	.-194    	; 0x134 <Keypad_Get_char+0x42>
	
	if (NULL == keypad_obj ){
		status = RET_NOT_OK;
	}
	else{
		while(!flag){
 1f6:	55 20       	and	r5, r5
 1f8:	09 f4       	brne	.+2      	; 0x1fc <Keypad_Get_char+0x10a>
 1fa:	96 cf       	rjmp	.-212    	; 0x128 <Keypad_Get_char+0x36>
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <__EEPROM_REGION_LENGTH__>
	uint32 count_rows ;
	uint32 count_colums;
	
	
	if (NULL == keypad_obj ){
		status = RET_NOT_OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	
	return status;
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	9f 90       	pop	r9
 218:	8f 90       	pop	r8
 21a:	7f 90       	pop	r7
 21c:	6f 90       	pop	r6
 21e:	5f 90       	pop	r5
 220:	08 95       	ret

00000222 <Keypad_Get_Check_Password>:
	return status;
}



STD_ReturnType Keypad_Get_Check_Password(const Keypad_Config *keypad_obj,uint8 pass[],bool *ispasstrue,Camera_status *cam){
 222:	7f 92       	push	r7
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	if (NULL == keypad_obj || NULL == pass){
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	89 f1       	breq	.+98     	; 0x2a8 <Keypad_Get_Check_Password+0x86>
 246:	61 15       	cp	r22, r1
 248:	71 05       	cpc	r23, r1
 24a:	81 f1       	breq	.+96     	; 0x2ac <Keypad_Get_Check_Password+0x8a>
 24c:	79 01       	movw	r14, r18
 24e:	4a 01       	movw	r8, r20
 250:	5b 01       	movw	r10, r22
 252:	6c 01       	movw	r12, r24
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	77 24       	eor	r7, r7
 25a:	73 94       	inc	r7
		status = RET_NOT_OK;
	}
	else{
		while(1){
			if(*cam == Face_Not_Detected){
 25c:	f7 01       	movw	r30, r14
 25e:	80 81       	ld	r24, Z
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	29 f5       	brne	.+74     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
				status = Keypad_Get_char(keypad_obj,&key,cam);
 264:	a7 01       	movw	r20, r14
 266:	be 01       	movw	r22, r28
 268:	6f 5f       	subi	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	c6 01       	movw	r24, r12
 26e:	41 df       	rcall	.-382    	; 0xf2 <Keypad_Get_char>
 270:	78 2e       	mov	r7, r24
				if(key == '#'){
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	83 32       	cpi	r24, 0x23	; 35
 276:	71 f4       	brne	.+28     	; 0x294 <Keypad_Get_Check_Password+0x72>
					if (strcmp(pass,keypad_obj->ActualPassword) == 0 ){
 278:	f6 01       	movw	r30, r12
 27a:	64 8d       	ldd	r22, Z+28	; 0x1c
 27c:	75 8d       	ldd	r23, Z+29	; 0x1d
 27e:	c5 01       	movw	r24, r10
 280:	1c d6       	rcall	.+3128   	; 0xeba <strcmp>
 282:	89 2b       	or	r24, r25
 284:	21 f4       	brne	.+8      	; 0x28e <Keypad_Get_Check_Password+0x6c>
						*ispasstrue = True;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	f4 01       	movw	r30, r8
 28a:	80 83       	st	Z, r24
 28c:	10 c0       	rjmp	.+32     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
					}
					else {
						*ispasstrue = False;
 28e:	f4 01       	movw	r30, r8
 290:	10 82       	st	Z, r1
 292:	0d c0       	rjmp	.+26     	; 0x2ae <Keypad_Get_Check_Password+0x8c>
					}
					break;
				}
				else if (index <4){
 294:	04 30       	cpi	r16, 0x04	; 4
 296:	11 05       	cpc	r17, r1
 298:	08 f7       	brcc	.-62     	; 0x25c <Keypad_Get_Check_Password+0x3a>
					pass[index] = key ;
 29a:	f5 01       	movw	r30, r10
 29c:	e0 0f       	add	r30, r16
 29e:	f1 1f       	adc	r31, r17
 2a0:	80 83       	st	Z, r24
					index++;
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	da cf       	rjmp	.-76     	; 0x25c <Keypad_Get_Check_Password+0x3a>
STD_ReturnType Keypad_Get_Check_Password(const Keypad_Config *keypad_obj,uint8 pass[],bool *ispasstrue,Camera_status *cam){
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	if (NULL == keypad_obj || NULL == pass){
		status = RET_NOT_OK;
 2a8:	71 2c       	mov	r7, r1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <Keypad_Get_Check_Password+0x8c>
 2ac:	71 2c       	mov	r7, r1
				break;
			}
		}
	}
	return status;
}
 2ae:	87 2d       	mov	r24, r7
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	ff 90       	pop	r15
 2bc:	ef 90       	pop	r14
 2be:	df 90       	pop	r13
 2c0:	cf 90       	pop	r12
 2c2:	bf 90       	pop	r11
 2c4:	af 90       	pop	r10
 2c6:	9f 90       	pop	r9
 2c8:	8f 90       	pop	r8
 2ca:	7f 90       	pop	r7
 2cc:	08 95       	ret

000002ce <RGB_LED_INIT>:
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW);
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	00 97       	sbiw	r24, 0x00	; 0
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <RGB_LED_INIT+0x14>
 2d6:	ec 01       	movw	r28, r24
 2d8:	5a d2       	rcall	.+1204   	; 0x78e <GPIO_PIN_Initialize>
 2da:	ce 01       	movw	r24, r28
 2dc:	04 96       	adiw	r24, 0x04	; 4
 2de:	57 d2       	rcall	.+1198   	; 0x78e <GPIO_PIN_Initialize>
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <RGB_LED_INIT+0x16>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <RGB_LED_RED>:
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	41 f0       	breq	.+16     	; 0x302 <RGB_LED_RED+0x18>
 2f2:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	a0 d1       	rcall	.+832    	; 0x638 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	ce 01       	movw	r24, r28
 2fc:	04 96       	adiw	r24, 0x04	; 4
 2fe:	9c d1       	rcall	.+824    	; 0x638 <GPIO_PIN_Write_logic>
 300:	01 c0       	rjmp	.+2      	; 0x304 <RGB_LED_RED+0x1a>
	return status ;
}
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 302:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <RGB_LED_BLUE>:

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	41 f0       	breq	.+16     	; 0x322 <RGB_LED_BLUE+0x18>
 312:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	90 d1       	rcall	.+800    	; 0x638 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	ce 01       	movw	r24, r28
 31c:	04 96       	adiw	r24, 0x04	; 4
 31e:	8c d1       	rcall	.+792    	; 0x638 <GPIO_PIN_Write_logic>
 320:	01 c0       	rjmp	.+2      	; 0x324 <RGB_LED_BLUE+0x1a>
}

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 322:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
	}
	return status ;
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <RGB_LED_GREEN>:

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	41 f0       	breq	.+16     	; 0x342 <RGB_LED_GREEN+0x18>
 332:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	80 d1       	rcall	.+768    	; 0x638 <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	ce 01       	movw	r24, r28
 33c:	04 96       	adiw	r24, 0x04	; 4
 33e:	7c d1       	rcall	.+760    	; 0x638 <GPIO_PIN_Write_logic>
 340:	01 c0       	rjmp	.+2      	; 0x344 <RGB_LED_GREEN+0x1a>
}

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 342:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <Open_Door>:
}
																			/* interaction with computer vision */
// when USART module receive 1 the interrupt will excute this function
void Open_Door(void){
	// Example: Move servo to 90 degrees
	set_servo_angle(180);
 34a:	84 eb       	ldi	r24, 0xB4	; 180
 34c:	02 d3       	rcall	.+1540   	; 0x952 <set_servo_angle>
 34e:	08 95       	ret

00000350 <Initialize>:
}
			
																		/* Initialize all Modules and devices */
void Initialize (void){
	// Internal peripherals
	status = PWM_Init(&PWM);			// Lighting control and fan motor using PWM with timer1			
 350:	85 e9       	ldi	r24, 0x95	; 149
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	c6 d2       	rcall	.+1420   	; 0x8e2 <PWM_Init>
 356:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	PWM_init_Timer2();					// servo motor using PWM with timer2
 35a:	f3 d2       	rcall	.+1510   	; 0x942 <PWM_init_Timer2>
	status = ADC_Initialize(&adc);		// temperature and lighting sensor using ADC
 35c:	87 e9       	ldi	r24, 0x97	; 151
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	39 d1       	rcall	.+626    	; 0x5d4 <ADC_Initialize>
 362:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	USART_Init(&usart);						// communicate with virtual terminal 
 366:	81 e9       	ldi	r24, 0x91	; 145
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	fd d2       	rcall	.+1530   	; 0x966 <USART_Init>
	// External interrrupt
	status = INTx_Initialize(&PIR_Sensor);		// motion sensor using external interrrupt(INT)
 36c:	8b e8       	ldi	r24, 0x8B	; 139
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	50 d2       	rcall	.+1184   	; 0x812 <INTx_Initialize>
 372:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	// output moduls
	status = RGB_LED_INIT(&rgb);				// RGB led init
 376:	84 e6       	ldi	r24, 0x64	; 100
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a9 df       	rcall	.-174    	; 0x2ce <RGB_LED_INIT>
 37c:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	status = Keypad_Init(&keypad__,password);	// Keypad init 
 380:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <password>
 384:	70 91 9b 00 	lds	r23, 0x009B	; 0x80009b <password+0x1>
 388:	8d e6       	ldi	r24, 0x6D	; 109
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	7c de       	rcall	.-776    	; 0x86 <Keypad_Init>
 38e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	status = Buzzer_INIT(&buzzer_);				// Buzzer init
 392:	80 e6       	ldi	r24, 0x60	; 96
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	63 de       	rcall	.-826    	; 0x5e <Buzzer_INIT>
 398:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
																					
	// intialize the status of the fan and lighing
	PWM_Write(FAN_STOP,motor_en);				// make motor off at begin
 39c:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	c4 d2       	rcall	.+1416   	; 0x92e <PWM_Write>
	PWM_Write(0,lighting_led);					// make light off at begin
 3a6:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <lighting_led>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	bf d2       	rcall	.+1406   	; 0x92e <PWM_Write>
	set_servo_angle(90);						// make servo at zero angle 
 3b0:	8a e5       	ldi	r24, 0x5A	; 90
 3b2:	cf d2       	rcall	.+1438   	; 0x952 <set_servo_angle>
 3b4:	08 95       	ret

000003b6 <Close_Door>:
	set_servo_angle(180);
}

void Close_Door(void){
	// Example: Move servo to 0 degrees
	set_servo_angle(90);
 3b6:	8a e5       	ldi	r24, 0x5A	; 90
 3b8:	cc d2       	rcall	.+1432   	; 0x952 <set_servo_angle>
 3ba:	08 95       	ret

000003bc <wholeProject>:
	return 0 ;
}

void wholeProject(void){
	// computer vision part
	if (cam_status == Face_Detected){
 3bc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <cam_status>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <wholeProject+0x20>
		if(door == Door_closed){
 3c4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <door>
 3c8:	81 11       	cpse	r24, r1
 3ca:	46 c0       	rjmp	.+140    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			USART_SendStr("\n\rDoor is opened using Face Detection\n\r");
 3cc:	8a eb       	ldi	r24, 0xBA	; 186
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	e4 d2       	rcall	.+1480   	; 0x99a <USART_SendStr>
			Open_Door();
 3d2:	bb df       	rcall	.-138    	; 0x34a <Open_Door>
			door = Door_opened ;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <door>
 3da:	08 95       	ret
		}
	}	
	else if (cam_status == Face_Not_Detected) {
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	99 f5       	brne	.+102    	; 0x446 <__DATA_REGION_LENGTH__+0x46>
		if(door == Door_closed){
 3e0:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <door>
 3e4:	81 11       	cpse	r24, r1
 3e6:	38 c0       	rjmp	.+112    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			USART_SendStr("\n\rYou are not in the data base. please enter the password on keypad\n\r");
 3e8:	82 ee       	ldi	r24, 0xE2	; 226
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	d6 d2       	rcall	.+1452   	; 0x99a <USART_SendStr>
			while(!IsPassTrue){
 3ee:	24 c0       	rjmp	.+72     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
				status = Keypad_Get_Check_Password(&keypad__,&EnterPass,&IsPassTrue,&cam_status);
 3f0:	2d ec       	ldi	r18, 0xCD	; 205
 3f2:	31 e0       	ldi	r19, 0x01	; 1
 3f4:	4c ec       	ldi	r20, 0xCC	; 204
 3f6:	51 e0       	ldi	r21, 0x01	; 1
 3f8:	66 ed       	ldi	r22, 0xD6	; 214
 3fa:	71 e0       	ldi	r23, 0x01	; 1
 3fc:	8d e6       	ldi	r24, 0x6D	; 109
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	10 df       	rcall	.-480    	; 0x222 <Keypad_Get_Check_Password>
 402:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
				if(IsPassTrue){
 406:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <IsPassTrue>
 40a:	88 23       	and	r24, r24
 40c:	69 f0       	breq	.+26     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
					USART_SendStr("\n\rDoor is opened using password\n\r");
 40e:	88 e2       	ldi	r24, 0x28	; 40
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	c3 d2       	rcall	.+1414   	; 0x99a <USART_SendStr>
					status = Buzzer_Stop(&buzzer_);
 414:	80 e6       	ldi	r24, 0x60	; 96
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	2f de       	rcall	.-930    	; 0x78 <Buzzer_Stop>
 41a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
					door = Door_opened ;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <door>
					Open_Door();
 424:	92 df       	rcall	.-220    	; 0x34a <Open_Door>
 426:	08 c0       	rjmp	.+16     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
				}
				else {
					USART_SendStr("\n\rpassword is not True .Please Try again\n\r");
 428:	8a e4       	ldi	r24, 0x4A	; 74
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	b6 d2       	rcall	.+1388   	; 0x99a <USART_SendStr>
					status = Buzzer_Play(&buzzer_);
 42e:	80 e6       	ldi	r24, 0x60	; 96
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	1b de       	rcall	.-970    	; 0x6a <Buzzer_Play>
 434:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
		}
	}	
	else if (cam_status == Face_Not_Detected) {
		if(door == Door_closed){
			USART_SendStr("\n\rYou are not in the data base. please enter the password on keypad\n\r");
			while(!IsPassTrue){
 438:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <IsPassTrue>
 43c:	88 23       	and	r24, r24
 43e:	c1 f2       	breq	.-80     	; 0x3f0 <wholeProject+0x34>
					USART_SendStr("\n\rpassword is not True .Please Try again\n\r");
					status = Buzzer_Play(&buzzer_);
				}
			}
			
			IsPassTrue = False ;
 440:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <IsPassTrue>
 444:	08 95       	ret
		}
	}
	else if (cam_status == No_one )
 446:	81 11       	cpse	r24, r1
 448:	07 c0       	rjmp	.+14     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
	{
		if(door == Door_opened){
 44a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <door>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	19 f4       	brne	.+6      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			door = Door_closed;
 452:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <door>
			Close_Door();
 456:	af df       	rcall	.-162    	; 0x3b6 <Close_Door>
 458:	08 95       	ret

0000045a <main>:
#include "main.h"

uint8 var ;
int main(void)
{
	Initialize();
 45a:	7a df       	rcall	.-268    	; 0x350 <Initialize>
	USART_SendStr("Welcome\n\r");
 45c:	85 e7       	ldi	r24, 0x75	; 117
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	9c d2       	rcall	.+1336   	; 0x99a <USART_SendStr>
    while (1) 
    {	
		wholeProject();
 462:	ac df       	rcall	.-168    	; 0x3bc <wholeProject>
 464:	fe cf       	rjmp	.-4      	; 0x462 <__stack+0x3>

00000466 <Temperature>:
	set_servo_angle(90);
}
																	/* sense temperature and make an action according to it */
void Temperature(void){
	// sense the temperature of the room
	status = ADC_Read(temp_sensor,&LD35DZ_Reading);
 466:	61 ee       	ldi	r22, 0xE1	; 225
 468:	71 e0       	ldi	r23, 0x01	; 1
 46a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <temp_sensor>
 46e:	ce d0       	rcall	.+412    	; 0x60c <ADC_Read>
 470:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	// Convert the ADC value to temperature in degrees Celsius.
	TMP = (uint16)(round((LD35DZ_Reading * 5.0/1023.0 - 0.5)*100));	// for tmp36
 474:	60 91 e1 01 	lds	r22, 0x01E1	; 0x8001e1 <LD35DZ_Reading>
 478:	70 91 e2 01 	lds	r23, 0x01E2	; 0x8001e2 <LD35DZ_Reading+0x1>
 47c:	07 2e       	mov	r0, r23
 47e:	00 0c       	add	r0, r0
 480:	88 0b       	sbc	r24, r24
 482:	99 0b       	sbc	r25, r25
 484:	bb d3       	rcall	.+1910   	; 0xbfc <__floatsisf>
 486:	20 e0       	ldi	r18, 0x00	; 0
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	40 ea       	ldi	r20, 0xA0	; 160
 48c:	50 e4       	ldi	r21, 0x40	; 64
 48e:	42 d4       	rcall	.+2180   	; 0xd14 <__mulsf3>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 ec       	ldi	r19, 0xC0	; 192
 494:	4f e7       	ldi	r20, 0x7F	; 127
 496:	54 e4       	ldi	r21, 0x44	; 68
 498:	1b d3       	rcall	.+1590   	; 0xad0 <__divsf3>
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	5f e3       	ldi	r21, 0x3F	; 63
 4a2:	b1 d2       	rcall	.+1378   	; 0xa06 <__subsf3>
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	48 ec       	ldi	r20, 0xC8	; 200
 4aa:	52 e4       	ldi	r21, 0x42	; 66
 4ac:	33 d4       	rcall	.+2150   	; 0xd14 <__mulsf3>
 4ae:	95 d4       	rcall	.+2346   	; 0xdda <round>
 4b0:	77 d3       	rcall	.+1774   	; 0xba0 <__fixunssfsi>
 4b2:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <TMP+0x1>
 4b6:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <TMP>
	//TMP = (uint16)(round((LD35DZ_Reading * 5.0/1023.0 )*100));			// for ld35dz
	
	// choose the suitable state
	if(TMP < 20 ){
 4ba:	64 31       	cpi	r22, 0x14	; 20
 4bc:	71 05       	cpc	r23, r1
 4be:	7c f4       	brge	.+30     	; 0x4de <Temperature+0x78>
		motor_speed =  FAN_STOP ;
 4c0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <motor_speed+0x1>
 4c4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 4c8:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2e d2       	rcall	.+1116   	; 0x92e <PWM_Write>
		status = RGB_LED_BLUE(&rgb);
 4d2:	84 e6       	ldi	r24, 0x64	; 100
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	19 df       	rcall	.-462    	; 0x30a <RGB_LED_BLUE>
 4d8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 4dc:	08 95       	ret
	}
	else if(TMP >= 20 && TMP <=30) {
 4de:	ab 01       	movw	r20, r22
 4e0:	44 51       	subi	r20, 0x14	; 20
 4e2:	51 09       	sbc	r21, r1
 4e4:	4b 30       	cpi	r20, 0x0B	; 11
 4e6:	51 05       	cpc	r21, r1
 4e8:	48 f5       	brcc	.+82     	; 0x53c <Temperature+0xd6>
		motor_speed = (uint16)(round(512 + (TMP-20) * 511/10.0) );
 4ea:	2f ef       	ldi	r18, 0xFF	; 255
 4ec:	31 e0       	ldi	r19, 0x01	; 1
 4ee:	42 9f       	mul	r20, r18
 4f0:	c0 01       	movw	r24, r0
 4f2:	43 9f       	mul	r20, r19
 4f4:	90 0d       	add	r25, r0
 4f6:	52 9f       	mul	r21, r18
 4f8:	90 0d       	add	r25, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	bc 01       	movw	r22, r24
 4fe:	99 0f       	add	r25, r25
 500:	88 0b       	sbc	r24, r24
 502:	99 0b       	sbc	r25, r25
 504:	7b d3       	rcall	.+1782   	; 0xbfc <__floatsisf>
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	40 e2       	ldi	r20, 0x20	; 32
 50c:	51 e4       	ldi	r21, 0x41	; 65
 50e:	e0 d2       	rcall	.+1472   	; 0xad0 <__divsf3>
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	54 e4       	ldi	r21, 0x44	; 68
 518:	77 d2       	rcall	.+1262   	; 0xa08 <__addsf3>
 51a:	5f d4       	rcall	.+2238   	; 0xdda <round>
 51c:	41 d3       	rcall	.+1666   	; 0xba0 <__fixunssfsi>
 51e:	dc 01       	movw	r26, r24
 520:	cb 01       	movw	r24, r22
 522:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <motor_speed+0x1>
 526:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 52a:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 52e:	ff d1       	rcall	.+1022   	; 0x92e <PWM_Write>
		status = RGB_LED_GREEN(&rgb);
 530:	84 e6       	ldi	r24, 0x64	; 100
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fa de       	rcall	.-524    	; 0x32a <RGB_LED_GREEN>
 536:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 53a:	08 95       	ret
	}
	else if(TMP > 30){
 53c:	6f 31       	cpi	r22, 0x1F	; 31
 53e:	71 05       	cpc	r23, r1
 540:	74 f0       	brlt	.+28     	; 0x55e <Temperature+0xf8>
		motor_speed = FAN_MAX_SPEED ;
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	93 e0       	ldi	r25, 0x03	; 3
 546:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <motor_speed+0x1>
 54a:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 54e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 552:	ed d1       	rcall	.+986    	; 0x92e <PWM_Write>
		status = RGB_LED_RED(&rgb);
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	c8 de       	rcall	.-624    	; 0x2ea <RGB_LED_RED>
 55a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
 55e:	08 95       	ret

00000560 <Lighting>:
}

																			/* sense the lighing and make an action according to it */
void Lighting(void) {
	// Read lighting sensor ADC value and convert it to a percentage (0-100%) based on a 403 max value.
	status = ADC_Read(lighting_sensor,&LDR_Reading);
 560:	6b ed       	ldi	r22, 0xDB	; 219
 562:	71 e0       	ldi	r23, 0x01	; 1
 564:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <lighting_sensor>
 568:	51 d0       	rcall	.+162    	; 0x60c <ADC_Read>
 56a:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <status>
	led_brightness = 1023 - LDR_Reading ;
 56e:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <LDR_Reading>
 572:	30 91 dc 01 	lds	r19, 0x01DC	; 0x8001dc <LDR_Reading+0x1>
 576:	8f ef       	ldi	r24, 0xFF	; 255
 578:	93 e0       	ldi	r25, 0x03	; 3
 57a:	82 1b       	sub	r24, r18
 57c:	93 0b       	sbc	r25, r19
 57e:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <led_brightness+0x1>
 582:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <led_brightness>
	PWM_Write(led_brightness,lighting_led);
 586:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <lighting_led>
 58a:	d1 d1       	rcall	.+930    	; 0x92e <PWM_Write>
	Light = (uint16)(100 - round(LDR_Reading * 100.0/1023.0));
 58c:	60 91 db 01 	lds	r22, 0x01DB	; 0x8001db <LDR_Reading>
 590:	70 91 dc 01 	lds	r23, 0x01DC	; 0x8001dc <LDR_Reading+0x1>
 594:	07 2e       	mov	r0, r23
 596:	00 0c       	add	r0, r0
 598:	88 0b       	sbc	r24, r24
 59a:	99 0b       	sbc	r25, r25
 59c:	2f d3       	rcall	.+1630   	; 0xbfc <__floatsisf>
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	48 ec       	ldi	r20, 0xC8	; 200
 5a4:	52 e4       	ldi	r21, 0x42	; 66
 5a6:	b6 d3       	rcall	.+1900   	; 0xd14 <__mulsf3>
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 ec       	ldi	r19, 0xC0	; 192
 5ac:	4f e7       	ldi	r20, 0x7F	; 127
 5ae:	54 e4       	ldi	r21, 0x44	; 68
 5b0:	8f d2       	rcall	.+1310   	; 0xad0 <__divsf3>
 5b2:	13 d4       	rcall	.+2086   	; 0xdda <round>
 5b4:	9b 01       	movw	r18, r22
 5b6:	ac 01       	movw	r20, r24
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	88 ec       	ldi	r24, 0xC8	; 200
 5be:	92 e4       	ldi	r25, 0x42	; 66
 5c0:	22 d2       	rcall	.+1092   	; 0xa06 <__subsf3>
 5c2:	ee d2       	rcall	.+1500   	; 0xba0 <__fixunssfsi>
 5c4:	70 93 de 01 	sts	0x01DE, r23	; 0x8001de <Light+0x1>
 5c8:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <Light>
 5cc:	08 95       	ret

000005ce <PIR_Sense>:

																					/* take the reading from the sensors  and make an action */

// INT0 : if PIR sense any motion it will set flag and enable the other sensors
void PIR_Sense(void){
	Temperature();
 5ce:	4b df       	rcall	.-362    	; 0x466 <Temperature>
	Lighting();
 5d0:	c7 df       	rcall	.-114    	; 0x560 <Lighting>
 5d2:	08 95       	ret

000005d4 <ADC_Initialize>:
	else {
		// Disable ADC Module
		ADC_DISABLE();
	}
	return status ;
}
 5d4:	fc 01       	movw	r30, r24
 5d6:	89 2b       	or	r24, r25
 5d8:	b9 f0       	breq	.+46     	; 0x608 <ADC_Initialize+0x34>
 5da:	86 b1       	in	r24, 0x06	; 6
 5dc:	8f 77       	andi	r24, 0x7F	; 127
 5de:	86 b9       	out	0x06, r24	; 6
 5e0:	87 b1       	in	r24, 0x07	; 7
 5e2:	90 81       	ld	r25, Z
 5e4:	40 e4       	ldi	r20, 0x40	; 64
 5e6:	94 9f       	mul	r25, r20
 5e8:	90 01       	movw	r18, r0
 5ea:	11 24       	eor	r1, r1
 5ec:	8f 73       	andi	r24, 0x3F	; 63
 5ee:	28 2b       	or	r18, r24
 5f0:	27 b9       	out	0x07, r18	; 7
 5f2:	96 b1       	in	r25, 0x06	; 6
 5f4:	81 81       	ldd	r24, Z+1	; 0x01
 5f6:	98 7f       	andi	r25, 0xF8	; 248
 5f8:	87 70       	andi	r24, 0x07	; 7
 5fa:	89 2b       	or	r24, r25
 5fc:	86 b9       	out	0x06, r24	; 6
 5fe:	86 b1       	in	r24, 0x06	; 6
 600:	80 68       	ori	r24, 0x80	; 128
 602:	86 b9       	out	0x06, r24	; 6
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	08 95       	ret
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret

0000060c <ADC_Read>:

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
	if(NULL == data)
 60c:	61 15       	cp	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	89 f0       	breq	.+34     	; 0x634 <ADC_Read+0x28>
	{
		status = RET_NOT_OK;
	}
	else {
		// Configure the required pin as analog input
		ADCx_SELECT_PIN(channal);
 612:	97 b1       	in	r25, 0x07	; 7
 614:	90 7f       	andi	r25, 0xF0	; 240
 616:	8f 70       	andi	r24, 0x0F	; 15
 618:	89 2b       	or	r24, r25
 61a:	87 b9       	out	0x07, r24	; 7
		// Start Conversion
		ADC_START_CONVERSION();
 61c:	86 b1       	in	r24, 0x06	; 6
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	86 b9       	out	0x06, r24	; 6
		// wait 
		while(ADCSRA & (1 << BIT6));
 622:	36 99       	sbic	0x06, 6	; 6
 624:	fe cf       	rjmp	.-4      	; 0x622 <ADC_Read+0x16>
		// get the reading
		*data = ADC;
 626:	84 b1       	in	r24, 0x04	; 4
 628:	95 b1       	in	r25, 0x05	; 5
 62a:	fb 01       	movw	r30, r22
 62c:	91 83       	std	Z+1, r25	; 0x01
 62e:	80 83       	st	Z, r24
	}
	return status ;
}

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret
	if(NULL == data)
	{
		status = RET_NOT_OK;
 634:	80 e0       	ldi	r24, 0x00	; 0
		while(ADCSRA & (1 << BIT6));
		// get the reading
		*data = ADC;
	}
	return status ;
}
 636:	08 95       	ret

00000638 <GPIO_PIN_Write_logic>:
	}
	else{
		TOGGLE_BIN(*PORT_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	e9 f1       	breq	.+122    	; 0x6b6 <GPIO_PIN_Write_logic+0x7e>
 63c:	61 11       	cpse	r22, r1
 63e:	1d c0       	rjmp	.+58     	; 0x67a <GPIO_PIN_Write_logic+0x42>
 640:	dc 01       	movw	r26, r24
 642:	12 96       	adiw	r26, 0x02	; 2
 644:	ec 91       	ld	r30, X
 646:	12 97       	sbiw	r26, 0x02	; 2
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	ee 0f       	add	r30, r30
 64c:	ff 1f       	adc	r31, r31
 64e:	e8 55       	subi	r30, 0x58	; 88
 650:	ff 4f       	sbci	r31, 0xFF	; 255
 652:	01 90       	ld	r0, Z+
 654:	f0 81       	ld	r31, Z
 656:	e0 2d       	mov	r30, r0
 658:	40 81       	ld	r20, Z
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	13 96       	adiw	r26, 0x03	; 3
 662:	0c 90       	ld	r0, X
 664:	02 c0       	rjmp	.+4      	; 0x66a <GPIO_PIN_Write_logic+0x32>
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	0a 94       	dec	r0
 66c:	e2 f7       	brpl	.-8      	; 0x666 <GPIO_PIN_Write_logic+0x2e>
 66e:	cb 01       	movw	r24, r22
 670:	80 95       	com	r24
 672:	84 23       	and	r24, r20
 674:	80 83       	st	Z, r24
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret
 67a:	61 30       	cpi	r22, 0x01	; 1
 67c:	f1 f4       	brne	.+60     	; 0x6ba <GPIO_PIN_Write_logic+0x82>
 67e:	dc 01       	movw	r26, r24
 680:	12 96       	adiw	r26, 0x02	; 2
 682:	ec 91       	ld	r30, X
 684:	12 97       	sbiw	r26, 0x02	; 2
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e8 55       	subi	r30, 0x58	; 88
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	01 90       	ld	r0, Z+
 692:	f0 81       	ld	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	40 81       	ld	r20, Z
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	13 96       	adiw	r26, 0x03	; 3
 6a0:	0c 90       	ld	r0, X
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <GPIO_PIN_Write_logic+0x70>
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	0a 94       	dec	r0
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <GPIO_PIN_Write_logic+0x6c>
 6ac:	cb 01       	movw	r24, r22
 6ae:	84 2b       	or	r24, r20
 6b0:	80 83       	st	Z, r24
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	08 95       	ret

000006be <GPIO_PIN_Read_Logic>:

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin || NULL == _logic){
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	f9 f0       	breq	.+62     	; 0x700 <GPIO_PIN_Read_Logic+0x42>
 6c2:	61 15       	cp	r22, r1
 6c4:	71 05       	cpc	r23, r1
 6c6:	f1 f0       	breq	.+60     	; 0x704 <GPIO_PIN_Read_Logic+0x46>
		Ret = RET_NOT_OK ;
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
 6c8:	dc 01       	movw	r26, r24
 6ca:	12 96       	adiw	r26, 0x02	; 2
 6cc:	ec 91       	ld	r30, X
 6ce:	12 97       	sbiw	r26, 0x02	; 2
 6d0:	f0 e0       	ldi	r31, 0x00	; 0
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	e4 56       	subi	r30, 0x64	; 100
 6d8:	ff 4f       	sbci	r31, 0xFF	; 255
 6da:	01 90       	ld	r0, Z+
 6dc:	f0 81       	ld	r31, Z
 6de:	e0 2d       	mov	r30, r0
 6e0:	20 81       	ld	r18, Z
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	f9 01       	movw	r30, r18
 6e6:	13 96       	adiw	r26, 0x03	; 3
 6e8:	0c 90       	ld	r0, X
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <GPIO_PIN_Read_Logic+0x32>
 6ec:	f5 95       	asr	r31
 6ee:	e7 95       	ror	r30
 6f0:	0a 94       	dec	r0
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <GPIO_PIN_Read_Logic+0x2e>
 6f4:	cf 01       	movw	r24, r30
 6f6:	81 70       	andi	r24, 0x01	; 1
 6f8:	db 01       	movw	r26, r22
 6fa:	8c 93       	st	X, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	08 95       	ret
	if(NULL == _pin || NULL == _logic){
		Ret = RET_NOT_OK ;
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	08 95       	ret
 704:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 706:	08 95       	ret

00000708 <GPIO_PIN_Give_Direction>:

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	e9 f1       	breq	.+122    	; 0x786 <GPIO_PIN_Give_Direction+0x7e>
		Ret = RET_NOT_OK ;
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
 70c:	61 30       	cpi	r22, 0x01	; 1
 70e:	e1 f4       	brne	.+56     	; 0x748 <GPIO_PIN_Give_Direction+0x40>
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
 710:	dc 01       	movw	r26, r24
 712:	12 96       	adiw	r26, 0x02	; 2
 714:	ec 91       	ld	r30, X
 716:	12 97       	sbiw	r26, 0x02	; 2
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	ee 0f       	add	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	ee 55       	subi	r30, 0x5E	; 94
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	01 90       	ld	r0, Z+
 724:	f0 81       	ld	r31, Z
 726:	e0 2d       	mov	r30, r0
 728:	40 81       	ld	r20, Z
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	b9 01       	movw	r22, r18
 730:	13 96       	adiw	r26, 0x03	; 3
 732:	0c 90       	ld	r0, X
 734:	02 c0       	rjmp	.+4      	; 0x73a <GPIO_PIN_Give_Direction+0x32>
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <GPIO_PIN_Give_Direction+0x2e>
 73e:	cb 01       	movw	r24, r22
 740:	84 2b       	or	r24, r20
 742:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	08 95       	ret
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
		}
		else if (GPIO_PIN_INPUT  ==  _direction){
 748:	61 11       	cpse	r22, r1
 74a:	1f c0       	rjmp	.+62     	; 0x78a <GPIO_PIN_Give_Direction+0x82>
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
 74c:	dc 01       	movw	r26, r24
 74e:	12 96       	adiw	r26, 0x02	; 2
 750:	ec 91       	ld	r30, X
 752:	12 97       	sbiw	r26, 0x02	; 2
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	ee 0f       	add	r30, r30
 758:	ff 1f       	adc	r31, r31
 75a:	ee 55       	subi	r30, 0x5E	; 94
 75c:	ff 4f       	sbci	r31, 0xFF	; 255
 75e:	01 90       	ld	r0, Z+
 760:	f0 81       	ld	r31, Z
 762:	e0 2d       	mov	r30, r0
 764:	40 81       	ld	r20, Z
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	b9 01       	movw	r22, r18
 76c:	13 96       	adiw	r26, 0x03	; 3
 76e:	0c 90       	ld	r0, X
 770:	02 c0       	rjmp	.+4      	; 0x776 <GPIO_PIN_Give_Direction+0x6e>
 772:	66 0f       	add	r22, r22
 774:	77 1f       	adc	r23, r23
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <GPIO_PIN_Give_Direction+0x6a>
 77a:	cb 01       	movw	r24, r22
 77c:	80 95       	com	r24
 77e:	84 23       	and	r24, r20
 780:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	08 95       	ret
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 78a:	81 e0       	ldi	r24, 0x01	; 1
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
		}
		else {/*nothing*/}
	}
	return Ret ;
}
 78c:	08 95       	ret

0000078e <GPIO_PIN_Initialize>:
#include "GPIO.h"
volatile uint8 *PORT_REG[] = { &PORTB, &PORTC, &PORTD };
volatile uint8 *DDR_REG[] = { &DDRB, &DDRC, &DDRD };
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 792:	00 97       	sbiw	r24, 0x00	; 0
 794:	39 f0       	breq	.+14     	; 0x7a4 <GPIO_PIN_Initialize+0x16>
 796:	ec 01       	movw	r28, r24
		Ret = RET_NOT_OK ;
	}
	else{
		/*Direction Initialization */
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
 798:	69 81       	ldd	r22, Y+1	; 0x01
 79a:	b6 df       	rcall	.-148    	; 0x708 <GPIO_PIN_Give_Direction>
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
 79c:	68 81       	ld	r22, Y
 79e:	ce 01       	movw	r24, r28
 7a0:	4b df       	rcall	.-362    	; 0x638 <GPIO_PIN_Write_logic>
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <GPIO_PIN_Initialize+0x18>
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
	}
	return Ret ;
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	08 95       	ret

000007ac <INT0_Init>:
		else{
			/*nothing*/
		}
	}
	return status ;
}
 7ac:	fc 01       	movw	r30, r24
 7ae:	9b b7       	in	r25, 0x3b	; 59
 7b0:	9f 7b       	andi	r25, 0xBF	; 191
 7b2:	9b bf       	out	0x3b, r25	; 59
 7b4:	91 b3       	in	r25, 0x11	; 17
 7b6:	9b 7f       	andi	r25, 0xFB	; 251
 7b8:	91 bb       	out	0x11, r25	; 17
 7ba:	95 b7       	in	r25, 0x35	; 53
 7bc:	23 81       	ldd	r18, Z+3	; 0x03
 7be:	9c 7f       	andi	r25, 0xFC	; 252
 7c0:	92 2b       	or	r25, r18
 7c2:	95 bf       	out	0x35, r25	; 53
 7c4:	80 81       	ld	r24, Z
 7c6:	91 81       	ldd	r25, Z+1	; 0x01
 7c8:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <INT0_InterruptHandler+0x1>
 7cc:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <INT0_InterruptHandler>
 7d0:	8b b7       	in	r24, 0x3b	; 59
 7d2:	80 64       	ori	r24, 0x40	; 64
 7d4:	8b bf       	out	0x3b, r24	; 59
 7d6:	08 95       	ret

000007d8 <INT1_Init>:
 7d8:	fc 01       	movw	r30, r24
 7da:	9b b7       	in	r25, 0x3b	; 59
 7dc:	9f 77       	andi	r25, 0x7F	; 127
 7de:	9b bf       	out	0x3b, r25	; 59
 7e0:	91 b3       	in	r25, 0x11	; 17
 7e2:	97 7f       	andi	r25, 0xF7	; 247
 7e4:	91 bb       	out	0x11, r25	; 17
 7e6:	45 b7       	in	r20, 0x35	; 53
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	29 2f       	mov	r18, r25
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	22 0f       	add	r18, r18
 7f0:	33 1f       	adc	r19, r19
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	94 2f       	mov	r25, r20
 7f8:	93 7f       	andi	r25, 0xF3	; 243
 7fa:	29 2b       	or	r18, r25
 7fc:	25 bf       	out	0x35, r18	; 53
 7fe:	80 81       	ld	r24, Z
 800:	91 81       	ldd	r25, Z+1	; 0x01
 802:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <INT1_InterruptHandler+0x1>
 806:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <INT1_InterruptHandler>
 80a:	8b b7       	in	r24, 0x3b	; 59
 80c:	80 68       	ori	r24, 0x80	; 128
 80e:	8b bf       	out	0x3b, r24	; 59
 810:	08 95       	ret

00000812 <INTx_Initialize>:
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	61 f0       	breq	.+24     	; 0x82e <INTx_Initialize+0x1c>
 816:	fc 01       	movw	r30, r24
 818:	22 81       	ldd	r18, Z+2	; 0x02
 81a:	21 11       	cpse	r18, r1
 81c:	02 c0       	rjmp	.+4      	; 0x822 <INTx_Initialize+0x10>
 81e:	c6 df       	rcall	.-116    	; 0x7ac <INT0_Init>
 820:	03 c0       	rjmp	.+6      	; 0x828 <INTx_Initialize+0x16>
 822:	21 30       	cpi	r18, 0x01	; 1
 824:	09 f4       	brne	.+2      	; 0x828 <INTx_Initialize+0x16>
 826:	d8 df       	rcall	.-80     	; 0x7d8 <INT1_Init>
 828:	78 94       	sei
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	08 95       	ret
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	08 95       	ret

00000832 <__vector_1>:
	INT1_INTERRUPT_DISABLE();
}


/*-------------------------------------ISR Function-----------------------------------------*/
ISR(INT0_vect){
 832:	1f 92       	push	r1
 834:	0f 92       	push	r0
 836:	0f b6       	in	r0, 0x3f	; 63
 838:	0f 92       	push	r0
 83a:	11 24       	eor	r1, r1
 83c:	2f 93       	push	r18
 83e:	3f 93       	push	r19
 840:	4f 93       	push	r20
 842:	5f 93       	push	r21
 844:	6f 93       	push	r22
 846:	7f 93       	push	r23
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
 850:	ef 93       	push	r30
 852:	ff 93       	push	r31
	INT0_CLEAR_FLAG();
 854:	8a b7       	in	r24, 0x3a	; 58
 856:	8f 7b       	andi	r24, 0xBF	; 191
 858:	8a bf       	out	0x3a, r24	; 58
	
	if(INT0_InterruptHandler){
 85a:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <INT0_InterruptHandler>
 85e:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <INT0_InterruptHandler+0x1>
 862:	30 97       	sbiw	r30, 0x00	; 0
 864:	09 f0       	breq	.+2      	; 0x868 <__vector_1+0x36>
		INT0_InterruptHandler();
 866:	09 95       	icall
	}
}
 868:	ff 91       	pop	r31
 86a:	ef 91       	pop	r30
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti

0000088a <__vector_2>:

ISR(INT1_vect){
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	11 24       	eor	r1, r1
 894:	2f 93       	push	r18
 896:	3f 93       	push	r19
 898:	4f 93       	push	r20
 89a:	5f 93       	push	r21
 89c:	6f 93       	push	r22
 89e:	7f 93       	push	r23
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	af 93       	push	r26
 8a6:	bf 93       	push	r27
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
	INT1_CLEAR_FLAG();
 8ac:	8a b7       	in	r24, 0x3a	; 58
 8ae:	8f 77       	andi	r24, 0x7F	; 127
 8b0:	8a bf       	out	0x3a, r24	; 58
	
	if(INT1_InterruptHandler){
 8b2:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <INT1_InterruptHandler>
 8b6:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <INT1_InterruptHandler+0x1>
 8ba:	30 97       	sbiw	r30, 0x00	; 0
 8bc:	09 f0       	breq	.+2      	; 0x8c0 <__vector_2+0x36>
		INT1_InterruptHandler();
 8be:	09 95       	icall
	}
}
 8c0:	ff 91       	pop	r31
 8c2:	ef 91       	pop	r30
 8c4:	bf 91       	pop	r27
 8c6:	af 91       	pop	r26
 8c8:	9f 91       	pop	r25
 8ca:	8f 91       	pop	r24
 8cc:	7f 91       	pop	r23
 8ce:	6f 91       	pop	r22
 8d0:	5f 91       	pop	r21
 8d2:	4f 91       	pop	r20
 8d4:	3f 91       	pop	r19
 8d6:	2f 91       	pop	r18
 8d8:	0f 90       	pop	r0
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	0f 90       	pop	r0
 8de:	1f 90       	pop	r1
 8e0:	18 95       	reti

000008e2 <PWM_Init>:
 *  Author: mo ali
 */ 

#include "PWM_Timer1.h"

STD_ReturnType PWM_Init(const PWM_CONFIG *pwm_obj){
 8e2:	fc 01       	movw	r30, r24
	STD_ReturnType status = RET_OK;
	if (NULL == pwm_obj){
 8e4:	89 2b       	or	r24, r25
 8e6:	09 f1       	breq	.+66     	; 0x92a <PWM_Init+0x48>
		status = RET_NOT_OK;
	}
	else {
		// configure OC1A and OC1B as output pins
		SET_BIN(DDRB , BIT1); // OC1A
 8e8:	97 b3       	in	r25, 0x17	; 23
 8ea:	92 60       	ori	r25, 0x02	; 2
 8ec:	97 bb       	out	0x17, r25	; 23
		SET_BIN(DDRB , BIT2); // OC1B
 8ee:	97 b3       	in	r25, 0x17	; 23
 8f0:	94 60       	ori	r25, 0x04	; 4
 8f2:	97 bb       	out	0x17, r25	; 23
		
		// select fast PWM mode
		TCCR1B = (1 << WGM12);
 8f4:	88 e0       	ldi	r24, 0x08	; 8
 8f6:	8e bd       	out	0x2e, r24	; 46
		TCCR1A = (1 << WGM11)  | (1 << WGM10);
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	8f bd       	out	0x2f, r24	; 47
		
		PWM_SELECT_PWM_PIN_OC1A(0x02);
 8fc:	9f b5       	in	r25, 0x2f	; 47
 8fe:	9f 73       	andi	r25, 0x3F	; 63
 900:	90 68       	ori	r25, 0x80	; 128
 902:	9f bd       	out	0x2f, r25	; 47
		PWM_SELECT_PWM_PIN_OC1B(0x02);
 904:	9f b5       	in	r25, 0x2f	; 47
 906:	9f 7c       	andi	r25, 0xCF	; 207
 908:	90 62       	ori	r25, 0x20	; 32
 90a:	9f bd       	out	0x2f, r25	; 47
		
		// select clock source 
		PWM_SELECT_CLOCK(pwm_obj->sel_clk);
 90c:	8e b5       	in	r24, 0x2e	; 46
 90e:	91 81       	ldd	r25, Z+1	; 0x01
 910:	87 7f       	andi	r24, 0xF7	; 247
 912:	89 2b       	or	r24, r25
 914:	8e bd       	out	0x2e, r24	; 46
		
		// Initialze duty cycle 
		PWM_SET_DUTY_CYCLE_OCR1A(1500);
 916:	8c ed       	ldi	r24, 0xDC	; 220
 918:	95 e0       	ldi	r25, 0x05	; 5
 91a:	9b bd       	out	0x2b, r25	; 43
 91c:	8a bd       	out	0x2a, r24	; 42
		PWM_SET_DUTY_CYCLE_OCR1B(1000);
 91e:	88 ee       	ldi	r24, 0xE8	; 232
 920:	93 e0       	ldi	r25, 0x03	; 3
 922:	99 bd       	out	0x29, r25	; 41
 924:	88 bd       	out	0x28, r24	; 40
 */ 

#include "PWM_Timer1.h"

STD_ReturnType PWM_Init(const PWM_CONFIG *pwm_obj){
	STD_ReturnType status = RET_OK;
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	08 95       	ret
	if (NULL == pwm_obj){
		status = RET_NOT_OK;
 92a:	80 e0       	ldi	r24, 0x00	; 0
		// Initialze duty cycle 
		PWM_SET_DUTY_CYCLE_OCR1A(1500);
		PWM_SET_DUTY_CYCLE_OCR1B(1000);
	}
	return status ;
}
 92c:	08 95       	ret

0000092e <PWM_Write>:

void PWM_Write(uint16 dutyCycle,PWM_PIN _pin){
	if(_pin == PWM_PIN_OC1A){
 92e:	61 11       	cpse	r22, r1
 930:	03 c0       	rjmp	.+6      	; 0x938 <PWM_Write+0xa>
		PWM_SET_DUTY_CYCLE_OCR1A(dutyCycle);
 932:	9b bd       	out	0x2b, r25	; 43
 934:	8a bd       	out	0x2a, r24	; 42
 936:	08 95       	ret
	}
	else if(_pin == PWM_PIN_OC1B){
 938:	61 30       	cpi	r22, 0x01	; 1
 93a:	11 f4       	brne	.+4      	; 0x940 <PWM_Write+0x12>
		PWM_SET_DUTY_CYCLE_OCR1B(dutyCycle);
 93c:	99 bd       	out	0x29, r25	; 41
 93e:	88 bd       	out	0x28, r24	; 40
 940:	08 95       	ret

00000942 <PWM_init_Timer2>:
#include "PWM_Timer2.h"

void PWM_init_Timer2(void)
{
	// Set PB3 (OC2) as output
	DDRB |= (1 << PB3);
 942:	87 b3       	in	r24, 0x17	; 23
 944:	88 60       	ori	r24, 0x08	; 8
 946:	87 bb       	out	0x17, r24	; 23

	TCCR2 = (1 << WGM20) | (1 << WGM21) | (1 << COM21) | (1 << CS22);
 948:	8c e6       	ldi	r24, 0x6C	; 108
 94a:	85 bd       	out	0x25, r24	; 37

	// Initialize with a neutral position for the servo (~1.5ms pulse)
	OCR2 = 125;  // This gives approximately a 1.5ms pulse width (servo's neutral position)
 94c:	8d e7       	ldi	r24, 0x7D	; 125
 94e:	83 bd       	out	0x23, r24	; 35
 950:	08 95       	ret

00000952 <set_servo_angle>:
}

// Function to set the servo angle
void set_servo_angle(uint8 angle)
{
	uint8 duty_cycle = (125 + (angle * 125) / 180);
 952:	2d e7       	ldi	r18, 0x7D	; 125
 954:	82 9f       	mul	r24, r18
 956:	c0 01       	movw	r24, r0
 958:	11 24       	eor	r1, r1
 95a:	64 eb       	ldi	r22, 0xB4	; 180
 95c:	70 e0       	ldi	r23, 0x00	; 0
 95e:	86 d2       	rcall	.+1292   	; 0xe6c <__divmodhi4>
 960:	63 58       	subi	r22, 0x83	; 131
	
	OCR2 = duty_cycle;
 962:	63 bd       	out	0x23, r22	; 35
 964:	08 95       	ret

00000966 <USART_Init>:
	// Wait for data to be received (RXC flag set)
	while (!(UCSRA & (1 << RXC)));

	// Get and return received data from buffer
	return UDR;
}
 966:	10 bc       	out	0x20, r1	; 32
 968:	23 e3       	ldi	r18, 0x33	; 51
 96a:	29 b9       	out	0x09, r18	; 9
 96c:	28 e9       	ldi	r18, 0x98	; 152
 96e:	2a b9       	out	0x0a, r18	; 10
 970:	26 e8       	ldi	r18, 0x86	; 134
 972:	20 bd       	out	0x20, r18	; 32
 974:	fc 01       	movw	r30, r24
 976:	20 81       	ld	r18, Z
 978:	31 81       	ldd	r19, Z+1	; 0x01
 97a:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <interruptHandler+0x1>
 97e:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <interruptHandler>
 982:	82 81       	ldd	r24, Z+2	; 0x02
 984:	93 81       	ldd	r25, Z+3	; 0x03
 986:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <flag+0x1>
 98a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <flag>
 98e:	78 94       	sei
 990:	08 95       	ret

00000992 <USART_Trans>:
 992:	5d 9b       	sbis	0x0b, 5	; 11
 994:	fe cf       	rjmp	.-4      	; 0x992 <USART_Trans>
 996:	8c b9       	out	0x0c, r24	; 12
 998:	08 95       	ret

0000099a <USART_SendStr>:
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	ec 01       	movw	r28, r24
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <USART_SendStr+0xc>
 9a2:	21 96       	adiw	r28, 0x01	; 1
 9a4:	f6 df       	rcall	.-20     	; 0x992 <USART_Trans>
 9a6:	88 81       	ld	r24, Y
 9a8:	81 11       	cpse	r24, r1
 9aa:	fb cf       	rjmp	.-10     	; 0x9a2 <USART_SendStr+0x8>
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	08 95       	ret

000009b2 <__vector_11>:

ISR(USART_RXC_vect){
 9b2:	1f 92       	push	r1
 9b4:	0f 92       	push	r0
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	0f 92       	push	r0
 9ba:	11 24       	eor	r1, r1
 9bc:	8f 93       	push	r24
 9be:	ef 93       	push	r30
 9c0:	ff 93       	push	r31
	uint8 receive = UDR ;
 9c2:	8c b1       	in	r24, 0x0c	; 12
	if (receive == '0'){
 9c4:	80 33       	cpi	r24, 0x30	; 48
 9c6:	31 f4       	brne	.+12     	; 0x9d4 <__vector_11+0x22>
		*flag = No_one;
 9c8:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <flag>
 9cc:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <flag+0x1>
 9d0:	10 82       	st	Z, r1
 9d2:	11 c0       	rjmp	.+34     	; 0x9f6 <__vector_11+0x44>
	}
	else if(receive == '1') {
 9d4:	81 33       	cpi	r24, 0x31	; 49
 9d6:	39 f4       	brne	.+14     	; 0x9e6 <__vector_11+0x34>
		*flag = Face_Detected ;
 9d8:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <flag>
 9dc:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <flag+0x1>
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	80 83       	st	Z, r24
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <__vector_11+0x44>
	}
	else if (receive == '2' ){
 9e6:	82 33       	cpi	r24, 0x32	; 50
 9e8:	31 f4       	brne	.+12     	; 0x9f6 <__vector_11+0x44>
		*flag = Face_Not_Detected ;
 9ea:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <flag>
 9ee:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <flag+0x1>
 9f2:	82 e0       	ldi	r24, 0x02	; 2
 9f4:	80 83       	st	Z, r24
	}
 9f6:	ff 91       	pop	r31
 9f8:	ef 91       	pop	r30
 9fa:	8f 91       	pop	r24
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <__subsf3>:
 a06:	50 58       	subi	r21, 0x80	; 128

00000a08 <__addsf3>:
 a08:	bb 27       	eor	r27, r27
 a0a:	aa 27       	eor	r26, r26
 a0c:	0e d0       	rcall	.+28     	; 0xa2a <__addsf3x>
 a0e:	48 c1       	rjmp	.+656    	; 0xca0 <__fp_round>
 a10:	39 d1       	rcall	.+626    	; 0xc84 <__fp_pscA>
 a12:	30 f0       	brcs	.+12     	; 0xa20 <__addsf3+0x18>
 a14:	3e d1       	rcall	.+636    	; 0xc92 <__fp_pscB>
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__addsf3+0x18>
 a18:	31 f4       	brne	.+12     	; 0xa26 <__addsf3+0x1e>
 a1a:	9f 3f       	cpi	r25, 0xFF	; 255
 a1c:	11 f4       	brne	.+4      	; 0xa22 <__addsf3+0x1a>
 a1e:	1e f4       	brtc	.+6      	; 0xa26 <__addsf3+0x1e>
 a20:	2e c1       	rjmp	.+604    	; 0xc7e <__fp_nan>
 a22:	0e f4       	brtc	.+2      	; 0xa26 <__addsf3+0x1e>
 a24:	e0 95       	com	r30
 a26:	e7 fb       	bst	r30, 7
 a28:	24 c1       	rjmp	.+584    	; 0xc72 <__fp_inf>

00000a2a <__addsf3x>:
 a2a:	e9 2f       	mov	r30, r25
 a2c:	4a d1       	rcall	.+660    	; 0xcc2 <__fp_split3>
 a2e:	80 f3       	brcs	.-32     	; 0xa10 <__addsf3+0x8>
 a30:	ba 17       	cp	r27, r26
 a32:	62 07       	cpc	r22, r18
 a34:	73 07       	cpc	r23, r19
 a36:	84 07       	cpc	r24, r20
 a38:	95 07       	cpc	r25, r21
 a3a:	18 f0       	brcs	.+6      	; 0xa42 <__addsf3x+0x18>
 a3c:	71 f4       	brne	.+28     	; 0xa5a <__addsf3x+0x30>
 a3e:	9e f5       	brtc	.+102    	; 0xaa6 <__addsf3x+0x7c>
 a40:	62 c1       	rjmp	.+708    	; 0xd06 <__fp_zero>
 a42:	0e f4       	brtc	.+2      	; 0xa46 <__addsf3x+0x1c>
 a44:	e0 95       	com	r30
 a46:	0b 2e       	mov	r0, r27
 a48:	ba 2f       	mov	r27, r26
 a4a:	a0 2d       	mov	r26, r0
 a4c:	0b 01       	movw	r0, r22
 a4e:	b9 01       	movw	r22, r18
 a50:	90 01       	movw	r18, r0
 a52:	0c 01       	movw	r0, r24
 a54:	ca 01       	movw	r24, r20
 a56:	a0 01       	movw	r20, r0
 a58:	11 24       	eor	r1, r1
 a5a:	ff 27       	eor	r31, r31
 a5c:	59 1b       	sub	r21, r25
 a5e:	99 f0       	breq	.+38     	; 0xa86 <__addsf3x+0x5c>
 a60:	59 3f       	cpi	r21, 0xF9	; 249
 a62:	50 f4       	brcc	.+20     	; 0xa78 <__addsf3x+0x4e>
 a64:	50 3e       	cpi	r21, 0xE0	; 224
 a66:	68 f1       	brcs	.+90     	; 0xac2 <__addsf3x+0x98>
 a68:	1a 16       	cp	r1, r26
 a6a:	f0 40       	sbci	r31, 0x00	; 0
 a6c:	a2 2f       	mov	r26, r18
 a6e:	23 2f       	mov	r18, r19
 a70:	34 2f       	mov	r19, r20
 a72:	44 27       	eor	r20, r20
 a74:	58 5f       	subi	r21, 0xF8	; 248
 a76:	f3 cf       	rjmp	.-26     	; 0xa5e <__addsf3x+0x34>
 a78:	46 95       	lsr	r20
 a7a:	37 95       	ror	r19
 a7c:	27 95       	ror	r18
 a7e:	a7 95       	ror	r26
 a80:	f0 40       	sbci	r31, 0x00	; 0
 a82:	53 95       	inc	r21
 a84:	c9 f7       	brne	.-14     	; 0xa78 <__addsf3x+0x4e>
 a86:	7e f4       	brtc	.+30     	; 0xaa6 <__addsf3x+0x7c>
 a88:	1f 16       	cp	r1, r31
 a8a:	ba 0b       	sbc	r27, r26
 a8c:	62 0b       	sbc	r22, r18
 a8e:	73 0b       	sbc	r23, r19
 a90:	84 0b       	sbc	r24, r20
 a92:	ba f0       	brmi	.+46     	; 0xac2 <__addsf3x+0x98>
 a94:	91 50       	subi	r25, 0x01	; 1
 a96:	a1 f0       	breq	.+40     	; 0xac0 <__addsf3x+0x96>
 a98:	ff 0f       	add	r31, r31
 a9a:	bb 1f       	adc	r27, r27
 a9c:	66 1f       	adc	r22, r22
 a9e:	77 1f       	adc	r23, r23
 aa0:	88 1f       	adc	r24, r24
 aa2:	c2 f7       	brpl	.-16     	; 0xa94 <__addsf3x+0x6a>
 aa4:	0e c0       	rjmp	.+28     	; 0xac2 <__addsf3x+0x98>
 aa6:	ba 0f       	add	r27, r26
 aa8:	62 1f       	adc	r22, r18
 aaa:	73 1f       	adc	r23, r19
 aac:	84 1f       	adc	r24, r20
 aae:	48 f4       	brcc	.+18     	; 0xac2 <__addsf3x+0x98>
 ab0:	87 95       	ror	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b7 95       	ror	r27
 ab8:	f7 95       	ror	r31
 aba:	9e 3f       	cpi	r25, 0xFE	; 254
 abc:	08 f0       	brcs	.+2      	; 0xac0 <__addsf3x+0x96>
 abe:	b3 cf       	rjmp	.-154    	; 0xa26 <__addsf3+0x1e>
 ac0:	93 95       	inc	r25
 ac2:	88 0f       	add	r24, r24
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__addsf3x+0x9e>
 ac6:	99 27       	eor	r25, r25
 ac8:	ee 0f       	add	r30, r30
 aca:	97 95       	ror	r25
 acc:	87 95       	ror	r24
 ace:	08 95       	ret

00000ad0 <__divsf3>:
 ad0:	0c d0       	rcall	.+24     	; 0xaea <__divsf3x>
 ad2:	e6 c0       	rjmp	.+460    	; 0xca0 <__fp_round>
 ad4:	de d0       	rcall	.+444    	; 0xc92 <__fp_pscB>
 ad6:	40 f0       	brcs	.+16     	; 0xae8 <__divsf3+0x18>
 ad8:	d5 d0       	rcall	.+426    	; 0xc84 <__fp_pscA>
 ada:	30 f0       	brcs	.+12     	; 0xae8 <__divsf3+0x18>
 adc:	21 f4       	brne	.+8      	; 0xae6 <__divsf3+0x16>
 ade:	5f 3f       	cpi	r21, 0xFF	; 255
 ae0:	19 f0       	breq	.+6      	; 0xae8 <__divsf3+0x18>
 ae2:	c7 c0       	rjmp	.+398    	; 0xc72 <__fp_inf>
 ae4:	51 11       	cpse	r21, r1
 ae6:	10 c1       	rjmp	.+544    	; 0xd08 <__fp_szero>
 ae8:	ca c0       	rjmp	.+404    	; 0xc7e <__fp_nan>

00000aea <__divsf3x>:
 aea:	eb d0       	rcall	.+470    	; 0xcc2 <__fp_split3>
 aec:	98 f3       	brcs	.-26     	; 0xad4 <__divsf3+0x4>

00000aee <__divsf3_pse>:
 aee:	99 23       	and	r25, r25
 af0:	c9 f3       	breq	.-14     	; 0xae4 <__divsf3+0x14>
 af2:	55 23       	and	r21, r21
 af4:	b1 f3       	breq	.-20     	; 0xae2 <__divsf3+0x12>
 af6:	95 1b       	sub	r25, r21
 af8:	55 0b       	sbc	r21, r21
 afa:	bb 27       	eor	r27, r27
 afc:	aa 27       	eor	r26, r26
 afe:	62 17       	cp	r22, r18
 b00:	73 07       	cpc	r23, r19
 b02:	84 07       	cpc	r24, r20
 b04:	38 f0       	brcs	.+14     	; 0xb14 <__divsf3_pse+0x26>
 b06:	9f 5f       	subi	r25, 0xFF	; 255
 b08:	5f 4f       	sbci	r21, 0xFF	; 255
 b0a:	22 0f       	add	r18, r18
 b0c:	33 1f       	adc	r19, r19
 b0e:	44 1f       	adc	r20, r20
 b10:	aa 1f       	adc	r26, r26
 b12:	a9 f3       	breq	.-22     	; 0xafe <__divsf3_pse+0x10>
 b14:	33 d0       	rcall	.+102    	; 0xb7c <__divsf3_pse+0x8e>
 b16:	0e 2e       	mov	r0, r30
 b18:	3a f0       	brmi	.+14     	; 0xb28 <__divsf3_pse+0x3a>
 b1a:	e0 e8       	ldi	r30, 0x80	; 128
 b1c:	30 d0       	rcall	.+96     	; 0xb7e <__divsf3_pse+0x90>
 b1e:	91 50       	subi	r25, 0x01	; 1
 b20:	50 40       	sbci	r21, 0x00	; 0
 b22:	e6 95       	lsr	r30
 b24:	00 1c       	adc	r0, r0
 b26:	ca f7       	brpl	.-14     	; 0xb1a <__divsf3_pse+0x2c>
 b28:	29 d0       	rcall	.+82     	; 0xb7c <__divsf3_pse+0x8e>
 b2a:	fe 2f       	mov	r31, r30
 b2c:	27 d0       	rcall	.+78     	; 0xb7c <__divsf3_pse+0x8e>
 b2e:	66 0f       	add	r22, r22
 b30:	77 1f       	adc	r23, r23
 b32:	88 1f       	adc	r24, r24
 b34:	bb 1f       	adc	r27, r27
 b36:	26 17       	cp	r18, r22
 b38:	37 07       	cpc	r19, r23
 b3a:	48 07       	cpc	r20, r24
 b3c:	ab 07       	cpc	r26, r27
 b3e:	b0 e8       	ldi	r27, 0x80	; 128
 b40:	09 f0       	breq	.+2      	; 0xb44 <__divsf3_pse+0x56>
 b42:	bb 0b       	sbc	r27, r27
 b44:	80 2d       	mov	r24, r0
 b46:	bf 01       	movw	r22, r30
 b48:	ff 27       	eor	r31, r31
 b4a:	93 58       	subi	r25, 0x83	; 131
 b4c:	5f 4f       	sbci	r21, 0xFF	; 255
 b4e:	2a f0       	brmi	.+10     	; 0xb5a <__divsf3_pse+0x6c>
 b50:	9e 3f       	cpi	r25, 0xFE	; 254
 b52:	51 05       	cpc	r21, r1
 b54:	68 f0       	brcs	.+26     	; 0xb70 <__divsf3_pse+0x82>
 b56:	8d c0       	rjmp	.+282    	; 0xc72 <__fp_inf>
 b58:	d7 c0       	rjmp	.+430    	; 0xd08 <__fp_szero>
 b5a:	5f 3f       	cpi	r21, 0xFF	; 255
 b5c:	ec f3       	brlt	.-6      	; 0xb58 <__divsf3_pse+0x6a>
 b5e:	98 3e       	cpi	r25, 0xE8	; 232
 b60:	dc f3       	brlt	.-10     	; 0xb58 <__divsf3_pse+0x6a>
 b62:	86 95       	lsr	r24
 b64:	77 95       	ror	r23
 b66:	67 95       	ror	r22
 b68:	b7 95       	ror	r27
 b6a:	f7 95       	ror	r31
 b6c:	9f 5f       	subi	r25, 0xFF	; 255
 b6e:	c9 f7       	brne	.-14     	; 0xb62 <__divsf3_pse+0x74>
 b70:	88 0f       	add	r24, r24
 b72:	91 1d       	adc	r25, r1
 b74:	96 95       	lsr	r25
 b76:	87 95       	ror	r24
 b78:	97 f9       	bld	r25, 7
 b7a:	08 95       	ret
 b7c:	e1 e0       	ldi	r30, 0x01	; 1
 b7e:	66 0f       	add	r22, r22
 b80:	77 1f       	adc	r23, r23
 b82:	88 1f       	adc	r24, r24
 b84:	bb 1f       	adc	r27, r27
 b86:	62 17       	cp	r22, r18
 b88:	73 07       	cpc	r23, r19
 b8a:	84 07       	cpc	r24, r20
 b8c:	ba 07       	cpc	r27, r26
 b8e:	20 f0       	brcs	.+8      	; 0xb98 <__divsf3_pse+0xaa>
 b90:	62 1b       	sub	r22, r18
 b92:	73 0b       	sbc	r23, r19
 b94:	84 0b       	sbc	r24, r20
 b96:	ba 0b       	sbc	r27, r26
 b98:	ee 1f       	adc	r30, r30
 b9a:	88 f7       	brcc	.-30     	; 0xb7e <__divsf3_pse+0x90>
 b9c:	e0 95       	com	r30
 b9e:	08 95       	ret

00000ba0 <__fixunssfsi>:
 ba0:	98 d0       	rcall	.+304    	; 0xcd2 <__fp_splitA>
 ba2:	88 f0       	brcs	.+34     	; 0xbc6 <__fixunssfsi+0x26>
 ba4:	9f 57       	subi	r25, 0x7F	; 127
 ba6:	90 f0       	brcs	.+36     	; 0xbcc <__fixunssfsi+0x2c>
 ba8:	b9 2f       	mov	r27, r25
 baa:	99 27       	eor	r25, r25
 bac:	b7 51       	subi	r27, 0x17	; 23
 bae:	a0 f0       	brcs	.+40     	; 0xbd8 <__fixunssfsi+0x38>
 bb0:	d1 f0       	breq	.+52     	; 0xbe6 <__fixunssfsi+0x46>
 bb2:	66 0f       	add	r22, r22
 bb4:	77 1f       	adc	r23, r23
 bb6:	88 1f       	adc	r24, r24
 bb8:	99 1f       	adc	r25, r25
 bba:	1a f0       	brmi	.+6      	; 0xbc2 <__fixunssfsi+0x22>
 bbc:	ba 95       	dec	r27
 bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__fixunssfsi+0x12>
 bc0:	12 c0       	rjmp	.+36     	; 0xbe6 <__fixunssfsi+0x46>
 bc2:	b1 30       	cpi	r27, 0x01	; 1
 bc4:	81 f0       	breq	.+32     	; 0xbe6 <__fixunssfsi+0x46>
 bc6:	9f d0       	rcall	.+318    	; 0xd06 <__fp_zero>
 bc8:	b1 e0       	ldi	r27, 0x01	; 1
 bca:	08 95       	ret
 bcc:	9c c0       	rjmp	.+312    	; 0xd06 <__fp_zero>
 bce:	67 2f       	mov	r22, r23
 bd0:	78 2f       	mov	r23, r24
 bd2:	88 27       	eor	r24, r24
 bd4:	b8 5f       	subi	r27, 0xF8	; 248
 bd6:	39 f0       	breq	.+14     	; 0xbe6 <__fixunssfsi+0x46>
 bd8:	b9 3f       	cpi	r27, 0xF9	; 249
 bda:	cc f3       	brlt	.-14     	; 0xbce <__fixunssfsi+0x2e>
 bdc:	86 95       	lsr	r24
 bde:	77 95       	ror	r23
 be0:	67 95       	ror	r22
 be2:	b3 95       	inc	r27
 be4:	d9 f7       	brne	.-10     	; 0xbdc <__fixunssfsi+0x3c>
 be6:	3e f4       	brtc	.+14     	; 0xbf6 <__fixunssfsi+0x56>
 be8:	90 95       	com	r25
 bea:	80 95       	com	r24
 bec:	70 95       	com	r23
 bee:	61 95       	neg	r22
 bf0:	7f 4f       	sbci	r23, 0xFF	; 255
 bf2:	8f 4f       	sbci	r24, 0xFF	; 255
 bf4:	9f 4f       	sbci	r25, 0xFF	; 255
 bf6:	08 95       	ret

00000bf8 <__floatunsisf>:
 bf8:	e8 94       	clt
 bfa:	09 c0       	rjmp	.+18     	; 0xc0e <__floatsisf+0x12>

00000bfc <__floatsisf>:
 bfc:	97 fb       	bst	r25, 7
 bfe:	3e f4       	brtc	.+14     	; 0xc0e <__floatsisf+0x12>
 c00:	90 95       	com	r25
 c02:	80 95       	com	r24
 c04:	70 95       	com	r23
 c06:	61 95       	neg	r22
 c08:	7f 4f       	sbci	r23, 0xFF	; 255
 c0a:	8f 4f       	sbci	r24, 0xFF	; 255
 c0c:	9f 4f       	sbci	r25, 0xFF	; 255
 c0e:	99 23       	and	r25, r25
 c10:	a9 f0       	breq	.+42     	; 0xc3c <__floatsisf+0x40>
 c12:	f9 2f       	mov	r31, r25
 c14:	96 e9       	ldi	r25, 0x96	; 150
 c16:	bb 27       	eor	r27, r27
 c18:	93 95       	inc	r25
 c1a:	f6 95       	lsr	r31
 c1c:	87 95       	ror	r24
 c1e:	77 95       	ror	r23
 c20:	67 95       	ror	r22
 c22:	b7 95       	ror	r27
 c24:	f1 11       	cpse	r31, r1
 c26:	f8 cf       	rjmp	.-16     	; 0xc18 <__floatsisf+0x1c>
 c28:	fa f4       	brpl	.+62     	; 0xc68 <__floatsisf+0x6c>
 c2a:	bb 0f       	add	r27, r27
 c2c:	11 f4       	brne	.+4      	; 0xc32 <__floatsisf+0x36>
 c2e:	60 ff       	sbrs	r22, 0
 c30:	1b c0       	rjmp	.+54     	; 0xc68 <__floatsisf+0x6c>
 c32:	6f 5f       	subi	r22, 0xFF	; 255
 c34:	7f 4f       	sbci	r23, 0xFF	; 255
 c36:	8f 4f       	sbci	r24, 0xFF	; 255
 c38:	9f 4f       	sbci	r25, 0xFF	; 255
 c3a:	16 c0       	rjmp	.+44     	; 0xc68 <__floatsisf+0x6c>
 c3c:	88 23       	and	r24, r24
 c3e:	11 f0       	breq	.+4      	; 0xc44 <__floatsisf+0x48>
 c40:	96 e9       	ldi	r25, 0x96	; 150
 c42:	11 c0       	rjmp	.+34     	; 0xc66 <__floatsisf+0x6a>
 c44:	77 23       	and	r23, r23
 c46:	21 f0       	breq	.+8      	; 0xc50 <__floatsisf+0x54>
 c48:	9e e8       	ldi	r25, 0x8E	; 142
 c4a:	87 2f       	mov	r24, r23
 c4c:	76 2f       	mov	r23, r22
 c4e:	05 c0       	rjmp	.+10     	; 0xc5a <__floatsisf+0x5e>
 c50:	66 23       	and	r22, r22
 c52:	71 f0       	breq	.+28     	; 0xc70 <__floatsisf+0x74>
 c54:	96 e8       	ldi	r25, 0x86	; 134
 c56:	86 2f       	mov	r24, r22
 c58:	70 e0       	ldi	r23, 0x00	; 0
 c5a:	60 e0       	ldi	r22, 0x00	; 0
 c5c:	2a f0       	brmi	.+10     	; 0xc68 <__floatsisf+0x6c>
 c5e:	9a 95       	dec	r25
 c60:	66 0f       	add	r22, r22
 c62:	77 1f       	adc	r23, r23
 c64:	88 1f       	adc	r24, r24
 c66:	da f7       	brpl	.-10     	; 0xc5e <__floatsisf+0x62>
 c68:	88 0f       	add	r24, r24
 c6a:	96 95       	lsr	r25
 c6c:	87 95       	ror	r24
 c6e:	97 f9       	bld	r25, 7
 c70:	08 95       	ret

00000c72 <__fp_inf>:
 c72:	97 f9       	bld	r25, 7
 c74:	9f 67       	ori	r25, 0x7F	; 127
 c76:	80 e8       	ldi	r24, 0x80	; 128
 c78:	70 e0       	ldi	r23, 0x00	; 0
 c7a:	60 e0       	ldi	r22, 0x00	; 0
 c7c:	08 95       	ret

00000c7e <__fp_nan>:
 c7e:	9f ef       	ldi	r25, 0xFF	; 255
 c80:	80 ec       	ldi	r24, 0xC0	; 192
 c82:	08 95       	ret

00000c84 <__fp_pscA>:
 c84:	00 24       	eor	r0, r0
 c86:	0a 94       	dec	r0
 c88:	16 16       	cp	r1, r22
 c8a:	17 06       	cpc	r1, r23
 c8c:	18 06       	cpc	r1, r24
 c8e:	09 06       	cpc	r0, r25
 c90:	08 95       	ret

00000c92 <__fp_pscB>:
 c92:	00 24       	eor	r0, r0
 c94:	0a 94       	dec	r0
 c96:	12 16       	cp	r1, r18
 c98:	13 06       	cpc	r1, r19
 c9a:	14 06       	cpc	r1, r20
 c9c:	05 06       	cpc	r0, r21
 c9e:	08 95       	ret

00000ca0 <__fp_round>:
 ca0:	09 2e       	mov	r0, r25
 ca2:	03 94       	inc	r0
 ca4:	00 0c       	add	r0, r0
 ca6:	11 f4       	brne	.+4      	; 0xcac <__fp_round+0xc>
 ca8:	88 23       	and	r24, r24
 caa:	52 f0       	brmi	.+20     	; 0xcc0 <__fp_round+0x20>
 cac:	bb 0f       	add	r27, r27
 cae:	40 f4       	brcc	.+16     	; 0xcc0 <__fp_round+0x20>
 cb0:	bf 2b       	or	r27, r31
 cb2:	11 f4       	brne	.+4      	; 0xcb8 <__fp_round+0x18>
 cb4:	60 ff       	sbrs	r22, 0
 cb6:	04 c0       	rjmp	.+8      	; 0xcc0 <__fp_round+0x20>
 cb8:	6f 5f       	subi	r22, 0xFF	; 255
 cba:	7f 4f       	sbci	r23, 0xFF	; 255
 cbc:	8f 4f       	sbci	r24, 0xFF	; 255
 cbe:	9f 4f       	sbci	r25, 0xFF	; 255
 cc0:	08 95       	ret

00000cc2 <__fp_split3>:
 cc2:	57 fd       	sbrc	r21, 7
 cc4:	90 58       	subi	r25, 0x80	; 128
 cc6:	44 0f       	add	r20, r20
 cc8:	55 1f       	adc	r21, r21
 cca:	59 f0       	breq	.+22     	; 0xce2 <__fp_splitA+0x10>
 ccc:	5f 3f       	cpi	r21, 0xFF	; 255
 cce:	71 f0       	breq	.+28     	; 0xcec <__fp_splitA+0x1a>
 cd0:	47 95       	ror	r20

00000cd2 <__fp_splitA>:
 cd2:	88 0f       	add	r24, r24
 cd4:	97 fb       	bst	r25, 7
 cd6:	99 1f       	adc	r25, r25
 cd8:	61 f0       	breq	.+24     	; 0xcf2 <__fp_splitA+0x20>
 cda:	9f 3f       	cpi	r25, 0xFF	; 255
 cdc:	79 f0       	breq	.+30     	; 0xcfc <__fp_splitA+0x2a>
 cde:	87 95       	ror	r24
 ce0:	08 95       	ret
 ce2:	12 16       	cp	r1, r18
 ce4:	13 06       	cpc	r1, r19
 ce6:	14 06       	cpc	r1, r20
 ce8:	55 1f       	adc	r21, r21
 cea:	f2 cf       	rjmp	.-28     	; 0xcd0 <__fp_split3+0xe>
 cec:	46 95       	lsr	r20
 cee:	f1 df       	rcall	.-30     	; 0xcd2 <__fp_splitA>
 cf0:	08 c0       	rjmp	.+16     	; 0xd02 <__fp_splitA+0x30>
 cf2:	16 16       	cp	r1, r22
 cf4:	17 06       	cpc	r1, r23
 cf6:	18 06       	cpc	r1, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	f1 cf       	rjmp	.-30     	; 0xcde <__fp_splitA+0xc>
 cfc:	86 95       	lsr	r24
 cfe:	71 05       	cpc	r23, r1
 d00:	61 05       	cpc	r22, r1
 d02:	08 94       	sec
 d04:	08 95       	ret

00000d06 <__fp_zero>:
 d06:	e8 94       	clt

00000d08 <__fp_szero>:
 d08:	bb 27       	eor	r27, r27
 d0a:	66 27       	eor	r22, r22
 d0c:	77 27       	eor	r23, r23
 d0e:	cb 01       	movw	r24, r22
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret

00000d14 <__mulsf3>:
 d14:	0b d0       	rcall	.+22     	; 0xd2c <__mulsf3x>
 d16:	c4 cf       	rjmp	.-120    	; 0xca0 <__fp_round>
 d18:	b5 df       	rcall	.-150    	; 0xc84 <__fp_pscA>
 d1a:	28 f0       	brcs	.+10     	; 0xd26 <__mulsf3+0x12>
 d1c:	ba df       	rcall	.-140    	; 0xc92 <__fp_pscB>
 d1e:	18 f0       	brcs	.+6      	; 0xd26 <__mulsf3+0x12>
 d20:	95 23       	and	r25, r21
 d22:	09 f0       	breq	.+2      	; 0xd26 <__mulsf3+0x12>
 d24:	a6 cf       	rjmp	.-180    	; 0xc72 <__fp_inf>
 d26:	ab cf       	rjmp	.-170    	; 0xc7e <__fp_nan>
 d28:	11 24       	eor	r1, r1
 d2a:	ee cf       	rjmp	.-36     	; 0xd08 <__fp_szero>

00000d2c <__mulsf3x>:
 d2c:	ca df       	rcall	.-108    	; 0xcc2 <__fp_split3>
 d2e:	a0 f3       	brcs	.-24     	; 0xd18 <__mulsf3+0x4>

00000d30 <__mulsf3_pse>:
 d30:	95 9f       	mul	r25, r21
 d32:	d1 f3       	breq	.-12     	; 0xd28 <__mulsf3+0x14>
 d34:	95 0f       	add	r25, r21
 d36:	50 e0       	ldi	r21, 0x00	; 0
 d38:	55 1f       	adc	r21, r21
 d3a:	62 9f       	mul	r22, r18
 d3c:	f0 01       	movw	r30, r0
 d3e:	72 9f       	mul	r23, r18
 d40:	bb 27       	eor	r27, r27
 d42:	f0 0d       	add	r31, r0
 d44:	b1 1d       	adc	r27, r1
 d46:	63 9f       	mul	r22, r19
 d48:	aa 27       	eor	r26, r26
 d4a:	f0 0d       	add	r31, r0
 d4c:	b1 1d       	adc	r27, r1
 d4e:	aa 1f       	adc	r26, r26
 d50:	64 9f       	mul	r22, r20
 d52:	66 27       	eor	r22, r22
 d54:	b0 0d       	add	r27, r0
 d56:	a1 1d       	adc	r26, r1
 d58:	66 1f       	adc	r22, r22
 d5a:	82 9f       	mul	r24, r18
 d5c:	22 27       	eor	r18, r18
 d5e:	b0 0d       	add	r27, r0
 d60:	a1 1d       	adc	r26, r1
 d62:	62 1f       	adc	r22, r18
 d64:	73 9f       	mul	r23, r19
 d66:	b0 0d       	add	r27, r0
 d68:	a1 1d       	adc	r26, r1
 d6a:	62 1f       	adc	r22, r18
 d6c:	83 9f       	mul	r24, r19
 d6e:	a0 0d       	add	r26, r0
 d70:	61 1d       	adc	r22, r1
 d72:	22 1f       	adc	r18, r18
 d74:	74 9f       	mul	r23, r20
 d76:	33 27       	eor	r19, r19
 d78:	a0 0d       	add	r26, r0
 d7a:	61 1d       	adc	r22, r1
 d7c:	23 1f       	adc	r18, r19
 d7e:	84 9f       	mul	r24, r20
 d80:	60 0d       	add	r22, r0
 d82:	21 1d       	adc	r18, r1
 d84:	82 2f       	mov	r24, r18
 d86:	76 2f       	mov	r23, r22
 d88:	6a 2f       	mov	r22, r26
 d8a:	11 24       	eor	r1, r1
 d8c:	9f 57       	subi	r25, 0x7F	; 127
 d8e:	50 40       	sbci	r21, 0x00	; 0
 d90:	8a f0       	brmi	.+34     	; 0xdb4 <__mulsf3_pse+0x84>
 d92:	e1 f0       	breq	.+56     	; 0xdcc <__mulsf3_pse+0x9c>
 d94:	88 23       	and	r24, r24
 d96:	4a f0       	brmi	.+18     	; 0xdaa <__mulsf3_pse+0x7a>
 d98:	ee 0f       	add	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	bb 1f       	adc	r27, r27
 d9e:	66 1f       	adc	r22, r22
 da0:	77 1f       	adc	r23, r23
 da2:	88 1f       	adc	r24, r24
 da4:	91 50       	subi	r25, 0x01	; 1
 da6:	50 40       	sbci	r21, 0x00	; 0
 da8:	a9 f7       	brne	.-22     	; 0xd94 <__mulsf3_pse+0x64>
 daa:	9e 3f       	cpi	r25, 0xFE	; 254
 dac:	51 05       	cpc	r21, r1
 dae:	70 f0       	brcs	.+28     	; 0xdcc <__mulsf3_pse+0x9c>
 db0:	60 cf       	rjmp	.-320    	; 0xc72 <__fp_inf>
 db2:	aa cf       	rjmp	.-172    	; 0xd08 <__fp_szero>
 db4:	5f 3f       	cpi	r21, 0xFF	; 255
 db6:	ec f3       	brlt	.-6      	; 0xdb2 <__mulsf3_pse+0x82>
 db8:	98 3e       	cpi	r25, 0xE8	; 232
 dba:	dc f3       	brlt	.-10     	; 0xdb2 <__mulsf3_pse+0x82>
 dbc:	86 95       	lsr	r24
 dbe:	77 95       	ror	r23
 dc0:	67 95       	ror	r22
 dc2:	b7 95       	ror	r27
 dc4:	f7 95       	ror	r31
 dc6:	e7 95       	ror	r30
 dc8:	9f 5f       	subi	r25, 0xFF	; 255
 dca:	c1 f7       	brne	.-16     	; 0xdbc <__mulsf3_pse+0x8c>
 dcc:	fe 2b       	or	r31, r30
 dce:	88 0f       	add	r24, r24
 dd0:	91 1d       	adc	r25, r1
 dd2:	96 95       	lsr	r25
 dd4:	87 95       	ror	r24
 dd6:	97 f9       	bld	r25, 7
 dd8:	08 95       	ret

00000dda <round>:
 dda:	7b df       	rcall	.-266    	; 0xcd2 <__fp_splitA>
 ddc:	e0 f0       	brcs	.+56     	; 0xe16 <round+0x3c>
 dde:	9e 37       	cpi	r25, 0x7E	; 126
 de0:	d8 f0       	brcs	.+54     	; 0xe18 <round+0x3e>
 de2:	96 39       	cpi	r25, 0x96	; 150
 de4:	b8 f4       	brcc	.+46     	; 0xe14 <round+0x3a>
 de6:	9e 38       	cpi	r25, 0x8E	; 142
 de8:	48 f4       	brcc	.+18     	; 0xdfc <round+0x22>
 dea:	67 2f       	mov	r22, r23
 dec:	78 2f       	mov	r23, r24
 dee:	88 27       	eor	r24, r24
 df0:	98 5f       	subi	r25, 0xF8	; 248
 df2:	f9 cf       	rjmp	.-14     	; 0xde6 <round+0xc>
 df4:	86 95       	lsr	r24
 df6:	77 95       	ror	r23
 df8:	67 95       	ror	r22
 dfa:	93 95       	inc	r25
 dfc:	95 39       	cpi	r25, 0x95	; 149
 dfe:	d0 f3       	brcs	.-12     	; 0xdf4 <round+0x1a>
 e00:	b6 2f       	mov	r27, r22
 e02:	b1 70       	andi	r27, 0x01	; 1
 e04:	6b 0f       	add	r22, r27
 e06:	71 1d       	adc	r23, r1
 e08:	81 1d       	adc	r24, r1
 e0a:	20 f4       	brcc	.+8      	; 0xe14 <round+0x3a>
 e0c:	87 95       	ror	r24
 e0e:	77 95       	ror	r23
 e10:	67 95       	ror	r22
 e12:	93 95       	inc	r25
 e14:	02 c0       	rjmp	.+4      	; 0xe1a <__fp_mintl>
 e16:	1c c0       	rjmp	.+56     	; 0xe50 <__fp_mpack>
 e18:	77 cf       	rjmp	.-274    	; 0xd08 <__fp_szero>

00000e1a <__fp_mintl>:
 e1a:	88 23       	and	r24, r24
 e1c:	71 f4       	brne	.+28     	; 0xe3a <__fp_mintl+0x20>
 e1e:	77 23       	and	r23, r23
 e20:	21 f0       	breq	.+8      	; 0xe2a <__fp_mintl+0x10>
 e22:	98 50       	subi	r25, 0x08	; 8
 e24:	87 2b       	or	r24, r23
 e26:	76 2f       	mov	r23, r22
 e28:	07 c0       	rjmp	.+14     	; 0xe38 <__fp_mintl+0x1e>
 e2a:	66 23       	and	r22, r22
 e2c:	11 f4       	brne	.+4      	; 0xe32 <__fp_mintl+0x18>
 e2e:	99 27       	eor	r25, r25
 e30:	0d c0       	rjmp	.+26     	; 0xe4c <__fp_mintl+0x32>
 e32:	90 51       	subi	r25, 0x10	; 16
 e34:	86 2b       	or	r24, r22
 e36:	70 e0       	ldi	r23, 0x00	; 0
 e38:	60 e0       	ldi	r22, 0x00	; 0
 e3a:	2a f0       	brmi	.+10     	; 0xe46 <__fp_mintl+0x2c>
 e3c:	9a 95       	dec	r25
 e3e:	66 0f       	add	r22, r22
 e40:	77 1f       	adc	r23, r23
 e42:	88 1f       	adc	r24, r24
 e44:	da f7       	brpl	.-10     	; 0xe3c <__fp_mintl+0x22>
 e46:	88 0f       	add	r24, r24
 e48:	96 95       	lsr	r25
 e4a:	87 95       	ror	r24
 e4c:	97 f9       	bld	r25, 7
 e4e:	08 95       	ret

00000e50 <__fp_mpack>:
 e50:	9f 3f       	cpi	r25, 0xFF	; 255
 e52:	31 f0       	breq	.+12     	; 0xe60 <__fp_mpack_finite+0xc>

00000e54 <__fp_mpack_finite>:
 e54:	91 50       	subi	r25, 0x01	; 1
 e56:	20 f4       	brcc	.+8      	; 0xe60 <__fp_mpack_finite+0xc>
 e58:	87 95       	ror	r24
 e5a:	77 95       	ror	r23
 e5c:	67 95       	ror	r22
 e5e:	b7 95       	ror	r27
 e60:	88 0f       	add	r24, r24
 e62:	91 1d       	adc	r25, r1
 e64:	96 95       	lsr	r25
 e66:	87 95       	ror	r24
 e68:	97 f9       	bld	r25, 7
 e6a:	08 95       	ret

00000e6c <__divmodhi4>:
 e6c:	97 fb       	bst	r25, 7
 e6e:	07 2e       	mov	r0, r23
 e70:	16 f4       	brtc	.+4      	; 0xe76 <__divmodhi4+0xa>
 e72:	00 94       	com	r0
 e74:	06 d0       	rcall	.+12     	; 0xe82 <__divmodhi4_neg1>
 e76:	77 fd       	sbrc	r23, 7
 e78:	08 d0       	rcall	.+16     	; 0xe8a <__divmodhi4_neg2>
 e7a:	0b d0       	rcall	.+22     	; 0xe92 <__udivmodhi4>
 e7c:	07 fc       	sbrc	r0, 7
 e7e:	05 d0       	rcall	.+10     	; 0xe8a <__divmodhi4_neg2>
 e80:	3e f4       	brtc	.+14     	; 0xe90 <__divmodhi4_exit>

00000e82 <__divmodhi4_neg1>:
 e82:	90 95       	com	r25
 e84:	81 95       	neg	r24
 e86:	9f 4f       	sbci	r25, 0xFF	; 255
 e88:	08 95       	ret

00000e8a <__divmodhi4_neg2>:
 e8a:	70 95       	com	r23
 e8c:	61 95       	neg	r22
 e8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000e90 <__divmodhi4_exit>:
 e90:	08 95       	ret

00000e92 <__udivmodhi4>:
 e92:	aa 1b       	sub	r26, r26
 e94:	bb 1b       	sub	r27, r27
 e96:	51 e1       	ldi	r21, 0x11	; 17
 e98:	07 c0       	rjmp	.+14     	; 0xea8 <__udivmodhi4_ep>

00000e9a <__udivmodhi4_loop>:
 e9a:	aa 1f       	adc	r26, r26
 e9c:	bb 1f       	adc	r27, r27
 e9e:	a6 17       	cp	r26, r22
 ea0:	b7 07       	cpc	r27, r23
 ea2:	10 f0       	brcs	.+4      	; 0xea8 <__udivmodhi4_ep>
 ea4:	a6 1b       	sub	r26, r22
 ea6:	b7 0b       	sbc	r27, r23

00000ea8 <__udivmodhi4_ep>:
 ea8:	88 1f       	adc	r24, r24
 eaa:	99 1f       	adc	r25, r25
 eac:	5a 95       	dec	r21
 eae:	a9 f7       	brne	.-22     	; 0xe9a <__udivmodhi4_loop>
 eb0:	80 95       	com	r24
 eb2:	90 95       	com	r25
 eb4:	bc 01       	movw	r22, r24
 eb6:	cd 01       	movw	r24, r26
 eb8:	08 95       	ret

00000eba <strcmp>:
 eba:	fb 01       	movw	r30, r22
 ebc:	dc 01       	movw	r26, r24
 ebe:	8d 91       	ld	r24, X+
 ec0:	01 90       	ld	r0, Z+
 ec2:	80 19       	sub	r24, r0
 ec4:	01 10       	cpse	r0, r1
 ec6:	d9 f3       	breq	.-10     	; 0xebe <strcmp+0x4>
 ec8:	99 0b       	sbc	r25, r25
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
