
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000156  00800060  00000eb0  00000f44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001b6  008001b6  0000109a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000109a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030c9  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f25  00000000  00000000  00004479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166a  00000000  00000000  0000539e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005f0  00000000  00000000  00006a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee0  00000000  00000000  00006ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c1c  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00009af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	78 c4       	rjmp	.+2288   	; 0x8f4 <__vector_1>
   4:	a3 c4       	rjmp	.+2374   	; 0x94c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 eb       	ldi	r30, 0xB0	; 176
  3a:	fe e0       	ldi	r31, 0x0E	; 14
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3b       	cpi	r26, 0xB6	; 182
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a6 eb       	ldi	r26, 0xB6	; 182
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 3c       	cpi	r26, 0xCD	; 205
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d8 d2       	rcall	.+1456   	; 0x60a <main>
  5a:	28 c7       	rjmp	.+3664   	; 0xeac <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Buzzer_INIT>:
#include "Buzzer.h"


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	11 f0       	breq	.+4      	; 0x66 <Buzzer_INIT+0x8>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
  62:	f6 d3       	rcall	.+2028   	; 0x850 <GPIO_PIN_Initialize>
  64:	08 95       	ret


STD_ReturnType Buzzer_INIT(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  66:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Initialize(&(Buzzer_obj->buzzer));
	}
	return status ;
}
  68:	08 95       	ret

0000006a <Buzzer_Play>:
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  6a:	00 97       	sbiw	r24, 0x00	; 0
  6c:	19 f0       	breq	.+6      	; 0x74 <Buzzer_Play+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	44 d3       	rcall	.+1672   	; 0x6fa <GPIO_PIN_Write_logic>
  72:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Play(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  74:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
  76:	08 95       	ret

00000078 <Buzzer_Stop>:
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	19 f0       	breq	.+6      	; 0x82 <Buzzer_Stop+0xa>
		status = RET_NOT_OK;
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	3d d3       	rcall	.+1658   	; 0x6fa <GPIO_PIN_Write_logic>
  80:	08 95       	ret
	return status ;
}
STD_ReturnType Buzzer_Stop(const Buzzer_Config *Buzzer_obj){
	STD_ReturnType status = RET_OK ;
	if (NULL == Buzzer_obj){
		status = RET_NOT_OK;
  82:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		status = GPIO_PIN_Write_logic(&(Buzzer_obj->buzzer),GPIO_PIN_LOGIC_LOW);
	}
	return status ;
}
  84:	08 95       	ret

00000086 <Door_Motor_Init>:

#include "Door_Motor.h"

STD_ReturnType Door_Motor_Init(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
	if (NULL == motor_obj){
  86:	89 2b       	or	r24, r25
  88:	29 f0       	breq	.+10     	; 0x94 <Door_Motor_Init+0xe>
		status = RET_NOT_OK;
	}
	else
	{
		DDRD |= (1 << BIT4) | (1 << BIT5);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 63       	ori	r24, 0x30	; 48
  8e:	81 bb       	out	0x11, r24	; 17
 */

#include "Door_Motor.h"

STD_ReturnType Door_Motor_Init(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	08 95       	ret
	if (NULL == motor_obj){
		status = RET_NOT_OK;
  94:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		DDRD |= (1 << BIT4) | (1 << BIT5);
	}
	return status ;
}
  96:	08 95       	ret

00000098 <Door_Motor_Open>:

STD_ReturnType Door_Motor_Open(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
	if (NULL == motor_obj){
  98:	89 2b       	or	r24, r25
  9a:	41 f0       	breq	.+16     	; 0xac <Door_Motor_Open+0x14>
		status = RET_NOT_OK;
	}
	else
	{
		PORTD |= (1 << BIT4);
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BIT5);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	82 bb       	out	0x12, r24	; 18
	}
	return status ;
}

STD_ReturnType Door_Motor_Open(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	08 95       	ret
	if (NULL == motor_obj){
		status = RET_NOT_OK;
  ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		PORTD |= (1 << BIT4);
		PORTD &= ~(1 << BIT5);
	}
	return status ;
}
  ae:	08 95       	ret

000000b0 <Door_Motor_Close>:

STD_ReturnType Door_Motor_Close(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
	if (NULL == motor_obj){
  b0:	89 2b       	or	r24, r25
  b2:	41 f0       	breq	.+16     	; 0xc4 <Door_Motor_Close+0x14>
		status = RET_NOT_OK;
	}
	else
	{
		PORTD &= ~(1 << BIT4);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	8f 7e       	andi	r24, 0xEF	; 239
  b8:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << BIT5);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	82 bb       	out	0x12, r24	; 18
	}
	return status ;
}

STD_ReturnType Door_Motor_Close(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	08 95       	ret
	if (NULL == motor_obj){
		status = RET_NOT_OK;
  c4:	80 e0       	ldi	r24, 0x00	; 0
	{
		PORTD &= ~(1 << BIT4);
		PORTD |= (1 << BIT5);
	}
	return status ; 
}
  c6:	08 95       	ret

000000c8 <Door_Motor_Stop>:

STD_ReturnType Door_Motor_Stop(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
	if (NULL == motor_obj){
  c8:	89 2b       	or	r24, r25
  ca:	41 f0       	breq	.+16     	; 0xdc <Door_Motor_Stop+0x14>
		status = RET_NOT_OK;
	}
	else
	{
		PORTD &= ~(1 << BIT4);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	82 bb       	out	0x12, r24	; 18
		PORTD &= ~(1 << BIT5);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
	}
	return status ; 
}

STD_ReturnType Door_Motor_Stop(const Door_Motor_Config * motor_obj){
	STD_ReturnType status = RET_OK;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret
	if (NULL == motor_obj){
		status = RET_NOT_OK;
  dc:	80 e0       	ldi	r24, 0x00	; 0
	{
		PORTD &= ~(1 << BIT4);
		PORTD &= ~(1 << BIT5);
	}
	return status ;
}
  de:	08 95       	ret

000000e0 <Keypad_Get_char>:
}



/*-----------------------------------------------------asissstant functions---------------------------------------*/
static STD_ReturnType Keypad_Get_char(const Keypad_Config *keypad_obj,uint8 *_char,bool *Door_Flag){
  e0:	5f 92       	push	r5
  e2:	6f 92       	push	r6
  e4:	7f 92       	push	r7
  e6:	8f 92       	push	r8
  e8:	9f 92       	push	r9
  ea:	af 92       	push	r10
  ec:	bf 92       	push	r11
  ee:	cf 92       	push	r12
  f0:	df 92       	push	r13
  f2:	ef 92       	push	r14
  f4:	ff 92       	push	r15
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	1f 92       	push	r1
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
	
	uint32 clear ;
	uint32 count_rows ;
	uint32 count_colums;
	
	if (NULL == keypad_obj ){
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	09 f4       	brne	.+2      	; 0x10a <Keypad_Get_char+0x2a>
 108:	63 c0       	rjmp	.+198    	; 0x1d0 <Keypad_Get_char+0xf0>
 10a:	4a 01       	movw	r8, r20
 10c:	3b 01       	movw	r6, r22
 10e:	6c 01       	movw	r12, r24
 110:	51 2c       	mov	r5, r1
 112:	81 e0       	ldi	r24, 0x01	; 1
		status = RET_NOT_OK;
	}
	else{
		while(1){
			if(flag || *Door_Flag){
 114:	51 10       	cpse	r5, r1
 116:	5d c0       	rjmp	.+186    	; 0x1d2 <Keypad_Get_char+0xf2>
 118:	f4 01       	movw	r30, r8
 11a:	90 81       	ld	r25, Z
 11c:	91 11       	cpse	r25, r1
 11e:	59 c0       	rjmp	.+178    	; 0x1d2 <Keypad_Get_char+0xf2>
 120:	a1 2c       	mov	r10, r1
 122:	b1 2c       	mov	r11, r1
 124:	4f c0       	rjmp	.+158    	; 0x1c4 <Keypad_Get_char+0xe4>
				break;
			}
			for(count_colums = 0 ; count_colums < 3 ; count_colums++)
			{
				if (flag){
 126:	51 10       	cpse	r5, r1
 128:	f5 cf       	rjmp	.-22     	; 0x114 <Keypad_Get_char+0x34>
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	0c c0       	rjmp	.+24     	; 0x148 <Keypad_Get_char+0x68>
					break;
				}
				// set all columns low then set the required column high
				for(clear = 0 ; clear < 3 ; clear++){
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
 130:	c8 01       	movw	r24, r16
 132:	04 96       	adiw	r24, 0x04	; 4
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	8c 0d       	add	r24, r12
 140:	9d 1d       	adc	r25, r13
 142:	db d2       	rcall	.+1462   	; 0x6fa <GPIO_PIN_Write_logic>
			{
				if (flag){
					break;
				}
				// set all columns low then set the required column high
				for(clear = 0 ; clear < 3 ; clear++){
 144:	0f 5f       	subi	r16, 0xFF	; 255
 146:	1f 4f       	sbci	r17, 0xFF	; 255
 148:	03 30       	cpi	r16, 0x03	; 3
 14a:	11 05       	cpc	r17, r1
 14c:	88 f3       	brcs	.-30     	; 0x130 <Keypad_Get_char+0x50>
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
				}
				status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
 14e:	c5 01       	movw	r24, r10
 150:	04 96       	adiw	r24, 0x04	; 4
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	8c 0d       	add	r24, r12
 15e:	9d 1d       	adc	r25, r13
 160:	cc d2       	rcall	.+1432   	; 0x6fa <GPIO_PIN_Write_logic>
				
				for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	28 c0       	rjmp	.+80     	; 0x1b8 <Keypad_Get_char+0xd8>
					status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 168:	78 01       	movw	r14, r16
 16a:	ee 0c       	add	r14, r14
 16c:	ff 1c       	adc	r15, r15
 16e:	ee 0c       	add	r14, r14
 170:	ff 1c       	adc	r15, r15
 172:	ec 0c       	add	r14, r12
 174:	fd 1c       	adc	r15, r13
 176:	be 01       	movw	r22, r28
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	c7 01       	movw	r24, r14
 17e:	00 d3       	rcall	.+1536   	; 0x780 <GPIO_PIN_Read_Logic>
					
					if (logic == GPIO_PIN_LOGIC_LOW){
 180:	99 81       	ldd	r25, Y+1	; 0x01
 182:	91 11       	cpse	r25, r1
 184:	17 c0       	rjmp	.+46     	; 0x1b4 <Keypad_Get_char+0xd4>
						while(1){
							status = GPIO_PIN_Read_Logic(&(keypad_obj->Rows[count_rows]),&logic);
 186:	be 01       	movw	r22, r28
 188:	6f 5f       	subi	r22, 0xFF	; 255
 18a:	7f 4f       	sbci	r23, 0xFF	; 255
 18c:	c7 01       	movw	r24, r14
 18e:	f8 d2       	rcall	.+1520   	; 0x780 <GPIO_PIN_Read_Logic>
							if(logic == GPIO_PIN_LOGIC_HIGH){
 190:	99 81       	ldd	r25, Y+1	; 0x01
 192:	91 30       	cpi	r25, 0x01	; 1
 194:	c1 f7       	brne	.-16     	; 0x186 <Keypad_Get_char+0xa6>
								break;
							}
						}
						*_char = keypad[count_rows][count_colums];
 196:	f8 01       	movw	r30, r16
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e0 0f       	add	r30, r16
 19e:	f1 1f       	adc	r31, r17
 1a0:	e9 54       	subi	r30, 0x49	; 73
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	ea 0d       	add	r30, r10
 1a6:	fb 1d       	adc	r31, r11
 1a8:	90 81       	ld	r25, Z
 1aa:	f3 01       	movw	r30, r6
 1ac:	90 83       	st	Z, r25
						flag = True ;
 1ae:	55 24       	eor	r5, r5
 1b0:	53 94       	inc	r5
						break;
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <Keypad_Get_char+0xde>
				for(clear = 0 ; clear < 3 ; clear++){
					status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[clear]),GPIO_PIN_LOGIC_HIGH);
				}
				status = GPIO_PIN_Write_logic(&(keypad_obj->Columns[count_colums]),GPIO_PIN_LOGIC_LOW);
				
				for(count_rows = 0 ; count_rows < 4 ; count_rows++){
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
 1b8:	04 30       	cpi	r16, 0x04	; 4
 1ba:	11 05       	cpc	r17, r1
 1bc:	a8 f2       	brcs	.-86     	; 0x168 <Keypad_Get_char+0x88>
	else{
		while(1){
			if(flag || *Door_Flag){
				break;
			}
			for(count_colums = 0 ; count_colums < 3 ; count_colums++)
 1be:	ff ef       	ldi	r31, 0xFF	; 255
 1c0:	af 1a       	sub	r10, r31
 1c2:	bf 0a       	sbc	r11, r31
 1c4:	93 e0       	ldi	r25, 0x03	; 3
 1c6:	a9 16       	cp	r10, r25
 1c8:	b1 04       	cpc	r11, r1
 1ca:	08 f4       	brcc	.+2      	; 0x1ce <Keypad_Get_char+0xee>
 1cc:	ac cf       	rjmp	.-168    	; 0x126 <Keypad_Get_char+0x46>
 1ce:	a2 cf       	rjmp	.-188    	; 0x114 <Keypad_Get_char+0x34>
	uint32 clear ;
	uint32 count_rows ;
	uint32 count_colums;
	
	if (NULL == keypad_obj ){
		status = RET_NOT_OK;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
			}
		}
	}
	
	return status;
 1d2:	0f 90       	pop	r0
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	7f 90       	pop	r7
 1ee:	6f 90       	pop	r6
 1f0:	5f 90       	pop	r5
 1f2:	08 95       	ret

000001f4 <Keypad_Init>:
	{'4', '5', '6'},
	{'7', '8', '9'},
	{'*', '0', '#'}
};

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
 200:	00 97       	sbiw	r24, 0x00	; 0
 202:	31 f1       	breq	.+76     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 204:	7b 01       	movw	r14, r22
 206:	8c 01       	movw	r16, r24
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	09 c0       	rjmp	.+18     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
 210:	ce 01       	movw	r24, r28
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	80 0f       	add	r24, r16
 21c:	91 1f       	adc	r25, r17
 21e:	18 d3       	rcall	.+1584   	; 0x850 <GPIO_PIN_Initialize>
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
	}
	else{
		// init Rows 
		for (count = 0 ; count <4 ; count++){
 220:	21 96       	adiw	r28, 0x01	; 1
 222:	c4 30       	cpi	r28, 0x04	; 4
 224:	d1 05       	cpc	r29, r1
 226:	a0 f3       	brcs	.-24     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 228:	c0 e0       	ldi	r28, 0x00	; 0
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	0a c0       	rjmp	.+20     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
 22e:	ce 01       	movw	r24, r28
 230:	04 96       	adiw	r24, 0x04	; 4
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	80 0f       	add	r24, r16
 23c:	91 1f       	adc	r25, r17
 23e:	08 d3       	rcall	.+1552   	; 0x850 <GPIO_PIN_Initialize>
		// init Rows 
		for (count = 0 ; count <4 ; count++){
			status = GPIO_PIN_Initialize(&(keypad_obj->Rows[count]));
		}
		// ini Columns 
		for(count = 0 ; count < 3 ; count++){
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	c3 30       	cpi	r28, 0x03	; 3
 244:	d1 05       	cpc	r29, r1
 246:	98 f3       	brcs	.-26     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
			status = GPIO_PIN_Initialize(&(keypad_obj->Columns[count]));
		}
		// init password
		keypad_obj->ActualPassword = password;
 248:	f8 01       	movw	r30, r16
 24a:	f5 8e       	std	Z+29, r15	; 0x1d
 24c:	e4 8e       	std	Z+28, r14	; 0x1c
 24e:	01 c0       	rjmp	.+2      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>

STD_ReturnType Keypad_Init(Keypad_Config *keypad_obj,uint8 *password){
	STD_ReturnType status = RET_OK;
	uint32 count ;
	if (NULL == keypad_obj){
		status = RET_NOT_OK;
 250:	80 e0       	ldi	r24, 0x00	; 0
		}
		// init password
		keypad_obj->ActualPassword = password;
	}
	return status;
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <Keypad_Get_Check_Password>:



STD_ReturnType Keypad_Get_Check_Password(const Keypad_Config *keypad_obj,uint8 pass[],bool *ispasstrue,bool *Door_Flag){
 260:	5f 92       	push	r5
 262:	6f 92       	push	r6
 264:	7f 92       	push	r7
 266:	8f 92       	push	r8
 268:	9f 92       	push	r9
 26a:	af 92       	push	r10
 26c:	bf 92       	push	r11
 26e:	cf 92       	push	r12
 270:	df 92       	push	r13
 272:	ef 92       	push	r14
 274:	ff 92       	push	r15
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	1f 92       	push	r1
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	uint32 attempt = 0 ;
	if (NULL == keypad_obj || NULL == pass){
 284:	00 97       	sbiw	r24, 0x00	; 0
 286:	09 f4       	brne	.+2      	; 0x28a <Keypad_Get_Check_Password+0x2a>
 288:	43 c0       	rjmp	.+134    	; 0x310 <Keypad_Get_Check_Password+0xb0>
 28a:	61 15       	cp	r22, r1
 28c:	71 05       	cpc	r23, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <Keypad_Get_Check_Password+0x32>
 290:	41 c0       	rjmp	.+130    	; 0x314 <Keypad_Get_Check_Password+0xb4>
 292:	79 01       	movw	r14, r18
 294:	3a 01       	movw	r6, r20
 296:	4b 01       	movw	r8, r22
 298:	6c 01       	movw	r12, r24
 29a:	a1 2c       	mov	r10, r1
 29c:	b1 2c       	mov	r11, r1
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	10 e0       	ldi	r17, 0x00	; 0
 2a2:	55 24       	eor	r5, r5
 2a4:	53 94       	inc	r5
 2a6:	30 c0       	rjmp	.+96     	; 0x308 <Keypad_Get_Check_Password+0xa8>
		status = RET_NOT_OK;
	}
	else{
		while(attempt < 1 ){
			if(*Door_Flag){
 2a8:	f7 01       	movw	r30, r14
 2aa:	80 81       	ld	r24, Z
 2ac:	81 11       	cpse	r24, r1
 2ae:	33 c0       	rjmp	.+102    	; 0x316 <Keypad_Get_Check_Password+0xb6>
				break;
			}
			status = Keypad_Get_char(keypad_obj,&key,Door_Flag);
 2b0:	a7 01       	movw	r20, r14
 2b2:	be 01       	movw	r22, r28
 2b4:	6f 5f       	subi	r22, 0xFF	; 255
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	c6 01       	movw	r24, r12
 2ba:	12 df       	rcall	.-476    	; 0xe0 <Keypad_Get_char>
 2bc:	58 2e       	mov	r5, r24
			if(key == '#'){
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	83 32       	cpi	r24, 0x23	; 35
 2c2:	b1 f4       	brne	.+44     	; 0x2f0 <Keypad_Get_Check_Password+0x90>
				if (strcmp(pass,keypad_obj->ActualPassword) == 0 ){
 2c4:	f6 01       	movw	r30, r12
 2c6:	64 8d       	ldd	r22, Z+28	; 0x1c
 2c8:	75 8d       	ldd	r23, Z+29	; 0x1d
 2ca:	c4 01       	movw	r24, r8
 2cc:	e6 d5       	rcall	.+3020   	; 0xe9a <strcmp>
 2ce:	89 2b       	or	r24, r25
 2d0:	21 f4       	brne	.+8      	; 0x2da <Keypad_Get_Check_Password+0x7a>
					*ispasstrue = True;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	f3 01       	movw	r30, r6
 2d6:	80 83       	st	Z, r24
					break;
 2d8:	1e c0       	rjmp	.+60     	; 0x316 <Keypad_Get_Check_Password+0xb6>
				}
				else {
					*ispasstrue = False;
 2da:	f3 01       	movw	r30, r6
 2dc:	10 82       	st	Z, r1
					if(index==4)
 2de:	04 30       	cpi	r16, 0x04	; 4
 2e0:	11 05       	cpc	r17, r1
 2e2:	81 f4       	brne	.+32     	; 0x304 <Keypad_Get_Check_Password+0xa4>
						attempt++;
 2e4:	ff ef       	ldi	r31, 0xFF	; 255
 2e6:	af 1a       	sub	r10, r31
 2e8:	bf 0a       	sbc	r11, r31
				}
				index = 0;
 2ea:	00 e0       	ldi	r16, 0x00	; 0
 2ec:	10 e0       	ldi	r17, 0x00	; 0
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <Keypad_Get_Check_Password+0xa8>
			}
			else if (index <4){
 2f0:	04 30       	cpi	r16, 0x04	; 4
 2f2:	11 05       	cpc	r17, r1
 2f4:	48 f4       	brcc	.+18     	; 0x308 <Keypad_Get_Check_Password+0xa8>
				pass[index] = key ;
 2f6:	f4 01       	movw	r30, r8
 2f8:	e0 0f       	add	r30, r16
 2fa:	f1 1f       	adc	r31, r17
 2fc:	80 83       	st	Z, r24
				index++;
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	02 c0       	rjmp	.+4      	; 0x308 <Keypad_Get_Check_Password+0xa8>
				else {
					*ispasstrue = False;
					if(index==4)
						attempt++;
				}
				index = 0;
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
	uint32 attempt = 0 ;
	if (NULL == keypad_obj || NULL == pass){
		status = RET_NOT_OK;
	}
	else{
		while(attempt < 1 ){
 308:	a1 14       	cp	r10, r1
 30a:	b1 04       	cpc	r11, r1
 30c:	69 f2       	breq	.-102    	; 0x2a8 <Keypad_Get_Check_Password+0x48>
 30e:	03 c0       	rjmp	.+6      	; 0x316 <Keypad_Get_Check_Password+0xb6>
	STD_ReturnType status = RET_OK;
	uint8 key ;
	uint32 index = 0 ;
	uint32 attempt = 0 ;
	if (NULL == keypad_obj || NULL == pass){
		status = RET_NOT_OK;
 310:	51 2c       	mov	r5, r1
 312:	01 c0       	rjmp	.+2      	; 0x316 <Keypad_Get_Check_Password+0xb6>
 314:	51 2c       	mov	r5, r1
				index++;
			}
		}
	}
	return status;
}
 316:	85 2d       	mov	r24, r5
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	bf 90       	pop	r11
 32c:	af 90       	pop	r10
 32e:	9f 90       	pop	r9
 330:	8f 90       	pop	r8
 332:	7f 90       	pop	r7
 334:	6f 90       	pop	r6
 336:	5f 90       	pop	r5
 338:	08 95       	ret

0000033a <RGB_LED_INIT>:
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW);
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 97       	sbiw	r24, 0x00	; 0
 340:	31 f0       	breq	.+12     	; 0x34e <RGB_LED_INIT+0x14>
 342:	ec 01       	movw	r28, r24
 344:	85 d2       	rcall	.+1290   	; 0x850 <GPIO_PIN_Initialize>
 346:	ce 01       	movw	r24, r28
 348:	04 96       	adiw	r24, 0x04	; 4
 34a:	82 d2       	rcall	.+1284   	; 0x850 <GPIO_PIN_Initialize>
 34c:	01 c0       	rjmp	.+2      	; 0x350 <RGB_LED_INIT+0x16>
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <RGB_LED_RED>:
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	41 f0       	breq	.+16     	; 0x36e <RGB_LED_RED+0x18>
 35e:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	cb d1       	rcall	.+918    	; 0x6fa <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	ce 01       	movw	r24, r28
 368:	04 96       	adiw	r24, 0x04	; 4
 36a:	c7 d1       	rcall	.+910    	; 0x6fa <GPIO_PIN_Write_logic>
 36c:	01 c0       	rjmp	.+2      	; 0x370 <RGB_LED_RED+0x1a>
	return status ;
}
STD_ReturnType RGB_LED_RED(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 36e:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_LOW  );
	}
	return status ;
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <RGB_LED_BLUE>:

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 37a:	00 97       	sbiw	r24, 0x00	; 0
 37c:	41 f0       	breq	.+16     	; 0x38e <RGB_LED_BLUE+0x18>
 37e:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	bb d1       	rcall	.+886    	; 0x6fa <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	ce 01       	movw	r24, r28
 388:	04 96       	adiw	r24, 0x04	; 4
 38a:	b7 d1       	rcall	.+878    	; 0x6fa <GPIO_PIN_Write_logic>
 38c:	01 c0       	rjmp	.+2      	; 0x390 <RGB_LED_BLUE+0x1a>
}

STD_ReturnType RGB_LED_BLUE(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 38e:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_HIGH );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH );
	}
	return status ;
}
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <RGB_LED_GREEN>:

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
 39a:	00 97       	sbiw	r24, 0x00	; 0
 39c:	41 f0       	breq	.+16     	; 0x3ae <RGB_LED_GREEN+0x18>
 39e:	ec 01       	movw	r28, r24
		status = RET_NOT_OK ;
	}
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	ab d1       	rcall	.+854    	; 0x6fa <GPIO_PIN_Write_logic>
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	ce 01       	movw	r24, r28
 3a8:	04 96       	adiw	r24, 0x04	; 4
 3aa:	a7 d1       	rcall	.+846    	; 0x6fa <GPIO_PIN_Write_logic>
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <RGB_LED_GREEN+0x1a>
}

STD_ReturnType RGB_LED_GREEN(const RGB_LED * _RGB_LED_Obj){
	STD_ReturnType status = RET_OK ;
	if (NULL ==  _RGB_LED_Obj){
		status = RET_NOT_OK ;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
	else {
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[0]) ,GPIO_PIN_LOGIC_LOW );
		status = GPIO_PIN_Write_logic(&(_RGB_LED_Obj->pin0[1]) ,GPIO_PIN_LOGIC_HIGH);
	}
	return status ;
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <PIR_Sense>:

																					/* take the reading from the sensors  and make an action */

// INT0 : if PIR sense any motion it will set flag and enable the other sensors
void PIR_Sense(void){
	PIR_Flag = True ;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <PIR_Flag>
 3bc:	08 95       	ret

000003be <Door_OpenCV>:
}
																					/* interaction with computer vision */
// INT1 : when we need to open the door
void Door_OpenCV(void){
	Door_Flag = True ;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <Door_Flag>
 3c4:	08 95       	ret

000003c6 <Initialize>:


																					/* Initialize all Modules and devices */
void Initialize (void){
	// Internal peripherals 
	status = PWM_Init(&PWM);
 3c6:	80 ea       	ldi	r24, 0xA0	; 160
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	ec d2       	rcall	.+1496   	; 0x9a4 <PWM_Init>
 3cc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	PWM_Write(led_brightness,lighting_led);
 3d0:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <lighting_led>
 3d4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <led_brightness>
 3d8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <led_brightness+0x1>
 3dc:	09 d3       	rcall	.+1554   	; 0x9f0 <PWM_Write>
	status = ADC_Initialize(&adc);
 3de:	82 ea       	ldi	r24, 0xA2	; 162
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	59 d1       	rcall	.+690    	; 0x696 <ADC_Initialize>
 3e4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	USART_Init();
 3e8:	0d d3       	rcall	.+1562   	; 0xa04 <USART_Init>
	// External interrrupt
	status = INTx_Initialize(&PIR_Sensor);
 3ea:	8a e9       	ldi	r24, 0x9A	; 154
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	72 d2       	rcall	.+1252   	; 0x8d4 <INTx_Initialize>
 3f0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	status = INTx_Initialize((&Door_Status));
 3f4:	86 e9       	ldi	r24, 0x96	; 150
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	6d d2       	rcall	.+1242   	; 0x8d4 <INTx_Initialize>
 3fa:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	// output moduls 
	status = RGB_LED_INIT(&rgb);
 3fe:	8f e6       	ldi	r24, 0x6F	; 111
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	9b df       	rcall	.-202    	; 0x33a <RGB_LED_INIT>
 404:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	status = Door_Motor_Init(&door_motor);
 408:	87 e6       	ldi	r24, 0x67	; 103
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	3c de       	rcall	.-904    	; 0x86 <Door_Motor_Init>
 40e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	status = Keypad_Init(&keypad__,password);
 412:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 416:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41a:	88 e7       	ldi	r24, 0x78	; 120
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	ea de       	rcall	.-556    	; 0x1f4 <Keypad_Init>
 420:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	status = Buzzer_INIT(&buzzer_);
 424:	83 e6       	ldi	r24, 0x63	; 99
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	1a de       	rcall	.-972    	; 0x5e <Buzzer_INIT>
 42a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 42e:	08 95       	ret

00000430 <Temperature>:
	Door_Flag = True ;
}

void Temperature(void){
	// sense the temperature of the room
	status = ADC_Read(temp_sensor,&value);
 430:	6b ec       	ldi	r22, 0xCB	; 203
 432:	71 e0       	ldi	r23, 0x01	; 1
 434:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <temp_sensor>
 438:	4a d1       	rcall	.+660    	; 0x6ce <ADC_Read>
 43a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	// Convert the ADC value to temperature in degrees Celsius.
	TMP = (uint16)(round(((value * 5.0/1024.0)-0.5)*100.0));
 43e:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <value>
 442:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <value+0x1>
 446:	07 2e       	mov	r0, r23
 448:	00 0c       	add	r0, r0
 44a:	88 0b       	sbc	r24, r24
 44c:	99 0b       	sbc	r25, r25
 44e:	ed d3       	rcall	.+2010   	; 0xc2a <__floatsisf>
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	40 ea       	ldi	r20, 0xA0	; 160
 456:	50 e4       	ldi	r21, 0x40	; 64
 458:	74 d4       	rcall	.+2280   	; 0xd42 <__mulsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 e8       	ldi	r20, 0x80	; 128
 460:	5a e3       	ldi	r21, 0x3A	; 58
 462:	6f d4       	rcall	.+2270   	; 0xd42 <__mulsf3>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	5f e3       	ldi	r21, 0x3F	; 63
 46c:	e3 d2       	rcall	.+1478   	; 0xa34 <__subsf3>
 46e:	20 e0       	ldi	r18, 0x00	; 0
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	48 ec       	ldi	r20, 0xC8	; 200
 474:	52 e4       	ldi	r21, 0x42	; 66
 476:	65 d4       	rcall	.+2250   	; 0xd42 <__mulsf3>
 478:	c7 d4       	rcall	.+2446   	; 0xe08 <round>
 47a:	a9 d3       	rcall	.+1874   	; 0xbce <__fixunssfsi>
 47c:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <TMP+0x1>
 480:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <TMP>
	// choose the suitable state
	if(TMP < 20 ){
 484:	64 31       	cpi	r22, 0x14	; 20
 486:	71 05       	cpc	r23, r1
 488:	7c f4       	brge	.+30     	; 0x4a8 <__stack+0x49>
		motor_speed =  FAN_STOP ;
 48a:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <motor_speed+0x1>
 48e:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 492:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <motor_en>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	aa d2       	rcall	.+1364   	; 0x9f0 <PWM_Write>
		status = RGB_LED_BLUE(&rgb);
 49c:	8f e6       	ldi	r24, 0x6F	; 111
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	6a df       	rcall	.-300    	; 0x376 <RGB_LED_BLUE>
 4a2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 4a6:	08 95       	ret
	}
	else if(TMP >= 20 && TMP <=30) {
 4a8:	ab 01       	movw	r20, r22
 4aa:	44 51       	subi	r20, 0x14	; 20
 4ac:	51 09       	sbc	r21, r1
 4ae:	4b 30       	cpi	r20, 0x0B	; 11
 4b0:	51 05       	cpc	r21, r1
 4b2:	48 f5       	brcc	.+82     	; 0x506 <__stack+0xa7>
		motor_speed = (uint16)(round(512 + (TMP-20) * 511/10.0) );
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	31 e0       	ldi	r19, 0x01	; 1
 4b8:	42 9f       	mul	r20, r18
 4ba:	c0 01       	movw	r24, r0
 4bc:	43 9f       	mul	r20, r19
 4be:	90 0d       	add	r25, r0
 4c0:	52 9f       	mul	r21, r18
 4c2:	90 0d       	add	r25, r0
 4c4:	11 24       	eor	r1, r1
 4c6:	bc 01       	movw	r22, r24
 4c8:	99 0f       	add	r25, r25
 4ca:	88 0b       	sbc	r24, r24
 4cc:	99 0b       	sbc	r25, r25
 4ce:	ad d3       	rcall	.+1882   	; 0xc2a <__floatsisf>
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	40 e2       	ldi	r20, 0x20	; 32
 4d6:	51 e4       	ldi	r21, 0x41	; 65
 4d8:	12 d3       	rcall	.+1572   	; 0xafe <__divsf3>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	54 e4       	ldi	r21, 0x44	; 68
 4e2:	a9 d2       	rcall	.+1362   	; 0xa36 <__addsf3>
 4e4:	91 d4       	rcall	.+2338   	; 0xe08 <round>
 4e6:	73 d3       	rcall	.+1766   	; 0xbce <__fixunssfsi>
 4e8:	dc 01       	movw	r26, r24
 4ea:	cb 01       	movw	r24, r22
 4ec:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <motor_speed+0x1>
 4f0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 4f4:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <motor_en>
 4f8:	7b d2       	rcall	.+1270   	; 0x9f0 <PWM_Write>
		status = RGB_LED_GREEN(&rgb);
 4fa:	8f e6       	ldi	r24, 0x6F	; 111
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	4b df       	rcall	.-362    	; 0x396 <RGB_LED_GREEN>
 500:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 504:	08 95       	ret
	}
	else if(TMP > 30){
 506:	6f 31       	cpi	r22, 0x1F	; 31
 508:	71 05       	cpc	r23, r1
 50a:	74 f0       	brlt	.+28     	; 0x528 <__stack+0xc9>
		motor_speed = FAN_MAX_SPEED ;
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	93 e0       	ldi	r25, 0x03	; 3
 510:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <motor_speed+0x1>
 514:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <motor_speed>
		PWM_Write(motor_speed,motor_en);
 518:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <motor_en>
 51c:	69 d2       	rcall	.+1234   	; 0x9f0 <PWM_Write>
		status = RGB_LED_RED(&rgb);
 51e:	8f e6       	ldi	r24, 0x6F	; 111
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	19 df       	rcall	.-462    	; 0x356 <RGB_LED_RED>
 524:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 528:	08 95       	ret

0000052a <Lighting>:
}


void Lighting(void) {
	// Read lighting sensor ADC value and convert it to a percentage (0-100%) based on a 403 max value.
	status = ADC_Read(lighting_sensor,&value);
 52a:	6b ec       	ldi	r22, 0xCB	; 203
 52c:	71 e0       	ldi	r23, 0x01	; 1
 52e:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <lighting_sensor>
 532:	cd d0       	rcall	.+410    	; 0x6ce <ADC_Read>
 534:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	Light = (uint16)(100 - round(value * 100.0/403.0));
 538:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <value>
 53c:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <value+0x1>
 540:	07 2e       	mov	r0, r23
 542:	00 0c       	add	r0, r0
 544:	88 0b       	sbc	r24, r24
 546:	99 0b       	sbc	r25, r25
 548:	70 d3       	rcall	.+1760   	; 0xc2a <__floatsisf>
 54a:	20 e0       	ldi	r18, 0x00	; 0
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	48 ec       	ldi	r20, 0xC8	; 200
 550:	52 e4       	ldi	r21, 0x42	; 66
 552:	f7 d3       	rcall	.+2030   	; 0xd42 <__mulsf3>
 554:	20 e0       	ldi	r18, 0x00	; 0
 556:	30 e8       	ldi	r19, 0x80	; 128
 558:	49 ec       	ldi	r20, 0xC9	; 201
 55a:	53 e4       	ldi	r21, 0x43	; 67
 55c:	d0 d2       	rcall	.+1440   	; 0xafe <__divsf3>
 55e:	54 d4       	rcall	.+2216   	; 0xe08 <round>
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	88 ec       	ldi	r24, 0xC8	; 200
 56a:	92 e4       	ldi	r25, 0x42	; 66
 56c:	63 d2       	rcall	.+1222   	; 0xa34 <__subsf3>
 56e:	2f d3       	rcall	.+1630   	; 0xbce <__fixunssfsi>
 570:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <Light+0x1>
 574:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <Light>
	// Convert the light percentage (0-100%) to a PWM value (0-1023) for LED brightness control.
	led_brightness = (uint16)(round(Light *1023.0/100));
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	54 d3       	rcall	.+1704   	; 0xc26 <__floatunsisf>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 ec       	ldi	r19, 0xC0	; 192
 582:	4f e7       	ldi	r20, 0x7F	; 127
 584:	54 e4       	ldi	r21, 0x44	; 68
 586:	dd d3       	rcall	.+1978   	; 0xd42 <__mulsf3>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	48 ec       	ldi	r20, 0xC8	; 200
 58e:	52 e4       	ldi	r21, 0x42	; 66
 590:	b6 d2       	rcall	.+1388   	; 0xafe <__divsf3>
 592:	3a d4       	rcall	.+2164   	; 0xe08 <round>
 594:	1c d3       	rcall	.+1592   	; 0xbce <__fixunssfsi>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <led_brightness+0x1>
 59e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <led_brightness>
	PWM_Write(led_brightness,lighting_led);
 5a2:	60 91 77 00 	lds	r22, 0x0077	; 0x800077 <lighting_led>
 5a6:	24 d2       	rcall	.+1096   	; 0x9f0 <PWM_Write>
 5a8:	08 95       	ret

000005aa <Open_Door>:
}
															

// open door
void Open_Door(void){
	status = Door_Motor_Open(&door_motor);
 5aa:	87 e6       	ldi	r24, 0x67	; 103
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	74 dd       	rcall	.-1304   	; 0x98 <Door_Motor_Open>
 5b0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b4:	2f e3       	ldi	r18, 0x3F	; 63
 5b6:	8d e0       	ldi	r24, 0x0D	; 13
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	80 40       	sbci	r24, 0x00	; 0
 5be:	90 40       	sbci	r25, 0x00	; 0
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <Open_Door+0x10>
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <Open_Door+0x1a>
 5c4:	00 00       	nop
	_delay_ms(1000);
	status = Door_Motor_Stop(&door_motor);
 5c6:	87 e6       	ldi	r24, 0x67	; 103
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	7e dd       	rcall	.-1284   	; 0xc8 <Door_Motor_Stop>
 5cc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 5d0:	2f e3       	ldi	r18, 0x3F	; 63
 5d2:	82 e4       	ldi	r24, 0x42	; 66
 5d4:	9f e0       	ldi	r25, 0x0F	; 15
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <Open_Door+0x2c>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <Open_Door+0x36>
 5e0:	00 00       	nop
	_delay_ms(5000);
	status = Door_Motor_Close(&door_motor);
 5e2:	87 e6       	ldi	r24, 0x67	; 103
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	64 dd       	rcall	.-1336   	; 0xb0 <Door_Motor_Close>
 5e8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 5ec:	2f e3       	ldi	r18, 0x3F	; 63
 5ee:	8d e0       	ldi	r24, 0x0D	; 13
 5f0:	93 e0       	ldi	r25, 0x03	; 3
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <Open_Door+0x48>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <Open_Door+0x52>
 5fc:	00 00       	nop
	_delay_ms(1000);
	status = Door_Motor_Stop(&door_motor);
 5fe:	87 e6       	ldi	r24, 0x67	; 103
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	62 dd       	rcall	.-1340   	; 0xc8 <Door_Motor_Stop>
 604:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 608:	08 95       	ret

0000060a <main>:
uint8 *password = "1234";


int main(void)
{
	Initialize();
 60a:	dd de       	rcall	.-582    	; 0x3c6 <Initialize>
	USART_SendStr("Welcome , Enter the password on Keypad \n\r");
 60c:	83 ec       	ldi	r24, 0xC3	; 195
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	05 d2       	rcall	.+1034   	; 0xa1c <USART_SendStr>
    /* Replace with your application code */
    while (1) 
    {
		// disable the keypad if the user enter the password true
		if(!IsPassTrue){
 612:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
 616:	81 11       	cpse	r24, r1
 618:	0b c0       	rjmp	.+22     	; 0x630 <main+0x26>
			status = Keypad_Get_Check_Password(&keypad__,EnterPass,&IsPassTrue,&Door_Flag);
 61a:	27 eb       	ldi	r18, 0xB7	; 183
 61c:	31 e0       	ldi	r19, 0x01	; 1
 61e:	46 eb       	ldi	r20, 0xB6	; 182
 620:	51 e0       	ldi	r21, 0x01	; 1
 622:	62 ec       	ldi	r22, 0xC2	; 194
 624:	71 e0       	ldi	r23, 0x01	; 1
 626:	88 e7       	ldi	r24, 0x78	; 120
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	1a de       	rcall	.-972    	; 0x260 <Keypad_Get_Check_Password>
 62c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
		}
		
		if(IsPassTrue || Door_Flag){
 630:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
 634:	81 11       	cpse	r24, r1
 636:	04 c0       	rjmp	.+8      	; 0x640 <main+0x36>
 638:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Door_Flag>
 63c:	88 23       	and	r24, r24
 63e:	11 f1       	breq	.+68     	; 0x684 <main+0x7a>
			// make the door open and close one time 
			if(flag){
 640:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <flag>
 644:	88 23       	and	r24, r24
 646:	b9 f0       	breq	.+46     	; 0x676 <main+0x6c>
				Open_Door();
 648:	b0 df       	rcall	.-160    	; 0x5aa <Open_Door>
				if(Door_Flag){
 64a:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <Door_Flag>
 64e:	88 23       	and	r24, r24
 650:	21 f0       	breq	.+8      	; 0x65a <main+0x50>
					USART_SendStr("Door is opened using face detection. Welcome to your Home (: \n\r");
 652:	8d ee       	ldi	r24, 0xED	; 237
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	e2 d1       	rcall	.+964    	; 0xa1c <USART_SendStr>
 658:	07 c0       	rjmp	.+14     	; 0x668 <main+0x5e>
				}
				else if(IsPassTrue){
 65a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <__data_end>
 65e:	88 23       	and	r24, r24
 660:	19 f0       	breq	.+6      	; 0x668 <main+0x5e>
					USART_SendStr("Door is opened using Password . Welcome to your Home (: \n\r");
 662:	8d e2       	ldi	r24, 0x2D	; 45
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	da d1       	rcall	.+948    	; 0xa1c <USART_SendStr>
				}
				status = Buzzer_Stop(&buzzer_);
 668:	83 e6       	ldi	r24, 0x63	; 99
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	05 dd       	rcall	.-1526   	; 0x78 <Buzzer_Stop>
 66e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
				flag = False;
 672:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <flag>
			}
			
			// if anyone in the house get sense from the sensors 
			if (PIR_Flag){
 676:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <PIR_Flag>
 67a:	88 23       	and	r24, r24
 67c:	51 f2       	breq	.-108    	; 0x612 <main+0x8>
				Temperature();
 67e:	d8 de       	rcall	.-592    	; 0x430 <Temperature>
				Lighting();
 680:	54 df       	rcall	.-344    	; 0x52a <Lighting>
 682:	c7 cf       	rjmp	.-114    	; 0x612 <main+0x8>
			}
			//PrintStatus();
		}
		else{
			USART_SendStr("Password is wrong ,Try again\n\r");
 684:	88 e6       	ldi	r24, 0x68	; 104
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	c9 d1       	rcall	.+914    	; 0xa1c <USART_SendStr>
			// if you enter the password wrong three times the buzzer will play 
			status = Buzzer_Play(&buzzer_);
 68a:	83 e6       	ldi	r24, 0x63	; 99
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	ed dc       	rcall	.-1574   	; 0x6a <Buzzer_Play>
 690:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <status>
 694:	be cf       	rjmp	.-132    	; 0x612 <main+0x8>

00000696 <ADC_Initialize>:
	else {
		// Disable ADC Module
		ADC_DISABLE();
	}
	return status ;
}
 696:	fc 01       	movw	r30, r24
 698:	89 2b       	or	r24, r25
 69a:	b9 f0       	breq	.+46     	; 0x6ca <ADC_Initialize+0x34>
 69c:	86 b1       	in	r24, 0x06	; 6
 69e:	8f 77       	andi	r24, 0x7F	; 127
 6a0:	86 b9       	out	0x06, r24	; 6
 6a2:	87 b1       	in	r24, 0x07	; 7
 6a4:	90 81       	ld	r25, Z
 6a6:	40 e4       	ldi	r20, 0x40	; 64
 6a8:	94 9f       	mul	r25, r20
 6aa:	90 01       	movw	r18, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	8f 73       	andi	r24, 0x3F	; 63
 6b0:	28 2b       	or	r18, r24
 6b2:	27 b9       	out	0x07, r18	; 7
 6b4:	96 b1       	in	r25, 0x06	; 6
 6b6:	81 81       	ldd	r24, Z+1	; 0x01
 6b8:	98 7f       	andi	r25, 0xF8	; 248
 6ba:	87 70       	andi	r24, 0x07	; 7
 6bc:	89 2b       	or	r24, r25
 6be:	86 b9       	out	0x06, r24	; 6
 6c0:	86 b1       	in	r24, 0x06	; 6
 6c2:	80 68       	ori	r24, 0x80	; 128
 6c4:	86 b9       	out	0x06, r24	; 6
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	08 95       	ret
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	08 95       	ret

000006ce <ADC_Read>:

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
	if(NULL == data)
 6ce:	61 15       	cp	r22, r1
 6d0:	71 05       	cpc	r23, r1
 6d2:	89 f0       	breq	.+34     	; 0x6f6 <ADC_Read+0x28>
	{
		status = RET_NOT_OK;
	}
	else {
		// Configure the required pin as analog input
		ADCx_SELECT_PIN(channal);
 6d4:	97 b1       	in	r25, 0x07	; 7
 6d6:	90 7f       	andi	r25, 0xF0	; 240
 6d8:	8f 70       	andi	r24, 0x0F	; 15
 6da:	89 2b       	or	r24, r25
 6dc:	87 b9       	out	0x07, r24	; 7
		// Start Conversion
		ADC_START_CONVERSION();
 6de:	86 b1       	in	r24, 0x06	; 6
 6e0:	80 64       	ori	r24, 0x40	; 64
 6e2:	86 b9       	out	0x06, r24	; 6
		// wait 
		while(ADCSRA & (1 << BIT6));
 6e4:	36 99       	sbic	0x06, 6	; 6
 6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <ADC_Read+0x16>
		// get the reading
		*data = ADC;
 6e8:	84 b1       	in	r24, 0x04	; 4
 6ea:	95 b1       	in	r25, 0x05	; 5
 6ec:	fb 01       	movw	r30, r22
 6ee:	91 83       	std	Z+1, r25	; 0x01
 6f0:	80 83       	st	Z, r24
	}
	return status ;
}

STD_ReturnType ADC_Read(ADCx_INPUT_Channal channal,sint16 *data){
	STD_ReturnType status = RET_OK;
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret
	if(NULL == data)
	{
		status = RET_NOT_OK;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
		while(ADCSRA & (1 << BIT6));
		// get the reading
		*data = ADC;
	}
	return status ;
}
 6f8:	08 95       	ret

000006fa <GPIO_PIN_Write_logic>:
	}
	else{
		TOGGLE_BIN(*PORT_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	e9 f1       	breq	.+122    	; 0x778 <GPIO_PIN_Write_logic+0x7e>
 6fe:	61 11       	cpse	r22, r1
 700:	1d c0       	rjmp	.+58     	; 0x73c <GPIO_PIN_Write_logic+0x42>
 702:	dc 01       	movw	r26, r24
 704:	12 96       	adiw	r26, 0x02	; 2
 706:	ec 91       	ld	r30, X
 708:	12 97       	sbiw	r26, 0x02	; 2
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	ef 54       	subi	r30, 0x4F	; 79
 712:	ff 4f       	sbci	r31, 0xFF	; 255
 714:	01 90       	ld	r0, Z+
 716:	f0 81       	ld	r31, Z
 718:	e0 2d       	mov	r30, r0
 71a:	40 81       	ld	r20, Z
 71c:	21 e0       	ldi	r18, 0x01	; 1
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	b9 01       	movw	r22, r18
 722:	13 96       	adiw	r26, 0x03	; 3
 724:	0c 90       	ld	r0, X
 726:	02 c0       	rjmp	.+4      	; 0x72c <GPIO_PIN_Write_logic+0x32>
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <GPIO_PIN_Write_logic+0x2e>
 730:	cb 01       	movw	r24, r22
 732:	80 95       	com	r24
 734:	84 23       	and	r24, r20
 736:	80 83       	st	Z, r24
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	08 95       	ret
 73c:	61 30       	cpi	r22, 0x01	; 1
 73e:	f1 f4       	brne	.+60     	; 0x77c <GPIO_PIN_Write_logic+0x82>
 740:	dc 01       	movw	r26, r24
 742:	12 96       	adiw	r26, 0x02	; 2
 744:	ec 91       	ld	r30, X
 746:	12 97       	sbiw	r26, 0x02	; 2
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	ee 0f       	add	r30, r30
 74c:	ff 1f       	adc	r31, r31
 74e:	ef 54       	subi	r30, 0x4F	; 79
 750:	ff 4f       	sbci	r31, 0xFF	; 255
 752:	01 90       	ld	r0, Z+
 754:	f0 81       	ld	r31, Z
 756:	e0 2d       	mov	r30, r0
 758:	40 81       	ld	r20, Z
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	b9 01       	movw	r22, r18
 760:	13 96       	adiw	r26, 0x03	; 3
 762:	0c 90       	ld	r0, X
 764:	02 c0       	rjmp	.+4      	; 0x76a <GPIO_PIN_Write_logic+0x70>
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	0a 94       	dec	r0
 76c:	e2 f7       	brpl	.-8      	; 0x766 <GPIO_PIN_Write_logic+0x6c>
 76e:	cb 01       	movw	r24, r22
 770:	84 2b       	or	r24, r20
 772:	80 83       	st	Z, r24
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	08 95       	ret
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	08 95       	ret

00000780 <GPIO_PIN_Read_Logic>:

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin || NULL == _logic){
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	f9 f0       	breq	.+62     	; 0x7c2 <GPIO_PIN_Read_Logic+0x42>
 784:	61 15       	cp	r22, r1
 786:	71 05       	cpc	r23, r1
 788:	f1 f0       	breq	.+60     	; 0x7c6 <GPIO_PIN_Read_Logic+0x46>
		Ret = RET_NOT_OK ;
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
 78a:	dc 01       	movw	r26, r24
 78c:	12 96       	adiw	r26, 0x02	; 2
 78e:	ec 91       	ld	r30, X
 790:	12 97       	sbiw	r26, 0x02	; 2
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	ee 0f       	add	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	eb 55       	subi	r30, 0x5B	; 91
 79a:	ff 4f       	sbci	r31, 0xFF	; 255
 79c:	01 90       	ld	r0, Z+
 79e:	f0 81       	ld	r31, Z
 7a0:	e0 2d       	mov	r30, r0
 7a2:	20 81       	ld	r18, Z
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	f9 01       	movw	r30, r18
 7a8:	13 96       	adiw	r26, 0x03	; 3
 7aa:	0c 90       	ld	r0, X
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <GPIO_PIN_Read_Logic+0x32>
 7ae:	f5 95       	asr	r31
 7b0:	e7 95       	ror	r30
 7b2:	0a 94       	dec	r0
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <GPIO_PIN_Read_Logic+0x2e>
 7b6:	cf 01       	movw	r24, r30
 7b8:	81 70       	andi	r24, 0x01	; 1
 7ba:	db 01       	movw	r26, r22
 7bc:	8c 93       	st	X, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Read_Logic(GPIO_PIN_CONFIG *_pin,GPIO_PIN_LOGIC *_logic){
	STD_ReturnType Ret = RET_OK ;
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	08 95       	ret
	if(NULL == _pin || NULL == _logic){
		Ret = RET_NOT_OK ;
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret
 7c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{
		*_logic = READ_BIN(*PIN_REG[_pin->pin_port],_pin->pin_num);
	}
	return Ret ;
}
 7c8:	08 95       	ret

000007ca <GPIO_PIN_Give_Direction>:

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 7ca:	00 97       	sbiw	r24, 0x00	; 0
 7cc:	e9 f1       	breq	.+122    	; 0x848 <GPIO_PIN_Give_Direction+0x7e>
		Ret = RET_NOT_OK ;
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
 7ce:	61 30       	cpi	r22, 0x01	; 1
 7d0:	e1 f4       	brne	.+56     	; 0x80a <GPIO_PIN_Give_Direction+0x40>
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
 7d2:	dc 01       	movw	r26, r24
 7d4:	12 96       	adiw	r26, 0x02	; 2
 7d6:	ec 91       	ld	r30, X
 7d8:	12 97       	sbiw	r26, 0x02	; 2
 7da:	f0 e0       	ldi	r31, 0x00	; 0
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	e5 55       	subi	r30, 0x55	; 85
 7e2:	ff 4f       	sbci	r31, 0xFF	; 255
 7e4:	01 90       	ld	r0, Z+
 7e6:	f0 81       	ld	r31, Z
 7e8:	e0 2d       	mov	r30, r0
 7ea:	40 81       	ld	r20, Z
 7ec:	21 e0       	ldi	r18, 0x01	; 1
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	b9 01       	movw	r22, r18
 7f2:	13 96       	adiw	r26, 0x03	; 3
 7f4:	0c 90       	ld	r0, X
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <GPIO_PIN_Give_Direction+0x32>
 7f8:	66 0f       	add	r22, r22
 7fa:	77 1f       	adc	r23, r23
 7fc:	0a 94       	dec	r0
 7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <GPIO_PIN_Give_Direction+0x2e>
 800:	cb 01       	movw	r24, r22
 802:	84 2b       	or	r24, r20
 804:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	08 95       	ret
	}
	else{
		if(GPIO_PIN_OUTPUT ==  _direction){
			*DDR_REG[_pin->pin_port] |= (1 << _pin->pin_num);
		}
		else if (GPIO_PIN_INPUT  ==  _direction){
 80a:	61 11       	cpse	r22, r1
 80c:	1f c0       	rjmp	.+62     	; 0x84c <GPIO_PIN_Give_Direction+0x82>
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
 80e:	dc 01       	movw	r26, r24
 810:	12 96       	adiw	r26, 0x02	; 2
 812:	ec 91       	ld	r30, X
 814:	12 97       	sbiw	r26, 0x02	; 2
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	ee 0f       	add	r30, r30
 81a:	ff 1f       	adc	r31, r31
 81c:	e5 55       	subi	r30, 0x55	; 85
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	01 90       	ld	r0, Z+
 822:	f0 81       	ld	r31, Z
 824:	e0 2d       	mov	r30, r0
 826:	40 81       	ld	r20, Z
 828:	21 e0       	ldi	r18, 0x01	; 1
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	b9 01       	movw	r22, r18
 82e:	13 96       	adiw	r26, 0x03	; 3
 830:	0c 90       	ld	r0, X
 832:	02 c0       	rjmp	.+4      	; 0x838 <GPIO_PIN_Give_Direction+0x6e>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	0a 94       	dec	r0
 83a:	e2 f7       	brpl	.-8      	; 0x834 <GPIO_PIN_Give_Direction+0x6a>
 83c:	cb 01       	movw	r24, r22
 83e:	80 95       	com	r24
 840:	84 23       	and	r24, r20
 842:	80 83       	st	Z, r24
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	08 95       	ret
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	08 95       	ret
	}
	return Ret ;
}

STD_ReturnType GPIO_PIN_Give_Direction(GPIO_PIN_CONFIG *_pin,GPIO_PIN_DIRECTION _direction){
	STD_ReturnType Ret = RET_OK ;
 84c:	81 e0       	ldi	r24, 0x01	; 1
			*DDR_REG[_pin->pin_port] &= ~(1 << _pin->pin_num);
		}
		else {/*nothing*/}
	}
	return Ret ;
}
 84e:	08 95       	ret

00000850 <GPIO_PIN_Initialize>:
#include "GPIO.h"
volatile uint8 *PORT_REG[] = { &PORTB, &PORTC, &PORTD };
volatile uint8 *DDR_REG[] = { &DDRB, &DDRC, &DDRD };
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	39 f0       	breq	.+14     	; 0x866 <GPIO_PIN_Initialize+0x16>
 858:	ec 01       	movw	r28, r24
		Ret = RET_NOT_OK ;
	}
	else{
		/*Direction Initialization */
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
 85a:	69 81       	ldd	r22, Y+1	; 0x01
 85c:	b6 df       	rcall	.-148    	; 0x7ca <GPIO_PIN_Give_Direction>
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
 85e:	68 81       	ld	r22, Y
 860:	ce 01       	movw	r24, r28
 862:	4b df       	rcall	.-362    	; 0x6fa <GPIO_PIN_Write_logic>
 864:	01 c0       	rjmp	.+2      	; 0x868 <GPIO_PIN_Initialize+0x18>
volatile uint8 *PIN_REG[] = { &PINB, &PINC, &PIND };
/**************************************Pin Functions******************************************/
STD_ReturnType GPIO_PIN_Initialize(GPIO_PIN_CONFIG *_pin){
	STD_ReturnType Ret = RET_OK ;
	if(NULL == _pin){
		Ret = RET_NOT_OK ;
 866:	80 e0       	ldi	r24, 0x00	; 0
		Ret = GPIO_PIN_Give_Direction(_pin ,_pin->pin_direction);
		/*Logic Initialization */
		Ret = GPIO_PIN_Write_logic(_pin,_pin->pin_logic);
	}
	return Ret ;
}
 868:	df 91       	pop	r29
 86a:	cf 91       	pop	r28
 86c:	08 95       	ret

0000086e <INT0_Init>:
		else{
			/*nothing*/
		}
	}
	return status ;
}
 86e:	fc 01       	movw	r30, r24
 870:	9b b7       	in	r25, 0x3b	; 59
 872:	9f 7b       	andi	r25, 0xBF	; 191
 874:	9b bf       	out	0x3b, r25	; 59
 876:	91 b3       	in	r25, 0x11	; 17
 878:	9b 7f       	andi	r25, 0xFB	; 251
 87a:	91 bb       	out	0x11, r25	; 17
 87c:	95 b7       	in	r25, 0x35	; 53
 87e:	23 81       	ldd	r18, Z+3	; 0x03
 880:	9c 7f       	andi	r25, 0xFC	; 252
 882:	92 2b       	or	r25, r18
 884:	95 bf       	out	0x35, r25	; 53
 886:	80 81       	ld	r24, Z
 888:	91 81       	ldd	r25, Z+1	; 0x01
 88a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <INT0_InterruptHandler+0x1>
 88e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <INT0_InterruptHandler>
 892:	8b b7       	in	r24, 0x3b	; 59
 894:	80 64       	ori	r24, 0x40	; 64
 896:	8b bf       	out	0x3b, r24	; 59
 898:	08 95       	ret

0000089a <INT1_Init>:
 89a:	fc 01       	movw	r30, r24
 89c:	9b b7       	in	r25, 0x3b	; 59
 89e:	9f 77       	andi	r25, 0x7F	; 127
 8a0:	9b bf       	out	0x3b, r25	; 59
 8a2:	91 b3       	in	r25, 0x11	; 17
 8a4:	97 7f       	andi	r25, 0xF7	; 247
 8a6:	91 bb       	out	0x11, r25	; 17
 8a8:	45 b7       	in	r20, 0x35	; 53
 8aa:	93 81       	ldd	r25, Z+3	; 0x03
 8ac:	29 2f       	mov	r18, r25
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	94 2f       	mov	r25, r20
 8ba:	93 7f       	andi	r25, 0xF3	; 243
 8bc:	29 2b       	or	r18, r25
 8be:	25 bf       	out	0x35, r18	; 53
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <INT1_InterruptHandler+0x1>
 8c8:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <INT1_InterruptHandler>
 8cc:	8b b7       	in	r24, 0x3b	; 59
 8ce:	80 68       	ori	r24, 0x80	; 128
 8d0:	8b bf       	out	0x3b, r24	; 59
 8d2:	08 95       	ret

000008d4 <INTx_Initialize>:
 8d4:	00 97       	sbiw	r24, 0x00	; 0
 8d6:	61 f0       	breq	.+24     	; 0x8f0 <INTx_Initialize+0x1c>
 8d8:	fc 01       	movw	r30, r24
 8da:	22 81       	ldd	r18, Z+2	; 0x02
 8dc:	21 11       	cpse	r18, r1
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <INTx_Initialize+0x10>
 8e0:	c6 df       	rcall	.-116    	; 0x86e <INT0_Init>
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <INTx_Initialize+0x16>
 8e4:	21 30       	cpi	r18, 0x01	; 1
 8e6:	09 f4       	brne	.+2      	; 0x8ea <INTx_Initialize+0x16>
 8e8:	d8 df       	rcall	.-80     	; 0x89a <INT1_Init>
 8ea:	78 94       	sei
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	08 95       	ret

000008f4 <__vector_1>:
	INT1_INTERRUPT_DISABLE();
}


/*-------------------------------------ISR Function-----------------------------------------*/
ISR(INT0_vect){
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	ef 93       	push	r30
 914:	ff 93       	push	r31
	INT0_CLEAR_FLAG();
 916:	8a b7       	in	r24, 0x3a	; 58
 918:	8f 7b       	andi	r24, 0xBF	; 191
 91a:	8a bf       	out	0x3a, r24	; 58
	
	if(INT0_InterruptHandler){
 91c:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <INT0_InterruptHandler>
 920:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <INT0_InterruptHandler+0x1>
 924:	30 97       	sbiw	r30, 0x00	; 0
 926:	09 f0       	breq	.+2      	; 0x92a <__vector_1+0x36>
		INT0_InterruptHandler();
 928:	09 95       	icall
	}
}
 92a:	ff 91       	pop	r31
 92c:	ef 91       	pop	r30
 92e:	bf 91       	pop	r27
 930:	af 91       	pop	r26
 932:	9f 91       	pop	r25
 934:	8f 91       	pop	r24
 936:	7f 91       	pop	r23
 938:	6f 91       	pop	r22
 93a:	5f 91       	pop	r21
 93c:	4f 91       	pop	r20
 93e:	3f 91       	pop	r19
 940:	2f 91       	pop	r18
 942:	0f 90       	pop	r0
 944:	0f be       	out	0x3f, r0	; 63
 946:	0f 90       	pop	r0
 948:	1f 90       	pop	r1
 94a:	18 95       	reti

0000094c <__vector_2>:

ISR(INT1_vect){
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	2f 93       	push	r18
 958:	3f 93       	push	r19
 95a:	4f 93       	push	r20
 95c:	5f 93       	push	r21
 95e:	6f 93       	push	r22
 960:	7f 93       	push	r23
 962:	8f 93       	push	r24
 964:	9f 93       	push	r25
 966:	af 93       	push	r26
 968:	bf 93       	push	r27
 96a:	ef 93       	push	r30
 96c:	ff 93       	push	r31
	INT1_CLEAR_FLAG();
 96e:	8a b7       	in	r24, 0x3a	; 58
 970:	8f 77       	andi	r24, 0x7F	; 127
 972:	8a bf       	out	0x3a, r24	; 58
	
	if(INT1_InterruptHandler){
 974:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <INT1_InterruptHandler>
 978:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <INT1_InterruptHandler+0x1>
 97c:	30 97       	sbiw	r30, 0x00	; 0
 97e:	09 f0       	breq	.+2      	; 0x982 <__vector_2+0x36>
		INT1_InterruptHandler();
 980:	09 95       	icall
	}
}
 982:	ff 91       	pop	r31
 984:	ef 91       	pop	r30
 986:	bf 91       	pop	r27
 988:	af 91       	pop	r26
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	7f 91       	pop	r23
 990:	6f 91       	pop	r22
 992:	5f 91       	pop	r21
 994:	4f 91       	pop	r20
 996:	3f 91       	pop	r19
 998:	2f 91       	pop	r18
 99a:	0f 90       	pop	r0
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	0f 90       	pop	r0
 9a0:	1f 90       	pop	r1
 9a2:	18 95       	reti

000009a4 <PWM_Init>:
	}
	else {
		
	}
	return status ;
}
 9a4:	fc 01       	movw	r30, r24
 9a6:	89 2b       	or	r24, r25
 9a8:	09 f1       	breq	.+66     	; 0x9ec <PWM_Init+0x48>
 9aa:	97 b3       	in	r25, 0x17	; 23
 9ac:	92 60       	ori	r25, 0x02	; 2
 9ae:	97 bb       	out	0x17, r25	; 23
 9b0:	97 b3       	in	r25, 0x17	; 23
 9b2:	94 60       	ori	r25, 0x04	; 4
 9b4:	97 bb       	out	0x17, r25	; 23
 9b6:	88 e0       	ldi	r24, 0x08	; 8
 9b8:	8e bd       	out	0x2e, r24	; 46
 9ba:	83 e0       	ldi	r24, 0x03	; 3
 9bc:	8f bd       	out	0x2f, r24	; 47
 9be:	9f b5       	in	r25, 0x2f	; 47
 9c0:	9f 73       	andi	r25, 0x3F	; 63
 9c2:	90 68       	ori	r25, 0x80	; 128
 9c4:	9f bd       	out	0x2f, r25	; 47
 9c6:	9f b5       	in	r25, 0x2f	; 47
 9c8:	9f 7c       	andi	r25, 0xCF	; 207
 9ca:	90 62       	ori	r25, 0x20	; 32
 9cc:	9f bd       	out	0x2f, r25	; 47
 9ce:	8e b5       	in	r24, 0x2e	; 46
 9d0:	91 81       	ldd	r25, Z+1	; 0x01
 9d2:	87 7f       	andi	r24, 0xF7	; 247
 9d4:	89 2b       	or	r24, r25
 9d6:	8e bd       	out	0x2e, r24	; 46
 9d8:	8c ed       	ldi	r24, 0xDC	; 220
 9da:	95 e0       	ldi	r25, 0x05	; 5
 9dc:	9b bd       	out	0x2b, r25	; 43
 9de:	8a bd       	out	0x2a, r24	; 42
 9e0:	88 ee       	ldi	r24, 0xE8	; 232
 9e2:	93 e0       	ldi	r25, 0x03	; 3
 9e4:	99 bd       	out	0x29, r25	; 41
 9e6:	88 bd       	out	0x28, r24	; 40
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	08 95       	ret
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	08 95       	ret

000009f0 <PWM_Write>:

void PWM_Write(uint16 dutyCycle,PWM_PIN _pin){
	if(_pin == PWM_PIN_OC1A){
 9f0:	61 11       	cpse	r22, r1
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <PWM_Write+0xa>
		PWM_SET_DUTY_CYCLE_OCR1A(dutyCycle);
 9f4:	9b bd       	out	0x2b, r25	; 43
 9f6:	8a bd       	out	0x2a, r24	; 42
 9f8:	08 95       	ret
	}
	else if(_pin == PWM_PIN_OC1B){
 9fa:	61 30       	cpi	r22, 0x01	; 1
 9fc:	11 f4       	brne	.+4      	; 0xa02 <PWM_Write+0x12>
		PWM_SET_DUTY_CYCLE_OCR1B(dutyCycle);
 9fe:	99 bd       	out	0x29, r25	; 41
 a00:	88 bd       	out	0x28, r24	; 40
 a02:	08 95       	ret

00000a04 <USART_Init>:
#include "USART.h"
// Initialize the USART with the specified baud rate and frame format (8 data bits, 1 stop bit)
void USART_Init(void) {
	// Set baud rate
	unsigned int ubrr_value = MYUBRR;
	UBRRH = (unsigned char)(ubrr_value >> 8);   // High byte
 a04:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)ubrr_value;          // Low byte
 a06:	83 e3       	ldi	r24, 0x33	; 51
 a08:	89 b9       	out	0x09, r24	; 9

	// Enable transmitter (TXEN) in UCSRB
	UCSRB = (1 << TXEN);
 a0a:	88 e0       	ldi	r24, 0x08	; 8
 a0c:	8a b9       	out	0x0a, r24	; 10

	// Set frame format: 8 data bits, 1 stop bit, no parity
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
 a0e:	86 e8       	ldi	r24, 0x86	; 134
 a10:	80 bd       	out	0x20, r24	; 32
 a12:	08 95       	ret

00000a14 <USART_Trans>:
}

// Function to send a single character via USART
void USART_Trans(char data) {
	// Wait until the transmit buffer is empty (UDRE flag is set)
	while (!(UCSRA & (1 << UDRE)));
 a14:	5d 9b       	sbis	0x0b, 5	; 11
 a16:	fe cf       	rjmp	.-4      	; 0xa14 <USART_Trans>
	
	// Put the data into the USART data register (UDR), which sends the data
	UDR = data;
 a18:	8c b9       	out	0x0c, r24	; 12
 a1a:	08 95       	ret

00000a1c <USART_SendStr>:
}

// Function to send a string via USART
void USART_SendStr(const char* str) {
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	ec 01       	movw	r28, r24
	// Loop through the string until the null terminator is reached
	while (*str) {
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <USART_SendStr+0xc>
		USART_Trans(*str++);  // Transmit each character
 a24:	21 96       	adiw	r28, 0x01	; 1
 a26:	f6 df       	rcall	.-20     	; 0xa14 <USART_Trans>
}

// Function to send a string via USART
void USART_SendStr(const char* str) {
	// Loop through the string until the null terminator is reached
	while (*str) {
 a28:	88 81       	ld	r24, Y
 a2a:	81 11       	cpse	r24, r1
 a2c:	fb cf       	rjmp	.-10     	; 0xa24 <USART_SendStr+0x8>
		USART_Trans(*str++);  // Transmit each character
	}
}
 a2e:	df 91       	pop	r29
 a30:	cf 91       	pop	r28
 a32:	08 95       	ret

00000a34 <__subsf3>:
 a34:	50 58       	subi	r21, 0x80	; 128

00000a36 <__addsf3>:
 a36:	bb 27       	eor	r27, r27
 a38:	aa 27       	eor	r26, r26
 a3a:	0e d0       	rcall	.+28     	; 0xa58 <__addsf3x>
 a3c:	48 c1       	rjmp	.+656    	; 0xcce <__fp_round>
 a3e:	39 d1       	rcall	.+626    	; 0xcb2 <__fp_pscA>
 a40:	30 f0       	brcs	.+12     	; 0xa4e <__addsf3+0x18>
 a42:	3e d1       	rcall	.+636    	; 0xcc0 <__fp_pscB>
 a44:	20 f0       	brcs	.+8      	; 0xa4e <__addsf3+0x18>
 a46:	31 f4       	brne	.+12     	; 0xa54 <__addsf3+0x1e>
 a48:	9f 3f       	cpi	r25, 0xFF	; 255
 a4a:	11 f4       	brne	.+4      	; 0xa50 <__addsf3+0x1a>
 a4c:	1e f4       	brtc	.+6      	; 0xa54 <__addsf3+0x1e>
 a4e:	2e c1       	rjmp	.+604    	; 0xcac <__fp_nan>
 a50:	0e f4       	brtc	.+2      	; 0xa54 <__addsf3+0x1e>
 a52:	e0 95       	com	r30
 a54:	e7 fb       	bst	r30, 7
 a56:	24 c1       	rjmp	.+584    	; 0xca0 <__fp_inf>

00000a58 <__addsf3x>:
 a58:	e9 2f       	mov	r30, r25
 a5a:	4a d1       	rcall	.+660    	; 0xcf0 <__fp_split3>
 a5c:	80 f3       	brcs	.-32     	; 0xa3e <__addsf3+0x8>
 a5e:	ba 17       	cp	r27, r26
 a60:	62 07       	cpc	r22, r18
 a62:	73 07       	cpc	r23, r19
 a64:	84 07       	cpc	r24, r20
 a66:	95 07       	cpc	r25, r21
 a68:	18 f0       	brcs	.+6      	; 0xa70 <__addsf3x+0x18>
 a6a:	71 f4       	brne	.+28     	; 0xa88 <__addsf3x+0x30>
 a6c:	9e f5       	brtc	.+102    	; 0xad4 <__addsf3x+0x7c>
 a6e:	62 c1       	rjmp	.+708    	; 0xd34 <__fp_zero>
 a70:	0e f4       	brtc	.+2      	; 0xa74 <__addsf3x+0x1c>
 a72:	e0 95       	com	r30
 a74:	0b 2e       	mov	r0, r27
 a76:	ba 2f       	mov	r27, r26
 a78:	a0 2d       	mov	r26, r0
 a7a:	0b 01       	movw	r0, r22
 a7c:	b9 01       	movw	r22, r18
 a7e:	90 01       	movw	r18, r0
 a80:	0c 01       	movw	r0, r24
 a82:	ca 01       	movw	r24, r20
 a84:	a0 01       	movw	r20, r0
 a86:	11 24       	eor	r1, r1
 a88:	ff 27       	eor	r31, r31
 a8a:	59 1b       	sub	r21, r25
 a8c:	99 f0       	breq	.+38     	; 0xab4 <__addsf3x+0x5c>
 a8e:	59 3f       	cpi	r21, 0xF9	; 249
 a90:	50 f4       	brcc	.+20     	; 0xaa6 <__addsf3x+0x4e>
 a92:	50 3e       	cpi	r21, 0xE0	; 224
 a94:	68 f1       	brcs	.+90     	; 0xaf0 <__addsf3x+0x98>
 a96:	1a 16       	cp	r1, r26
 a98:	f0 40       	sbci	r31, 0x00	; 0
 a9a:	a2 2f       	mov	r26, r18
 a9c:	23 2f       	mov	r18, r19
 a9e:	34 2f       	mov	r19, r20
 aa0:	44 27       	eor	r20, r20
 aa2:	58 5f       	subi	r21, 0xF8	; 248
 aa4:	f3 cf       	rjmp	.-26     	; 0xa8c <__addsf3x+0x34>
 aa6:	46 95       	lsr	r20
 aa8:	37 95       	ror	r19
 aaa:	27 95       	ror	r18
 aac:	a7 95       	ror	r26
 aae:	f0 40       	sbci	r31, 0x00	; 0
 ab0:	53 95       	inc	r21
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__addsf3x+0x4e>
 ab4:	7e f4       	brtc	.+30     	; 0xad4 <__addsf3x+0x7c>
 ab6:	1f 16       	cp	r1, r31
 ab8:	ba 0b       	sbc	r27, r26
 aba:	62 0b       	sbc	r22, r18
 abc:	73 0b       	sbc	r23, r19
 abe:	84 0b       	sbc	r24, r20
 ac0:	ba f0       	brmi	.+46     	; 0xaf0 <__addsf3x+0x98>
 ac2:	91 50       	subi	r25, 0x01	; 1
 ac4:	a1 f0       	breq	.+40     	; 0xaee <__addsf3x+0x96>
 ac6:	ff 0f       	add	r31, r31
 ac8:	bb 1f       	adc	r27, r27
 aca:	66 1f       	adc	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	c2 f7       	brpl	.-16     	; 0xac2 <__addsf3x+0x6a>
 ad2:	0e c0       	rjmp	.+28     	; 0xaf0 <__addsf3x+0x98>
 ad4:	ba 0f       	add	r27, r26
 ad6:	62 1f       	adc	r22, r18
 ad8:	73 1f       	adc	r23, r19
 ada:	84 1f       	adc	r24, r20
 adc:	48 f4       	brcc	.+18     	; 0xaf0 <__addsf3x+0x98>
 ade:	87 95       	ror	r24
 ae0:	77 95       	ror	r23
 ae2:	67 95       	ror	r22
 ae4:	b7 95       	ror	r27
 ae6:	f7 95       	ror	r31
 ae8:	9e 3f       	cpi	r25, 0xFE	; 254
 aea:	08 f0       	brcs	.+2      	; 0xaee <__addsf3x+0x96>
 aec:	b3 cf       	rjmp	.-154    	; 0xa54 <__addsf3+0x1e>
 aee:	93 95       	inc	r25
 af0:	88 0f       	add	r24, r24
 af2:	08 f0       	brcs	.+2      	; 0xaf6 <__addsf3x+0x9e>
 af4:	99 27       	eor	r25, r25
 af6:	ee 0f       	add	r30, r30
 af8:	97 95       	ror	r25
 afa:	87 95       	ror	r24
 afc:	08 95       	ret

00000afe <__divsf3>:
 afe:	0c d0       	rcall	.+24     	; 0xb18 <__divsf3x>
 b00:	e6 c0       	rjmp	.+460    	; 0xcce <__fp_round>
 b02:	de d0       	rcall	.+444    	; 0xcc0 <__fp_pscB>
 b04:	40 f0       	brcs	.+16     	; 0xb16 <__divsf3+0x18>
 b06:	d5 d0       	rcall	.+426    	; 0xcb2 <__fp_pscA>
 b08:	30 f0       	brcs	.+12     	; 0xb16 <__divsf3+0x18>
 b0a:	21 f4       	brne	.+8      	; 0xb14 <__divsf3+0x16>
 b0c:	5f 3f       	cpi	r21, 0xFF	; 255
 b0e:	19 f0       	breq	.+6      	; 0xb16 <__divsf3+0x18>
 b10:	c7 c0       	rjmp	.+398    	; 0xca0 <__fp_inf>
 b12:	51 11       	cpse	r21, r1
 b14:	10 c1       	rjmp	.+544    	; 0xd36 <__fp_szero>
 b16:	ca c0       	rjmp	.+404    	; 0xcac <__fp_nan>

00000b18 <__divsf3x>:
 b18:	eb d0       	rcall	.+470    	; 0xcf0 <__fp_split3>
 b1a:	98 f3       	brcs	.-26     	; 0xb02 <__divsf3+0x4>

00000b1c <__divsf3_pse>:
 b1c:	99 23       	and	r25, r25
 b1e:	c9 f3       	breq	.-14     	; 0xb12 <__divsf3+0x14>
 b20:	55 23       	and	r21, r21
 b22:	b1 f3       	breq	.-20     	; 0xb10 <__divsf3+0x12>
 b24:	95 1b       	sub	r25, r21
 b26:	55 0b       	sbc	r21, r21
 b28:	bb 27       	eor	r27, r27
 b2a:	aa 27       	eor	r26, r26
 b2c:	62 17       	cp	r22, r18
 b2e:	73 07       	cpc	r23, r19
 b30:	84 07       	cpc	r24, r20
 b32:	38 f0       	brcs	.+14     	; 0xb42 <__divsf3_pse+0x26>
 b34:	9f 5f       	subi	r25, 0xFF	; 255
 b36:	5f 4f       	sbci	r21, 0xFF	; 255
 b38:	22 0f       	add	r18, r18
 b3a:	33 1f       	adc	r19, r19
 b3c:	44 1f       	adc	r20, r20
 b3e:	aa 1f       	adc	r26, r26
 b40:	a9 f3       	breq	.-22     	; 0xb2c <__divsf3_pse+0x10>
 b42:	33 d0       	rcall	.+102    	; 0xbaa <__divsf3_pse+0x8e>
 b44:	0e 2e       	mov	r0, r30
 b46:	3a f0       	brmi	.+14     	; 0xb56 <__divsf3_pse+0x3a>
 b48:	e0 e8       	ldi	r30, 0x80	; 128
 b4a:	30 d0       	rcall	.+96     	; 0xbac <__divsf3_pse+0x90>
 b4c:	91 50       	subi	r25, 0x01	; 1
 b4e:	50 40       	sbci	r21, 0x00	; 0
 b50:	e6 95       	lsr	r30
 b52:	00 1c       	adc	r0, r0
 b54:	ca f7       	brpl	.-14     	; 0xb48 <__divsf3_pse+0x2c>
 b56:	29 d0       	rcall	.+82     	; 0xbaa <__divsf3_pse+0x8e>
 b58:	fe 2f       	mov	r31, r30
 b5a:	27 d0       	rcall	.+78     	; 0xbaa <__divsf3_pse+0x8e>
 b5c:	66 0f       	add	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	bb 1f       	adc	r27, r27
 b64:	26 17       	cp	r18, r22
 b66:	37 07       	cpc	r19, r23
 b68:	48 07       	cpc	r20, r24
 b6a:	ab 07       	cpc	r26, r27
 b6c:	b0 e8       	ldi	r27, 0x80	; 128
 b6e:	09 f0       	breq	.+2      	; 0xb72 <__divsf3_pse+0x56>
 b70:	bb 0b       	sbc	r27, r27
 b72:	80 2d       	mov	r24, r0
 b74:	bf 01       	movw	r22, r30
 b76:	ff 27       	eor	r31, r31
 b78:	93 58       	subi	r25, 0x83	; 131
 b7a:	5f 4f       	sbci	r21, 0xFF	; 255
 b7c:	2a f0       	brmi	.+10     	; 0xb88 <__divsf3_pse+0x6c>
 b7e:	9e 3f       	cpi	r25, 0xFE	; 254
 b80:	51 05       	cpc	r21, r1
 b82:	68 f0       	brcs	.+26     	; 0xb9e <__divsf3_pse+0x82>
 b84:	8d c0       	rjmp	.+282    	; 0xca0 <__fp_inf>
 b86:	d7 c0       	rjmp	.+430    	; 0xd36 <__fp_szero>
 b88:	5f 3f       	cpi	r21, 0xFF	; 255
 b8a:	ec f3       	brlt	.-6      	; 0xb86 <__divsf3_pse+0x6a>
 b8c:	98 3e       	cpi	r25, 0xE8	; 232
 b8e:	dc f3       	brlt	.-10     	; 0xb86 <__divsf3_pse+0x6a>
 b90:	86 95       	lsr	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b7 95       	ror	r27
 b98:	f7 95       	ror	r31
 b9a:	9f 5f       	subi	r25, 0xFF	; 255
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__divsf3_pse+0x74>
 b9e:	88 0f       	add	r24, r24
 ba0:	91 1d       	adc	r25, r1
 ba2:	96 95       	lsr	r25
 ba4:	87 95       	ror	r24
 ba6:	97 f9       	bld	r25, 7
 ba8:	08 95       	ret
 baa:	e1 e0       	ldi	r30, 0x01	; 1
 bac:	66 0f       	add	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	bb 1f       	adc	r27, r27
 bb4:	62 17       	cp	r22, r18
 bb6:	73 07       	cpc	r23, r19
 bb8:	84 07       	cpc	r24, r20
 bba:	ba 07       	cpc	r27, r26
 bbc:	20 f0       	brcs	.+8      	; 0xbc6 <__divsf3_pse+0xaa>
 bbe:	62 1b       	sub	r22, r18
 bc0:	73 0b       	sbc	r23, r19
 bc2:	84 0b       	sbc	r24, r20
 bc4:	ba 0b       	sbc	r27, r26
 bc6:	ee 1f       	adc	r30, r30
 bc8:	88 f7       	brcc	.-30     	; 0xbac <__divsf3_pse+0x90>
 bca:	e0 95       	com	r30
 bcc:	08 95       	ret

00000bce <__fixunssfsi>:
 bce:	98 d0       	rcall	.+304    	; 0xd00 <__fp_splitA>
 bd0:	88 f0       	brcs	.+34     	; 0xbf4 <__fixunssfsi+0x26>
 bd2:	9f 57       	subi	r25, 0x7F	; 127
 bd4:	90 f0       	brcs	.+36     	; 0xbfa <__fixunssfsi+0x2c>
 bd6:	b9 2f       	mov	r27, r25
 bd8:	99 27       	eor	r25, r25
 bda:	b7 51       	subi	r27, 0x17	; 23
 bdc:	a0 f0       	brcs	.+40     	; 0xc06 <__fixunssfsi+0x38>
 bde:	d1 f0       	breq	.+52     	; 0xc14 <__fixunssfsi+0x46>
 be0:	66 0f       	add	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	1a f0       	brmi	.+6      	; 0xbf0 <__fixunssfsi+0x22>
 bea:	ba 95       	dec	r27
 bec:	c9 f7       	brne	.-14     	; 0xbe0 <__fixunssfsi+0x12>
 bee:	12 c0       	rjmp	.+36     	; 0xc14 <__fixunssfsi+0x46>
 bf0:	b1 30       	cpi	r27, 0x01	; 1
 bf2:	81 f0       	breq	.+32     	; 0xc14 <__fixunssfsi+0x46>
 bf4:	9f d0       	rcall	.+318    	; 0xd34 <__fp_zero>
 bf6:	b1 e0       	ldi	r27, 0x01	; 1
 bf8:	08 95       	ret
 bfa:	9c c0       	rjmp	.+312    	; 0xd34 <__fp_zero>
 bfc:	67 2f       	mov	r22, r23
 bfe:	78 2f       	mov	r23, r24
 c00:	88 27       	eor	r24, r24
 c02:	b8 5f       	subi	r27, 0xF8	; 248
 c04:	39 f0       	breq	.+14     	; 0xc14 <__fixunssfsi+0x46>
 c06:	b9 3f       	cpi	r27, 0xF9	; 249
 c08:	cc f3       	brlt	.-14     	; 0xbfc <__fixunssfsi+0x2e>
 c0a:	86 95       	lsr	r24
 c0c:	77 95       	ror	r23
 c0e:	67 95       	ror	r22
 c10:	b3 95       	inc	r27
 c12:	d9 f7       	brne	.-10     	; 0xc0a <__fixunssfsi+0x3c>
 c14:	3e f4       	brtc	.+14     	; 0xc24 <__fixunssfsi+0x56>
 c16:	90 95       	com	r25
 c18:	80 95       	com	r24
 c1a:	70 95       	com	r23
 c1c:	61 95       	neg	r22
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	08 95       	ret

00000c26 <__floatunsisf>:
 c26:	e8 94       	clt
 c28:	09 c0       	rjmp	.+18     	; 0xc3c <__floatsisf+0x12>

00000c2a <__floatsisf>:
 c2a:	97 fb       	bst	r25, 7
 c2c:	3e f4       	brtc	.+14     	; 0xc3c <__floatsisf+0x12>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	99 23       	and	r25, r25
 c3e:	a9 f0       	breq	.+42     	; 0xc6a <__floatsisf+0x40>
 c40:	f9 2f       	mov	r31, r25
 c42:	96 e9       	ldi	r25, 0x96	; 150
 c44:	bb 27       	eor	r27, r27
 c46:	93 95       	inc	r25
 c48:	f6 95       	lsr	r31
 c4a:	87 95       	ror	r24
 c4c:	77 95       	ror	r23
 c4e:	67 95       	ror	r22
 c50:	b7 95       	ror	r27
 c52:	f1 11       	cpse	r31, r1
 c54:	f8 cf       	rjmp	.-16     	; 0xc46 <__floatsisf+0x1c>
 c56:	fa f4       	brpl	.+62     	; 0xc96 <__floatsisf+0x6c>
 c58:	bb 0f       	add	r27, r27
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__floatsisf+0x36>
 c5c:	60 ff       	sbrs	r22, 0
 c5e:	1b c0       	rjmp	.+54     	; 0xc96 <__floatsisf+0x6c>
 c60:	6f 5f       	subi	r22, 0xFF	; 255
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <__floatsisf+0x6c>
 c6a:	88 23       	and	r24, r24
 c6c:	11 f0       	breq	.+4      	; 0xc72 <__floatsisf+0x48>
 c6e:	96 e9       	ldi	r25, 0x96	; 150
 c70:	11 c0       	rjmp	.+34     	; 0xc94 <__floatsisf+0x6a>
 c72:	77 23       	and	r23, r23
 c74:	21 f0       	breq	.+8      	; 0xc7e <__floatsisf+0x54>
 c76:	9e e8       	ldi	r25, 0x8E	; 142
 c78:	87 2f       	mov	r24, r23
 c7a:	76 2f       	mov	r23, r22
 c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__floatsisf+0x5e>
 c7e:	66 23       	and	r22, r22
 c80:	71 f0       	breq	.+28     	; 0xc9e <__floatsisf+0x74>
 c82:	96 e8       	ldi	r25, 0x86	; 134
 c84:	86 2f       	mov	r24, r22
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	60 e0       	ldi	r22, 0x00	; 0
 c8a:	2a f0       	brmi	.+10     	; 0xc96 <__floatsisf+0x6c>
 c8c:	9a 95       	dec	r25
 c8e:	66 0f       	add	r22, r22
 c90:	77 1f       	adc	r23, r23
 c92:	88 1f       	adc	r24, r24
 c94:	da f7       	brpl	.-10     	; 0xc8c <__floatsisf+0x62>
 c96:	88 0f       	add	r24, r24
 c98:	96 95       	lsr	r25
 c9a:	87 95       	ror	r24
 c9c:	97 f9       	bld	r25, 7
 c9e:	08 95       	ret

00000ca0 <__fp_inf>:
 ca0:	97 f9       	bld	r25, 7
 ca2:	9f 67       	ori	r25, 0x7F	; 127
 ca4:	80 e8       	ldi	r24, 0x80	; 128
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	60 e0       	ldi	r22, 0x00	; 0
 caa:	08 95       	ret

00000cac <__fp_nan>:
 cac:	9f ef       	ldi	r25, 0xFF	; 255
 cae:	80 ec       	ldi	r24, 0xC0	; 192
 cb0:	08 95       	ret

00000cb2 <__fp_pscA>:
 cb2:	00 24       	eor	r0, r0
 cb4:	0a 94       	dec	r0
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	09 06       	cpc	r0, r25
 cbe:	08 95       	ret

00000cc0 <__fp_pscB>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	12 16       	cp	r1, r18
 cc6:	13 06       	cpc	r1, r19
 cc8:	14 06       	cpc	r1, r20
 cca:	05 06       	cpc	r0, r21
 ccc:	08 95       	ret

00000cce <__fp_round>:
 cce:	09 2e       	mov	r0, r25
 cd0:	03 94       	inc	r0
 cd2:	00 0c       	add	r0, r0
 cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0xc>
 cd6:	88 23       	and	r24, r24
 cd8:	52 f0       	brmi	.+20     	; 0xcee <__fp_round+0x20>
 cda:	bb 0f       	add	r27, r27
 cdc:	40 f4       	brcc	.+16     	; 0xcee <__fp_round+0x20>
 cde:	bf 2b       	or	r27, r31
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_round+0x18>
 ce2:	60 ff       	sbrs	r22, 0
 ce4:	04 c0       	rjmp	.+8      	; 0xcee <__fp_round+0x20>
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	08 95       	ret

00000cf0 <__fp_split3>:
 cf0:	57 fd       	sbrc	r21, 7
 cf2:	90 58       	subi	r25, 0x80	; 128
 cf4:	44 0f       	add	r20, r20
 cf6:	55 1f       	adc	r21, r21
 cf8:	59 f0       	breq	.+22     	; 0xd10 <__fp_splitA+0x10>
 cfa:	5f 3f       	cpi	r21, 0xFF	; 255
 cfc:	71 f0       	breq	.+28     	; 0xd1a <__fp_splitA+0x1a>
 cfe:	47 95       	ror	r20

00000d00 <__fp_splitA>:
 d00:	88 0f       	add	r24, r24
 d02:	97 fb       	bst	r25, 7
 d04:	99 1f       	adc	r25, r25
 d06:	61 f0       	breq	.+24     	; 0xd20 <__fp_splitA+0x20>
 d08:	9f 3f       	cpi	r25, 0xFF	; 255
 d0a:	79 f0       	breq	.+30     	; 0xd2a <__fp_splitA+0x2a>
 d0c:	87 95       	ror	r24
 d0e:	08 95       	ret
 d10:	12 16       	cp	r1, r18
 d12:	13 06       	cpc	r1, r19
 d14:	14 06       	cpc	r1, r20
 d16:	55 1f       	adc	r21, r21
 d18:	f2 cf       	rjmp	.-28     	; 0xcfe <__fp_split3+0xe>
 d1a:	46 95       	lsr	r20
 d1c:	f1 df       	rcall	.-30     	; 0xd00 <__fp_splitA>
 d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__fp_splitA+0x30>
 d20:	16 16       	cp	r1, r22
 d22:	17 06       	cpc	r1, r23
 d24:	18 06       	cpc	r1, r24
 d26:	99 1f       	adc	r25, r25
 d28:	f1 cf       	rjmp	.-30     	; 0xd0c <__fp_splitA+0xc>
 d2a:	86 95       	lsr	r24
 d2c:	71 05       	cpc	r23, r1
 d2e:	61 05       	cpc	r22, r1
 d30:	08 94       	sec
 d32:	08 95       	ret

00000d34 <__fp_zero>:
 d34:	e8 94       	clt

00000d36 <__fp_szero>:
 d36:	bb 27       	eor	r27, r27
 d38:	66 27       	eor	r22, r22
 d3a:	77 27       	eor	r23, r23
 d3c:	cb 01       	movw	r24, r22
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

00000d42 <__mulsf3>:
 d42:	0b d0       	rcall	.+22     	; 0xd5a <__mulsf3x>
 d44:	c4 cf       	rjmp	.-120    	; 0xcce <__fp_round>
 d46:	b5 df       	rcall	.-150    	; 0xcb2 <__fp_pscA>
 d48:	28 f0       	brcs	.+10     	; 0xd54 <__mulsf3+0x12>
 d4a:	ba df       	rcall	.-140    	; 0xcc0 <__fp_pscB>
 d4c:	18 f0       	brcs	.+6      	; 0xd54 <__mulsf3+0x12>
 d4e:	95 23       	and	r25, r21
 d50:	09 f0       	breq	.+2      	; 0xd54 <__mulsf3+0x12>
 d52:	a6 cf       	rjmp	.-180    	; 0xca0 <__fp_inf>
 d54:	ab cf       	rjmp	.-170    	; 0xcac <__fp_nan>
 d56:	11 24       	eor	r1, r1
 d58:	ee cf       	rjmp	.-36     	; 0xd36 <__fp_szero>

00000d5a <__mulsf3x>:
 d5a:	ca df       	rcall	.-108    	; 0xcf0 <__fp_split3>
 d5c:	a0 f3       	brcs	.-24     	; 0xd46 <__mulsf3+0x4>

00000d5e <__mulsf3_pse>:
 d5e:	95 9f       	mul	r25, r21
 d60:	d1 f3       	breq	.-12     	; 0xd56 <__mulsf3+0x14>
 d62:	95 0f       	add	r25, r21
 d64:	50 e0       	ldi	r21, 0x00	; 0
 d66:	55 1f       	adc	r21, r21
 d68:	62 9f       	mul	r22, r18
 d6a:	f0 01       	movw	r30, r0
 d6c:	72 9f       	mul	r23, r18
 d6e:	bb 27       	eor	r27, r27
 d70:	f0 0d       	add	r31, r0
 d72:	b1 1d       	adc	r27, r1
 d74:	63 9f       	mul	r22, r19
 d76:	aa 27       	eor	r26, r26
 d78:	f0 0d       	add	r31, r0
 d7a:	b1 1d       	adc	r27, r1
 d7c:	aa 1f       	adc	r26, r26
 d7e:	64 9f       	mul	r22, r20
 d80:	66 27       	eor	r22, r22
 d82:	b0 0d       	add	r27, r0
 d84:	a1 1d       	adc	r26, r1
 d86:	66 1f       	adc	r22, r22
 d88:	82 9f       	mul	r24, r18
 d8a:	22 27       	eor	r18, r18
 d8c:	b0 0d       	add	r27, r0
 d8e:	a1 1d       	adc	r26, r1
 d90:	62 1f       	adc	r22, r18
 d92:	73 9f       	mul	r23, r19
 d94:	b0 0d       	add	r27, r0
 d96:	a1 1d       	adc	r26, r1
 d98:	62 1f       	adc	r22, r18
 d9a:	83 9f       	mul	r24, r19
 d9c:	a0 0d       	add	r26, r0
 d9e:	61 1d       	adc	r22, r1
 da0:	22 1f       	adc	r18, r18
 da2:	74 9f       	mul	r23, r20
 da4:	33 27       	eor	r19, r19
 da6:	a0 0d       	add	r26, r0
 da8:	61 1d       	adc	r22, r1
 daa:	23 1f       	adc	r18, r19
 dac:	84 9f       	mul	r24, r20
 dae:	60 0d       	add	r22, r0
 db0:	21 1d       	adc	r18, r1
 db2:	82 2f       	mov	r24, r18
 db4:	76 2f       	mov	r23, r22
 db6:	6a 2f       	mov	r22, r26
 db8:	11 24       	eor	r1, r1
 dba:	9f 57       	subi	r25, 0x7F	; 127
 dbc:	50 40       	sbci	r21, 0x00	; 0
 dbe:	8a f0       	brmi	.+34     	; 0xde2 <__mulsf3_pse+0x84>
 dc0:	e1 f0       	breq	.+56     	; 0xdfa <__mulsf3_pse+0x9c>
 dc2:	88 23       	and	r24, r24
 dc4:	4a f0       	brmi	.+18     	; 0xdd8 <__mulsf3_pse+0x7a>
 dc6:	ee 0f       	add	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	bb 1f       	adc	r27, r27
 dcc:	66 1f       	adc	r22, r22
 dce:	77 1f       	adc	r23, r23
 dd0:	88 1f       	adc	r24, r24
 dd2:	91 50       	subi	r25, 0x01	; 1
 dd4:	50 40       	sbci	r21, 0x00	; 0
 dd6:	a9 f7       	brne	.-22     	; 0xdc2 <__mulsf3_pse+0x64>
 dd8:	9e 3f       	cpi	r25, 0xFE	; 254
 dda:	51 05       	cpc	r21, r1
 ddc:	70 f0       	brcs	.+28     	; 0xdfa <__mulsf3_pse+0x9c>
 dde:	60 cf       	rjmp	.-320    	; 0xca0 <__fp_inf>
 de0:	aa cf       	rjmp	.-172    	; 0xd36 <__fp_szero>
 de2:	5f 3f       	cpi	r21, 0xFF	; 255
 de4:	ec f3       	brlt	.-6      	; 0xde0 <__mulsf3_pse+0x82>
 de6:	98 3e       	cpi	r25, 0xE8	; 232
 de8:	dc f3       	brlt	.-10     	; 0xde0 <__mulsf3_pse+0x82>
 dea:	86 95       	lsr	r24
 dec:	77 95       	ror	r23
 dee:	67 95       	ror	r22
 df0:	b7 95       	ror	r27
 df2:	f7 95       	ror	r31
 df4:	e7 95       	ror	r30
 df6:	9f 5f       	subi	r25, 0xFF	; 255
 df8:	c1 f7       	brne	.-16     	; 0xdea <__mulsf3_pse+0x8c>
 dfa:	fe 2b       	or	r31, r30
 dfc:	88 0f       	add	r24, r24
 dfe:	91 1d       	adc	r25, r1
 e00:	96 95       	lsr	r25
 e02:	87 95       	ror	r24
 e04:	97 f9       	bld	r25, 7
 e06:	08 95       	ret

00000e08 <round>:
 e08:	7b df       	rcall	.-266    	; 0xd00 <__fp_splitA>
 e0a:	e0 f0       	brcs	.+56     	; 0xe44 <round+0x3c>
 e0c:	9e 37       	cpi	r25, 0x7E	; 126
 e0e:	d8 f0       	brcs	.+54     	; 0xe46 <round+0x3e>
 e10:	96 39       	cpi	r25, 0x96	; 150
 e12:	b8 f4       	brcc	.+46     	; 0xe42 <round+0x3a>
 e14:	9e 38       	cpi	r25, 0x8E	; 142
 e16:	48 f4       	brcc	.+18     	; 0xe2a <round+0x22>
 e18:	67 2f       	mov	r22, r23
 e1a:	78 2f       	mov	r23, r24
 e1c:	88 27       	eor	r24, r24
 e1e:	98 5f       	subi	r25, 0xF8	; 248
 e20:	f9 cf       	rjmp	.-14     	; 0xe14 <round+0xc>
 e22:	86 95       	lsr	r24
 e24:	77 95       	ror	r23
 e26:	67 95       	ror	r22
 e28:	93 95       	inc	r25
 e2a:	95 39       	cpi	r25, 0x95	; 149
 e2c:	d0 f3       	brcs	.-12     	; 0xe22 <round+0x1a>
 e2e:	b6 2f       	mov	r27, r22
 e30:	b1 70       	andi	r27, 0x01	; 1
 e32:	6b 0f       	add	r22, r27
 e34:	71 1d       	adc	r23, r1
 e36:	81 1d       	adc	r24, r1
 e38:	20 f4       	brcc	.+8      	; 0xe42 <round+0x3a>
 e3a:	87 95       	ror	r24
 e3c:	77 95       	ror	r23
 e3e:	67 95       	ror	r22
 e40:	93 95       	inc	r25
 e42:	02 c0       	rjmp	.+4      	; 0xe48 <__fp_mintl>
 e44:	1c c0       	rjmp	.+56     	; 0xe7e <__fp_mpack>
 e46:	77 cf       	rjmp	.-274    	; 0xd36 <__fp_szero>

00000e48 <__fp_mintl>:
 e48:	88 23       	and	r24, r24
 e4a:	71 f4       	brne	.+28     	; 0xe68 <__fp_mintl+0x20>
 e4c:	77 23       	and	r23, r23
 e4e:	21 f0       	breq	.+8      	; 0xe58 <__fp_mintl+0x10>
 e50:	98 50       	subi	r25, 0x08	; 8
 e52:	87 2b       	or	r24, r23
 e54:	76 2f       	mov	r23, r22
 e56:	07 c0       	rjmp	.+14     	; 0xe66 <__fp_mintl+0x1e>
 e58:	66 23       	and	r22, r22
 e5a:	11 f4       	brne	.+4      	; 0xe60 <__fp_mintl+0x18>
 e5c:	99 27       	eor	r25, r25
 e5e:	0d c0       	rjmp	.+26     	; 0xe7a <__fp_mintl+0x32>
 e60:	90 51       	subi	r25, 0x10	; 16
 e62:	86 2b       	or	r24, r22
 e64:	70 e0       	ldi	r23, 0x00	; 0
 e66:	60 e0       	ldi	r22, 0x00	; 0
 e68:	2a f0       	brmi	.+10     	; 0xe74 <__fp_mintl+0x2c>
 e6a:	9a 95       	dec	r25
 e6c:	66 0f       	add	r22, r22
 e6e:	77 1f       	adc	r23, r23
 e70:	88 1f       	adc	r24, r24
 e72:	da f7       	brpl	.-10     	; 0xe6a <__fp_mintl+0x22>
 e74:	88 0f       	add	r24, r24
 e76:	96 95       	lsr	r25
 e78:	87 95       	ror	r24
 e7a:	97 f9       	bld	r25, 7
 e7c:	08 95       	ret

00000e7e <__fp_mpack>:
 e7e:	9f 3f       	cpi	r25, 0xFF	; 255
 e80:	31 f0       	breq	.+12     	; 0xe8e <__fp_mpack_finite+0xc>

00000e82 <__fp_mpack_finite>:
 e82:	91 50       	subi	r25, 0x01	; 1
 e84:	20 f4       	brcc	.+8      	; 0xe8e <__fp_mpack_finite+0xc>
 e86:	87 95       	ror	r24
 e88:	77 95       	ror	r23
 e8a:	67 95       	ror	r22
 e8c:	b7 95       	ror	r27
 e8e:	88 0f       	add	r24, r24
 e90:	91 1d       	adc	r25, r1
 e92:	96 95       	lsr	r25
 e94:	87 95       	ror	r24
 e96:	97 f9       	bld	r25, 7
 e98:	08 95       	ret

00000e9a <strcmp>:
 e9a:	fb 01       	movw	r30, r22
 e9c:	dc 01       	movw	r26, r24
 e9e:	8d 91       	ld	r24, X+
 ea0:	01 90       	ld	r0, Z+
 ea2:	80 19       	sub	r24, r0
 ea4:	01 10       	cpse	r0, r1
 ea6:	d9 f3       	breq	.-10     	; 0xe9e <strcmp+0x4>
 ea8:	99 0b       	sbc	r25, r25
 eaa:	08 95       	ret

00000eac <_exit>:
 eac:	f8 94       	cli

00000eae <__stop_program>:
 eae:	ff cf       	rjmp	.-2      	; 0xeae <__stop_program>
